--- include/Pythia8Plugins/EvtGen.h
+++ include/Pythia8Plugins/EvtGen.h
@@ -58,9 +58,14 @@
 
   // Constructor.
   EvtGenDecays(Pythia *pythiaPtrIn, string decayFile, string particleDataFile,
-               EvtAbsRadCorr *isrPtr = 0, int mixing = 1, bool xml = false,
+               EvtExternalGenList *extPtr = 0, EvtAbsRadCorr *fsrPtr = 0,
+	       int mixing = 1, bool xml = false,
                bool limit = true);
 
+  // Destructor.
+  ~EvtGenDecays() {
+    if (evtgen) delete evtgen; if (owner && genlist) delete genlist;}
+
   // Perform all decays.
   void decay();
 
@@ -78,10 +83,11 @@
 
   // Read an EvtGen user decay file.
   void readDecayFile(string decayFile, bool xml = false) {
-    evtgen.readUDecay(decayFile.c_str(), xml);}
+    evtgen->readUDecay(decayFile.c_str(), xml);}
 
   // List of additional models.
-  EvtExternalGenList genlist;
+  bool owner;
+  EvtExternalGenList *genlist;
   list<EvtDecayBase*> models;
 
 protected:
@@ -93,7 +99,7 @@
   EvtGenRandom rndm;
 
   // The EvtGen object.
-  EvtGen evtgen;
+  EvtGen *evtgen;
 
   // Set of particle IDs to decay with EvtGen.
   set<int> ids;
@@ -132,18 +138,32 @@
 //   pythiaPtrIn:      the pointer to the associated Pythia object.
 //   decayFile:        the name of the decay file to pass to EvtGen.
 //   particleDataFile: the name of the particle data file to pass to EvtGen.
-//   isrPtr:           the EvtAbsRadCorr pointer to pass to EvtGen.
+//   extPtr:           the optional EvtExternalGenList pointer, this must be
+//                     be provided if fsrPtr is provided to avoid double 
+//                     initializations.
+//   fsrPtr:           the EvtAbsRadCorr pointer to pass to EvtGen.
 //   mixing:           the mixing type to pass to EvtGen.
 //   xml:              flag to use XML files to pass to EvtGen.
 //   limit:            flag to limit particle decays based on Pythia criteria.
 
 EvtGenDecays::EvtGenDecays(Pythia *pythiaPtrIn, string decayFile,
-                           string particleDataFile, EvtAbsRadCorr *isrPtr,
+                           string particleDataFile,
+			   EvtExternalGenList *extPtr, EvtAbsRadCorr *fsrPtr,
                            int mixing, bool xml, bool limit) :
-  models(genlist.getListOfModels()), pythiaPtr(pythiaPtrIn),
-  rndm(&pythiaPtr->rndm), evtgen(decayFile.c_str(), particleDataFile.c_str(),
-                                   &rndm, isrPtr, &models, mixing, xml) {
+  pythiaPtr(pythiaPtrIn), rndm(&pythiaPtr->rndm) {
+
+  // Initialize EvtGen.
+  if (fsrPtr && !extPtr) {
+    if (pythiaPtr) pythiaPtr->info.errorMsg("Error in EvtGenDecays: fsrPtr "
+					    "provided but extPtr is null.");
+    return;
+  } else if (extPtr) {genlist = extPtr; owner = false;}
+  else {genlist = new EvtExternalGenList(); owner = true;}
+  models = genlist->getListOfModels();
+  evtgen = new EvtGen(decayFile.c_str(), particleDataFile.c_str(),
+		      &rndm, fsrPtr, &models, mixing, xml);
 
+  // Set Pythia particles as stable.
   if (!pythiaPtr) return;
   for (int iPrt = 0; iPrt < (int)EvtPDL::entries(); ++iPrt) {
     int id = EvtPDL::getStdHep(EvtPDL::getEntry(iPrt));
@@ -177,6 +197,7 @@
 void EvtGenDecays::decay() {
 
   // Loop over all particles in the Pythia event.
+  if (!pythiaPtr || !evtgen) return;
   Event &event = pythiaPtr->event;
   for (int iPro = 0; iPro < event.size(); ++iPro) {
 
@@ -190,7 +211,7 @@
       (EvtPDL::evtIdFromStdHep(pyPro->id()),
        EvtVector4R(pyPro->e(), pyPro->px(), pyPro->py(), pyPro->pz()));
     egPro->setDiagonalSpinDensity();
-    evtgen.generateDecay(egPro);
+    evtgen->generateDecay(egPro);
     if (egPro->getNDaug() == 0) {egPro->deleteTree(); continue;}
     pyPro->tau(egPro->getLifetime());
 
@@ -244,7 +265,7 @@
 // set. The name string is not set.
 
 void EvtGenDecays::updatePythia() {
-  if (!pythiaPtr) return;
+  if (!pythiaPtr || !evtgen) return;
   for (int entry = 0; entry < (int)EvtPDL::entries(); ++entry) {
     EvtId egid = EvtPDL::getEntry(entry);
     int   pyid = EvtPDL::getStdHep(egid);
@@ -268,7 +289,7 @@
 // type, charge, or nominal lifetime in the EvtGen particle database.
 
 void EvtGenDecays::updateEvtGen() {
-  if (!pythiaPtr) return;
+  if (!pythiaPtr || !evtgen) return;
   int pyid = pythiaPtr->particleData.nextId(0);
   while (pyid != 0) {
     EvtId egid = EvtPDL::evtIdFromStdHep(pyid);
