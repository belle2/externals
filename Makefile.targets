# reset makeflags for sub make calls
override MAKEFLAGS:=

# define directories
export BELLE2_EXTERNALS_DIR := $(shell pwd)
export BELLE2_EXTERNALS_SUBDIR := $(BELLE2_ARCH)/$(BELLE2_EXTERNALS_OPTION)
export PATCHDIR := $(BELLE2_EXTERNALS_DIR)
export EXTDIR := $(BELLE2_EXTERNALS_DIR)/$(BELLE2_EXTERNALS_SUBDIR)
export EXTSRCDIR := $(BELLE2_EXTERNALS_DIR)/src
export EXTBUILDDIR := $(BELLE2_EXTERNALS_DIR)/build/$(BELLE2_EXTERNALS_SUBDIR)
export EXTINCDIR := $(EXTDIR)/include
export EXTLIBDIR := $(EXTDIR)/lib
export EXTBINDIR := $(EXTDIR)/bin
export ROOTSYS := $(EXTDIR)/root

# download script to get and extract sources
export DOWNLOAD := $(BELLE2_EXTERNALS_DIR)/download.sh

# get rid of localization
export LANG=C

# cmake executable
CMAKE:=cmake

# set number of parallel jobs to the number of processors
ifeq ($(shell uname),Darwin)
  NPROCESSES=$(shell sysctl -n hw.ncpu 2> /dev/null)
else
  NPROCESSES=$(shell grep "physical id.*0" /proc/cpuinfo 2> /dev/null | wc -l)
  ifeq ($(NPROCESSES),0)
    NPROCESSES=$(shell grep processor /proc/cpuinfo 2> /dev/null | wc -l)
  endif
endif
ifdef BELLE2_MAKE_NPROCESSES
  NPROCESSES=$(BELLE2_MAKE_NPROCESSES)
endif
ifeq ($(NPROCESSES),0)
  NPROCESSES=1
endif

# Default compiler: gcc/g++
export CC:=gcc
export CXX:=g++

# set debug or optimization options
ifeq ($(BELLE2_EXTERNALS_OPTION),debug)
  export CXXFLAGS=-g
  export BOOST_OPTION=variant=debug
  export CLHEP_OPTION=-DCMAKE_BUILD_TYPE=RelWithDebInfo
  export GEANT4_OPTION=-DCMAKE_BUILD_TYPE=RelWithDebInfo
  export XROOTD_OPTION=-DCMAKE_BUILD_TYPE=RelWithDebInfo
  export ROOT_OPTION=--build=debug
  export PYTHIA_OPTION=--enable-debug
  export EVTGEN_OPTION=--enable-debug
  export VC_OPTION=-DCMAKE_BUILD_TYPE=RelWithDebInfo
  export FANN_OPTION=-DCMAKE_BUILD_TYPE=RelWithDebInfo
else
# make if (option=opt or option=common) using the filter: filter will only
# return common or opt if they are in the EXTERNALS_OPTION so if the option is
# anything else we get an empty string
ifneq (, $(filter $(BELLE2_EXTERNALS_OPTION), common opt))
  export CXXFLAGS=-O3
  export BOOST_OPTION=variant=release
  export CLHEP_OPTION=-DCMAKE_BUILD_TYPE=Release
  export GEANT4_OPTION=-DCMAKE_BUILD_TYPE=Release -DGEANT4_BUILD_STORE_TRAJECTORY=OFF -DGEANT4_BUILD_VERBOSE_CODE=OFF
  export XROOTD_OPTION=-DCMAKE_BUILD_TYPE=Release
  export ROOT_OPTION=
  export PYTHIA_OPTION=
  export EVTGEN_OPTION=
  export VC_OPTION=-DCMAKE_BUILD_TYPE=Release
  export FANN_OPTION=-DCMAKE_BUILD_TYPE=Release
else
ifeq ($(BELLE2_EXTERNALS_OPTION),intel)
  export CC=icc
  export CXX=icpc
  export CXXCPP=icc -E
  export FC=ifort
  export AR=xiar
  export LD=xild
  export BOOST_OPTION=variant=release toolset=intel
  export CLHEP_OPTION=-DCMAKE_BUILD_TYPE=Release
  export GEANT4_OPTION=-DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icc
  export XROOTD_OPTION=-DCMAKE_BUILD_TYPE=Release
  export ROOT_OPTION=linuxicc
  ifeq ($(shell uname -m),x86_64)
    export ROOT_OPTION=linuxx8664icc
  endif
  export PYTHIA_OPTION=
  export EVTGEN_OPTION=
  export VC_OPTION=-DCMAKE_BUILD_TYPE=Release
  export FANN_OPTION=-DCMAKE_BUILD_TYPE=Release
else
  $(error Unknown externals build option. Please source the setup_belle2 script.)
endif
endif
endif

ifdef ORACLE_HOME
  ROOT_OPTION += --with-oracle-libdir=$(ORACLE_HOME) --with-oracle-incdir=$(ORACLE_HOME)/sdk/include/
endif
ROOT_OPTION += --with-pgsql-libdir=$(EXTLIBDIR) --with-pgsql-incdir=$(EXTINCDIR)/pgsql/

# check whether geant4 data files are already installed
GEANT4_DATA_EXISTS=$(shell test -d share/Geant4-9.6.2/data/G4EMLOW6.32; echo $$?)
ifneq ($(GEANT4_DATA_EXISTS),0)
  GEANT4_OPTION+= -DGEANT4_INSTALL_DATA=ON
endif

# check for graphics packages
GL_XMU_EXISTS=$(shell pkg-config --exists gl xmu 2> /dev/null; echo $$?)
ifeq ($(GL_XMU_EXISTS),0)
  GEANT4_OPTION+= -D g4vis_build_openglx_driver='y' -D g4vis_use_openglx='y'
endif


# now path for current option and common packages, could be two times the same
export PATH := $(ROOTSYS)/bin:$(EXTBINDIR):$(BELLE2_EXTERNALS_DIR)/$(BELLE2_ARCH)/common/bin:$(PATH)
ifeq ($(shell uname),Darwin)
  export DYLD_LIBRARY_PATH := $(ROOTSYS)/lib:$(EXTLIBDIR):$(BELLE2_EXTERNALS_DIR)/$(BELLE2_ARCH)/common/lib:$(DYLD_LIBRARY_PATH)
else
  export LD_LIBRARY_PATH := $(ROOTSYS)/lib:$(EXTLIBDIR):$(BELLE2_EXTERNALS_DIR)/$(BELLE2_ARCH)/common/lib:$(LD_LIBRARY_PATH)
endif

# directory we want to create
DIRECTORIES=$(EXTSRCDIR) $(EXTBUILDDIR) $(EXTLIBDIR) $(EXTBINDIR)
# directories we want to share between all options
SHARED_DIRECTORIES=$(EXTINCDIR) $(EXTDIR)/share

# when called without targets, do nothing
donothing: ;

dirs: $(DIRECTORIES) $(SHARED_DIRECTORIES)
# make a lib64 -> lib symlink on 64bit platforms because gcc decides it needs
# to install some libraries in lib64
ifeq ($(shell uname -m),x86_64)
	@cd $(EXTDIR) && ln -sfT lib lib64
endif

# pkg config wrapper using correct paths and being relocatable (if .pc files are fixed)
pkg-config-wrapper: $(EXTBINDIR)/pkg-config
# nothing to do for src
pkg-config-wrapper.src: ;

$(EXTBINDIR)/pkg-config: pkg-config
	@echo "Installing pkg-config wrapper"
	@install $< $@

#Fix absolute paths in .pc files for pkg-config and in python scripts
relocatable_fixes:
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$${BELLE2_EXTERNALS_DIR}:g" $(EXTLIBDIR)/pkgconfig/*.pc
	#Fix absolute paths in pip packages and other python scripts
	@$(BELLE2_EXTERNALS_DIR)/python_relocate.py $(EXTDIR) $(EXTBINDIR) `python3-config --configdir`

# create directories
$(DIRECTORIES):
	@echo "create $@"
	@mkdir -p $@

# create shared directories
$(SHARED_DIRECTORIES):
	@echo "create shared $@"
	@mkdir -p $(BELLE2_EXTERNALS_DIR)/`basename $@`
	# TODO: make relpath dynamic?
	@cd `dirname $@` && ln -sf ../../`basename $@`

binutils: $(EXTBINDIR)/ld
binutils.src: $(EXTSRCDIR)/binutils

$(EXTSRCDIR)/binutils:
	@$(DOWNLOAD) binutils binutils-2.25.1.tar.gz http://ftp.gnu.org/gnu/binutils/binutils-2.25.1.tar.gz

$(EXTBINDIR)/ld: $(EXTSRCDIR)/binutils
	@echo "building binutils"
	@mkdir -p $(EXTBUILDDIR)/binutils
	#note: avoid propagating CXXFLAGS by explicitly unsetting in sub-shell (works in posix and csh)
	@cd $(EXTBUILDDIR)/binutils && unset CXXFLAGS && $(EXTSRCDIR)/binutils/configure --disable-werror --disable-multilib \
	    --enable-shared --prefix=$(EXTDIR) && make tooldir=$(EXTDIR) -j $(NPROCESSES) && \
	    make tooldir=$(EXTDIR) -j $(NPROCESSES) install

binutils.clean:
	@echo "cleaning binutils"
	@-cd $(EXTSRCDIR)/binutils/build && make distclean
	@rm -rf $(EXTSRCDIR)/binutils

gcc: $(EXTBINDIR)/gcc
gcc.src: $(EXTSRCDIR)/gcc

$(EXTSRCDIR)/gcc:
	@$(DOWNLOAD) gcc gcc-5.2.0.tar.bz2 http://ftp.gnu.org/gnu/gcc/gcc-5.2.0/gcc-5.2.0.tar.bz2
	# download prerequisites automatically
	@cd $(EXTSRCDIR)/gcc && contrib/download_prerequisites

$(EXTBINDIR)/gcc: $(EXTSRCDIR)/gcc
	@echo "building gcc"
	@mkdir -p $(EXTBUILDDIR)/gcc
	#note: avoid propagating CXXFLAGS by explicitly unsetting in sub-shell (works in posix and csh)
	@cd $(EXTBUILDDIR)/gcc/ && unset CXXFLAGS && $(EXTSRCDIR)/gcc/configure --disable-multilib --prefix=$(EXTDIR) \
	    --enable-languages=c,c++,fortran --without-system-libz && \
	    make -j $(NPROCESSES) && make install

gcc.clean:
	@echo "cleaning gcc"
	@rm -rf $(EXTSRCDIR)/gcc
	#@rm -rf $(EXTDIR)/gcc

libxml2: $(EXTBINDIR)/xml2-config
libxml2.src: $(EXTSRCDIR)/libxml2

libxml2.clean:
	@rm -fr $(EXTSRCDIR)/libxml

libxml2.touch:
	@rm $(EXTBINDIR)/xml2-config

$(EXTSRCDIR)/libxml2:
	@$(DOWNLOAD) libxml2 libxml2-2.9.2.tar.gz ftp://xmlsoft.org/libxml2/libxml2-2.9.2.tar.gz

$(EXTBINDIR)/xml2-config: $(EXTSRCDIR)/libxml2
	@cd $< && ./configure --prefix=$(EXTDIR) --enable-silent-rules --with-python=$(EXTBINDIR)/python3 && \
	    make -j $(NPROCESSES) && make install
	#Fix absolute path in xml2-config and lib/xml2Conf.sh
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$${BELLE2_EXTERNALS_DIR}:g" $@
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$${BELLE2_EXTERNALS_DIR}:g" $(EXTLIBDIR)/xml2Conf.sh

zlib: $(EXTLIBDIR)/libz.so
zlib.src: $(EXTSRCDIR)/zlib
zlib.touch:
	@rm -f $(EXTLIBDIR)/libz.so

$(EXTSRCDIR)/zlib:
	@$(DOWNLOAD) zlib zlib-1.2.8.tar.gz http://zlib.net/zlib-1.2.8.tar.gz

# zlib: so basic that we only want it it common so we just do an in source build
$(EXTLIBDIR)/libz.so: $(EXTSRCDIR)/zlib
	@cd $(EXTSRCDIR)/zlib && ./configure --prefix=$(EXTDIR) && \
	    make -j $(NPROCESSES) install

bzip2: $(EXTBINDIR)/bzip2
bzip2.src: $(EXTSRCDIR)/bzip2

bzip2.clean:
	@rm -fr $(EXTSRCDIR)/bzip2

bzip2.touch:
	@rm -fr $(EXTBINDIR)/bzip2

$(EXTSRCDIR)/bzip2:
	@$(DOWNLOAD) bzip2 bzip2-1.0.6.tar.gz http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz

$(EXTBINDIR)/bzip2: $(EXTSRCDIR)/bzip2
	@cd $< && make -f Makefile-libbz2_so && mv libbz2.so* $(EXTLIBDIR)
	@cd $< && make install PREFIX=$(EXTDIR)
	# make links relative
	@cd $(EXTBINDIR) && ln -fs bzdiff bzcmp && ln -fs bzgrep bzfgrep && \
	    ln -fs bzgrep bzegrep && ln -fs bzmore bzless

python: $(EXTBINDIR)/python3
python.src: $(EXTSRCDIR)/python

python.clean:
	@rm -fr $(EXTSRCDIR)/python

python.touch:
	@rm -fr $(EXTBINDIR)/python3

$(EXTSRCDIR)/python:
	@$(DOWNLOAD) python Python-3.4.3.tgz https://www.python.org/ftp/python/3.4.3/Python-3.4.3.tgz

$(EXTBINDIR)/python3: $(EXTSRCDIR)/python
	@echo "building python"
	#FIXME: ROOT configure does not work with default, so let's disable pymalloc for now
	@mkdir -p $(EXTBUILDDIR)/python
	@cd $(EXTBUILDDIR)/python && $(EXTSRCDIR)/python/configure --enable-shared --without-pymalloc \
	    --prefix=$(EXTDIR) --with-ensurepip=install --with-cxx-main=g++ && \
	    make -j $(NPROCESSES) && make install
# problem with pip 6.08 on SL5, upgrade to newer version before trying to install other packages
	@$(EXTBINDIR)/pip3 --disable-pip-version-check --trusted-host pypi.python.org install -U pip==7.1.2
# now intall all python packages defined in Makefile
	@$(EXTBINDIR)/pip3 --disable-pip-version-check install $(PYTHON_PACKAGES)

gdb: $(EXTBINDIR)/gdb
gdb.src: $(EXTSRCDIR)/gdb

$(EXTSRCDIR)/gdb:
	@$(DOWNLOAD) gdb gdb-7.8.2.tar.gz http://ftp.gnu.org/gnu/gdb/gdb-7.8.2.tar.gz

$(EXTBINDIR)/gdb: $(EXTSRCDIR)/gdb
	@echo "building gdb"
	#note: avoid propagating CXXFLAGS by explicitly unsetting in sub-shell (works in posix and csh)
	#note: GDB must be built inside source directory, otherwise it wants to build info manuals (makeinfo might not be installed)
	@cd $(EXTSRCDIR)/gdb && unset CXXFLAGS && $(EXTSRCDIR)/gdb/configure --prefix=$(EXTDIR) --with-python=python3 && \
	    make -j $(NPROCESSES) && make -j $(NPROCESSES) install

gdb.clean:
	@echo "cleaning gdb"
	@-cd $(EXTSRCDIR)/gdb && make distclean
	@rm -rf $(EXTSRCDIR)/gdb


# dependencies for cmake
cmake: $(EXTBINDIR)/cmake
cmake.src: $(EXTSRCDIR)/cmake/bootstrap

# cmake download
$(EXTSRCDIR)/cmake/bootstrap:
	@$(DOWNLOAD) cmake cmake-3.3.1.tar.gz http://www.cmake.org/files/v3.3/cmake-3.3.1.tar.gz

# cmake build
$(EXTBINDIR)/cmake: $(EXTSRCDIR)/cmake/bootstrap
	@echo "building cmake"
	@cd $(EXTSRCDIR)/cmake && ./bootstrap --prefix=$(EXTDIR) && \
	    sed -i 's/BUILD_CursesDialog\:BOOL=ON/BUILD_CursesDialog\:BOOL=OFF/g' CMakeCache.txt && \
	    make -j $(NPROCESSES) && make install

# cmake clean
cmake.clean:
	@echo "cleaning cmake"
	@cd $(EXTSRCDIR)/cmake && make clean
	@rm -f $(EXTBINDIR)/cmake

# cmake touch
cmake.touch:
	@rm -f $(EXTBINDIR)/cmake


# dependencies for google test
gtest: $(EXTLIBDIR)/libgtest.a
gtest.src: $(EXTSRCDIR)/gtest/README

# google test download
$(EXTSRCDIR)/gtest/README:
	@$(DOWNLOAD) gtest gtest-1.7.0.tar.gz https://github.com/google/googletest/archive/release-1.7.0.tar.gz

# google test build
$(EXTLIBDIR)/libgtest.a: $(EXTSRCDIR)/gtest/README
	@echo "building gtest"
	@mkdir -p $(EXTINCDIR)/gtest/internal
	@cp -a $(EXTSRCDIR)/gtest/include/gtest/*.h $(EXTINCDIR)/gtest/
	@cp -a $(EXTSRCDIR)/gtest/include/gtest/internal/*.h $(EXTINCDIR)/gtest/internal/
	@mkdir -p $(EXTBUILDDIR)/gtest
	$(CXX) -I$(EXTINCDIR) -I$(EXTSRCDIR)/gtest -c $(EXTSRCDIR)/gtest/src/gtest-all.cc -o $(EXTBUILDDIR)/gtest/gtest-all.o
	$(CXX) -I$(EXTINCDIR) -I$(EXTSRCDIR)/gtest -c $(EXTSRCDIR)/gtest/src/gtest_main.cc -o $(EXTBUILDDIR)/gtest/gtest_main.o
	@$(AR) -rv $(EXTLIBDIR)/libgtest.a $(EXTBUILDDIR)/gtest/gtest-all.o $(EXTBUILDDIR)/gtest/gtest_main.o

# google test clean
gtest.clean:
	@echo "cleaning gtest"
	@rm -rf $(EXTBUILDDIR)/gtest $(EXTINCDIR)/gtest $(EXTLIBDIR)/libgtest.a

# google test touch
gtest.touch:
	@rm -f $(EXTLIBDIR)/libgtest.a


# dependencies for boost
boost: $(EXTLIBDIR)/libboost_system.so
boost.src: $(EXTSRCDIR)/boost/INSTALL

# boost download
$(EXTSRCDIR)/boost/INSTALL:
	@$(DOWNLOAD) boost boost_1_59_0.tar.bz2 http://downloads.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.bz2

# boost build
$(EXTLIBDIR)/libboost_system.so: $(EXTSRCDIR)/boost/INSTALL
	@echo "building boost"
	@cd $(EXTSRCDIR)/boost && ./bootstrap.sh --includedir=$(EXTINCDIR) --libdir=$(EXTLIBDIR) --without-icu --with-python=python3 && \
	    ./b2 install --disable-icu --build-dir=$(EXTBUILDDIR) -j$(NPROCESSES) $(BOOST_OPTION)

# boost clean
boost.clean:
	@echo "cleaning boost"
	@-cd $(EXTSRCDIR)/boost && ./b2 --clean $(BOOST_OPTION)
	@rm -rf $(EXTINCDIR)/boost $(EXTLIBDIR)/libboost_* $(EXTBUILDDIR)/boost

# boost touch
boost.touch:
	@rm -f $(EXTLIBDIR)/libboost_system.so


# dependencies for CLHEP
clhep: $(EXTBINDIR)/clhep-config
clhep.src: $(EXTSRCDIR)/CLHEP

# CLHEP download
$(EXTSRCDIR)/CLHEP:
	@$(DOWNLOAD) CLHEP clhep-2.1.3.1.tgz http://proj-clhep.web.cern.ch/proj-clhep/DISTRIBUTION/tarFiles/clhep-2.1.3.1.tgz

# CLHEP build
$(EXTBINDIR)/clhep-config: $(EXTSRCDIR)/CLHEP
	@echo "building CLHEP"
	@mkdir -p $(EXTBUILDDIR)/CLHEP
	@cd $(EXTBUILDDIR)/CLHEP && $(CMAKE) -DCMAKE_INSTALL_PREFIX=$(EXTDIR) $(CLHEP_OPTION) $(EXTSRCDIR)/CLHEP/CLHEP && \
	    make -j $(NPROCESSES) && make install

# CLHEP clean
clhep.clean:
	@echo "cleaning CLHEP"
	@rm -rf $(EXTBUILDDIR)/CLHEP $(EXTDIR)/CLHEP $(EXTLIBDIR)/libCLHEP* $(EXTBINDIR)/clhep-config

# CLHEP touch
clhep.touch:
	@rm -f $(EXTBINDIR)/clhep-config


# dependencies for GEANT4
geant4: $(EXTBINDIR)/geant4.sh
geant4.src: $(EXTSRCDIR)/geant4

# GEANT4 download
$(EXTSRCDIR)/geant4:
	@$(DOWNLOAD) geant4 geant4.9.6.p02.tar.gz http://geant4.cern.ch/support/source/geant4.9.6.p02.tar.gz

# GEANT4 build
$(EXTBINDIR)/geant4.sh: $(EXTBINDIR)/clhep-config $(EXTSRCDIR)/geant4
	@echo "building geant4"
	@mkdir -p $(EXTBUILDDIR)/geant4
	@cd $(EXTBUILDDIR)/geant4 && $(CMAKE) -DCMAKE_INSTALL_PREFIX=$(EXTDIR) $(GEANT4_OPTION) \
	    -DCLHEP_ROOT_DIR=$(EXTDIR) -DCLHEP_INCLUDE_DIR=$(EXTINCDIR) -DCLHEP_LIBRARY=$(EXTLIBDIR) \
	    -DGEANT4_USE_G3TOG4=ON -DGEANT4_USE_SYSTEM_EXPAT=OFF $(EXTSRCDIR)/geant4 && \
	    make -j $(NPROCESSES) && make install
	# Fix absolute path in geant4-config
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$${BELLE2_EXTERNALS_DIR}:g" $(EXTBINDIR)/geant4-config
	# Also fix geant4make just to be safe
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$${BELLE2_EXTERNALS_DIR}:g" $(EXTDIR)/share/Geant4-9.6.2/geant4make/geant4make.*

# GEANT4 clean
geant4.clean:
	@echo "cleaning geant4"
	@-cd $(EXTBUILDDIR)/geant4 && make clean
	@rm -rf $(EXTBUILDDIR)/geant4 $(EXTDIR)/geant4 $(EXTDIR)/share/Geant4-9.6.2 $(EXTINCDIR)/Geant4 $(EXTLIBDIR)/libG4*.so $(EXTBINDIR)/geant4*

# GEANT4 touch command
geant4.touch:
	@rm -f $(EXTBINDIR)/geant4.sh


# dependencies for PostgreSql
postgresql: $(EXTBINDIR)/psql
postgresql.src: $(EXTSRCDIR)/postgresql/configure

# PostgreSql download
$(EXTSRCDIR)/postgresql/configure:
	@$(DOWNLOAD) postgresql postgresql-9.2.4.tar.gz http://ftp.postgresql.org/pub/source/v9.2.4/postgresql-9.2.4.tar.gz

# PostgreSql build
$(EXTBINDIR)/psql: $(EXTSRCDIR)/postgresql/configure
	@echo "building PostgreSql"
	@mkdir -p $(EXTBUILDDIR)/postgresql
	@cd $(EXTBUILDDIR)/postgresql && $(EXTSRCDIR)/postgresql/configure --prefix=$(EXTDIR) \
	    --includedir=$(EXTINCDIR)/pgsql/ --libdir=$(EXTLIBDIR) --bindir=$(EXTBINDIR) && \
	    make -j $(NPROCESSES) && make install

# PostgreSql clean
postgresql.clean:
	@echo "cleaning PostgreSql"
	@-cd $(EXTBUILDDIR)/postgresql 2>/dev/null && make clean
	@rm -rf $(EXTINCDIR)/pgsql $(EXTBINDIR)/psql

# PostgreSql touch
postgresql.touch:
	@rm -f $(EXTBINDIR)/psql


# dependencies for libpqxx
libpqxx: $(EXTBINDIR)/pqxx-config
libpqxx.src: $(EXTSRCDIR)/libpqxx/configure

# libpqxx download
$(EXTSRCDIR)/libpqxx/configure:
	@$(DOWNLOAD) libpqxx libpqxx-4.0.tar.gz http://pqxx.org/download/software/libpqxx/libpqxx-4.0.tar.gz

# libpqxx build, FIXME: pg_config could be in common? use `which pg_config`?
$(EXTBINDIR)/pqxx-config: $(EXTSRCDIR)/libpqxx/configure
	@echo "building libpqxx"
	@mkdir -p $(EXTBUILDDIR)/libpqxx
	@cd $(EXTBUILDDIR)/libpqxx && PG_CONFIG=$(EXTBINDIR)/pg_config $(EXTSRCDIR)/libpqxx/configure --enable-shared \
	    --prefix=$(EXTDIR) --includedir=$(EXTINCDIR)/ --libdir=$(EXTLIBDIR) --bindir=$(EXTBINDIR) && \
	    make -j $(NPROCESSES) && make install
	#Fix absolute path in pqxx-config
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$${BELLE2_EXTERNALS_DIR}:g" $@

# libpqxx clean
libpqxx.clean:
	@echo "cleaning libpqxx"
	@-cd $(EXTBUILDDIR)/libpqxx 2>/dev/null && make clean
	@rm -rf $(EXTINCDIR)/pqxx $(EXTBINDIR)/pqxx-config

# libpqxx touch
libpqxx.touch:
	@rm -f $(EXTBINDIR)/pqxx-config


# dependencies for NeuroBayes
neurobayes: $(EXTLIBDIR)/libNeuroBayesExpertCPP.so
neurobayes.src: $(EXTSRCDIR)/neurobayes/TMVAPlugin/README

# NeuroBayes download
$(EXTSRCDIR)/neurobayes/TMVAPlugin/README:
	@$(DOWNLOAD) neurobayes NeuroBayes_3.7.0_nbpluginfix.tgz
	@cd $(EXTSRCDIR)/neurobayes/TMVAPlugin && patch -Np1 < $(PATCHDIR)/neurobayes.patch

# NeuroBayes build
$(EXTLIBDIR)/libNeuroBayesExpertCPP.so: $(EXTSRCDIR)/neurobayes/TMVAPlugin/README
	@echo "building NeuroBayes"
	@mkdir -p $(EXTINCDIR)/neurobayes && cp $(EXTSRCDIR)/neurobayes/include/* $(EXTINCDIR)/neurobayes/
	@$(CXX) $(CXXFLAGS) -c -fPIC -I$(EXTINCDIR)/neurobayes -o $(EXTSRCDIR)/neurobayes/src/NeuroBayesTeacherDummy.o \
	    $(EXTSRCDIR)/neurobayes/src/NeuroBayesTeacherDummy.cc
	@$(CXX) -shared -o $(EXTLIBDIR)/libNeuroBayesTeacherCPP.so $(EXTSRCDIR)/neurobayes/src/NeuroBayesTeacherDummy.o
	@cp $(EXTSRCDIR)/neurobayes/`uname -m`/* $(EXTLIBDIR)/

# NeuroBayes clean command
neurobayes.clean:
	@echo "cleaning NeuroBayes"
	@rm -rf $(EXTLIBDIR)/libNeuroBayesExpertCPP.so $(EXTLIBDIR)/libdsa.so $(EXTINCDIR)/neurobayes

# NeuroBayes touch command
neurobayes.touch:
	@rm -f $(EXTLIBDIR)/libNeuroBayesExpertCPP.so


# dependencies for xrootd
xrootd: $(EXTBINDIR)/xrootd
xrootd.src: $(EXTSRCDIR)/xrootd

# xrootd download
$(EXTSRCDIR)/xrootd:
	@$(DOWNLOAD) xrootd xrootd-4.2.3.tar.gz http://xrootd.org/download/v4.2.3/xrootd-4.2.3.tar.gz

# xrootd build
$(EXTBINDIR)/xrootd: $(EXTSRCDIR)/xrootd
	@echo "building xrootd"
	@mkdir -p $(EXTBUILDDIR)/xrootd
# FIXME: python support for version 3 seems to be broken so we disable python
# support for now. But let's leave the flags in so that it doesn't get lost
	@cd $(EXTBUILDDIR)/xrootd && $(CMAKE) -DCMAKE_INSTALL_PREFIX=$(EXTDIR) \
	    -DENABLE_PYTHON=OFF \
	    -DPython_ADDITIONAL_VERSIONS=3.4 -DPYTHON_EXECUTABLE=`which python3` \
	    $(XROOTD_OPTION) $(EXTSRCDIR)/xrootd && \
	    make -j $(NPROCESSES) && make install

# xrootd clean command
xrootd.clean:
	@echo "cleaning xrootd"
	@-cd $(EXTBUILDDIR)/xrootd 2>/dev/null && make clean
	@rm -rf $(EXTBUILDDIR)/xrootd $(EXTDIR)/xrootd $(EXTINCDIR)/xrootd $(EXTLIBDIR)/libXrd* $(EXTBINDIR)/xrd* $(EXTBINDIR)/xrootd

# root touch command
xrootd.touch:
	@rm -f $(EXTBINDIR)/xrootd


# dependencies for root
root: $(ROOTSYS)/bin/root
root.src: $(EXTSRCDIR)/root/README

# root download
$(EXTSRCDIR)/root/README: $(EXTSRCDIR)/neurobayes/TMVAPlugin/README
	@$(DOWNLOAD) root root_v6.04.02.source.tar.gz https://root.cern.ch/download/root_v6.04.02.source.tar.gz
	@cp $(EXTSRCDIR)/neurobayes/TMVAPlugin/addinMethod/MethodPlugins.cxx $(EXTSRCDIR)/root/tmva/tmva/src/

# root build
$(ROOTSYS)/bin/root: $(EXTSRCDIR)/root/README
	@echo "building root"
	# make root/include directory a symlink to include/root
	@mkdir -p $(EXTINCDIR)/root $(ROOTSYS)
	# FIXME: dynamic relpath?
	@cd $(ROOTSYS) && ln -sf ../../../include/root include
	# now compile root and install into ROOTSYS
	@mkdir -p $(EXTBUILDDIR)/root
# FIXME: cmake is not quite working how we want it: -Dminimal=ON is ignored and
# -Dfail-on-missing=ON leads to all kinds of trouble as it also fails if an
# automatic dependency (like gviz) is not found. So for the time being we would
# have to disable all options by hand and reenable them when needed. While this
# is doable a -Dminimal=ON and then enable what we need would be much
# preferrable. Once this works we can use this. Probably needs pgsql library path, need to check
# Fixes are already in root master and should be available with 6.04.04
#	@cd $(EXTBUILDDIR)/root && cmake $(EXTSRCDIR)/root -DCMAKE_INSTALL_PREFIX=$(EXTDIR)/root \
#	    -DPython_ADDITIONAL_VERSIONS=3.4 -Dminimal=ON -Dfail-on-missing=ON -Dgsl_shared=ON \
#	    -Droofit=ON -Dxrootd=ON -Dpgsql=ON -Dbuiltin_gsl=ON -Dmathmore=ON $(ROOT_OPTION) $(ROOTCONFIG_EXTRA)
	@cd $(EXTBUILDDIR)/root && $(EXTSRCDIR)/root/configure --fail-on-missing --with-xrootd=$(EXTDIR) \
	    --with-pgsql-incdir=$(EXTINCDIR)/pgsql --with-pgsql-libdir=$(EXTLIBDIR) --disable-mysql \
	    --enable-python --with-python=`which python3` --enable-gsl_shared --enable-roofit \
	    $(ROOT_OPTION) $(ROOTCONFIG_EXTRA) && \
	    make -j $(NPROCESSES) && make install
	@mkdir -p $(EXTDIR)/share/root/tmva && cp -a $(EXTSRCDIR)/root/tutorials/tmva/* $(EXTDIR)/share/root/tmva

# root clean command
root.clean:
	@echo "cleaning root"
	@-cd $(EXTBUILDDIR)/root 2>/dev/null && make clean
	@rm -rf $(EXTBUILDDIR)/root $(ROOTSYS) $(EXTDIR)/share/root

# root touch command
root.touch:
	@rm -f $(ROOTSYS)/bin/root


# dependencies for NeuroBayes TMVA plugin
nbplugin: $(ROOTSYS)/lib/libTMVANeuroBayes.so
nbplugin.src: $(EXTSRCDIR)/neurobayes/TMVAPlugin/README

# NeuroBayes TMVA plugin build
$(ROOTSYS)/lib/libTMVANeuroBayes.so: $(EXTLIBDIR)/libNeuroBayesExpertCPP.so $(ROOTSYS)/bin/root
	@echo "building NeuroBayes TMVA plugin"
	@cp -fa $(EXTSRCDIR)/neurobayes $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/neurobayes/TMVAPlugin && make NEUROBAYES_INC=$(EXTINCDIR)/neurobayes NEUROBAYES_LIB=$(EXTLIBDIR) && \
	    make install
	@cd $(EXTBUILDDIR)/neurobayes/TMVAPlugin && cp TMVA_NeuroBayes_Dict_rdict.pcm $(ROOTSYS)/lib/

# NeuroBayes TMVA plugin clean command
nbplugin.clean:
	@echo "cleaning NeuroBayes TMVA plugin"
	@-cd $(EXTBUILDDIR)/neurobayes/TMVAPlugin 2>/dev/null && make clean
	@rm -f $(ROOTSYS)/lib/libTMVANeuroBayes.so
	@rm -f $(ROOTSYS)/lib/TMVA_NeuroBayes_Dict_rdict.pcm

# NeuroBayes TMVA plugin touch command
nbplugin.touch:
	@rm -f $(ROOTSYS)/lib/libTMVANeuroBayes.so


# dependencies for FastBDT TMVA plugin
fastbdt: $(ROOTSYS)/lib/libTMVAFastBDT.so
fastbdt.src: $(EXTSRCDIR)/FastBDT/Makefile

# FastBDT download
$(EXTSRCDIR)/FastBDT/Makefile:
	@$(DOWNLOAD) FastBDT FastBDT-1.2.tar.gz

# FastBDT TMVA plugin build
$(ROOTSYS)/lib/libTMVAFastBDT.so: $(EXTSRCDIR)/FastBDT/Makefile $(ROOTSYS)/bin/root
	@echo "building FastBDT TMVA plugin"
	@cp -fa $(EXTSRCDIR)/FastBDT $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/FastBDT && make && make install && cp TMVA_FastBDT_Dict_rdict.pcm $(ROOTSYS)/lib/

# FastBDT TMVA plugin clean command
fastbdt.clean:
	@echo "cleaning FastBDT TMVA plugin"
	@-cd $(EXTBUILDDIR)/FastBDT 2>/dev/null && make clean
	@rm -f $(ROOTSYS)/lib/libTMVAFastBDT.so
	@rm -f $(ROOTSYS)/lib/TMVA_FastBDT_Dict_rdict.pcm

# FastBDT TMVA plugin touch command
fastbdt.touch:
	@rm -f $(ROOTSYS)/lib/libTMVAFastBDT.so


# dependencies for vgm
vgm: $(EXTLIBDIR)/libBaseVGM.so
vgm.src: $(EXTSRCDIR)/vgm

# vgm download
$(EXTSRCDIR)/vgm:
	@$(DOWNLOAD) vgm vgm-v3-06.tar.gz svn:export:730:https://vgm.svn.sourceforge.net/svnroot/vgm/tags/v3-06/vgm
	@cd $(EXTSRCDIR)/vgm && patch -Np0 < $(PATCHDIR)/vgm.patch

# vgm build
$(EXTLIBDIR)/libBaseVGM.so: $(EXTSRCDIR)/vgm
	@echo "building VGM"
	@mkdir -p $(EXTBUILDDIR)/vgm
	@cd $(EXTBUILDDIR)/vgm && $(CMAKE) -DCMAKE_INSTALL_PREFIX=$(EXTDIR) -DGeant4_DIR=$(EXTBUILDDIR)/geant4 \
	    -DCLHEP_INCLUDE_DIR=$(EXTINCDIR)/CLHEP -DCLHEP_LIBRARY_DIR=$(EXTLIBDIR) -DROOT_DIR=$(ROOTSYS) \
	    -DROOT_INCLUDE_DIR=$(ROOTSYS)/include -DROOT_LIBRARY_DIR=$(ROOTSYS)/lib -DWITH_TEST=OFF $(EXTSRCDIR)/vgm && \
	    make install

# vgm clean
vgm.clean:
	@echo "cleaning VGM"
	@rm -rf $(EXTBUILDDIR)/vgm $(EXTDIR)/vgm $(EXTINCDIR)/vgm $(EXTLIBDIR)/lib*VGM.so

# vgm touch
vgm.touch:
	@rm -f $(EXTLIBDIR)/libBaseVGM.so


# dependencies for rave
rave: $(EXTLIBDIR)/libRaveBase.so
rave.src: $(EXTSRCDIR)/rave/README

# rave download
$(EXTSRCDIR)/rave/README:
	@echo "downloading rave"
	@$(DOWNLOAD) rave rave-0.6.24.tar.gz http://www.hepforge.org/archive/rave/rave-0.6.24.tar.gz
	@rm -rf $(EXTSRCDIR)/rave/src/boost $(EXTSRCDIR)/rave/src/ROOT/*/Math
	@cd $(EXTSRCDIR)/rave/src && ln -s ../../../include/boost boost
	@cd $(EXTSRCDIR)/rave/src/ROOT/genvector && ln -fs $(ROOTSYS)/include/Math Math
	@cd $(EXTSRCDIR)/rave/src/ROOT/mathcore && ln -fs $(ROOTSYS)/include/Math Math
	@cd $(EXTSRCDIR)/rave/src/ROOT/smatrix && ln -fs $(ROOTSYS)/include/Math Math
	@cd $(EXTSRCDIR)/rave/ && patch -p0 -i $(PATCHDIR)/rave-template-fix.patch

# rave build
$(EXTLIBDIR)/libRaveBase.so: $(EXTSRCDIR)/rave/README
	@echo "building rave"
	@mkdir -p $(EXTBUILDDIR)/rave
	@cd $(EXTBUILDDIR)/rave && CLHEPPATH=$(EXTDIR) CLHEPLIBPATH=$(EXTLIBDIR) CLHEP_VECTORLIBPATH=$(EXTLIBDIR) \
	    CLHEP_MATRIXLIBPATH=$(EXTLIBDIR) CXXFLAGS="-std=c++11 $(CXXFLAGS)" $(EXTSRCDIR)/rave/configure \
	    --disable-java --prefix=$(EXTDIR) --includedir=$(EXTINCDIR) --libdir=$(EXTLIBDIR) --bindir=$(EXTBINDIR) \
	    --with-clhep=$(EXTDIR) --with-clhep-libdir=$(EXTLIBDIR) --with-boost=$(EXTDIR) && \
	    make -j $(NPROCESSES) && make install
	#Fix absolute path in .cmake file/RaveConfig.cmake:
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$$ENV{BELLE2_EXTERNALS_DIR}:g" $(EXTDIR)/share/rave/RaveConfig.cmake

# rave clean
rave.clean:
	@echo "cleaning rave"
	@-cd $(EXTBUILDDIR)/rave 2>/dev/null && make clean
	@rm -rf $(EXTLIBDIR)/libRave* $(EXTINCDIR)/rave

# rave touch
rave.touch:
	@rm -f $(EXTLIBDIR)/libRaveBase.so


# dependencies for MillepedeII
MillepedeII: $(EXTBINDIR)/pede
MillepedeII.src: $(EXTSRCDIR)/MillepedeII/WIKI

# MillepedeII download
$(EXTSRCDIR)/MillepedeII/WIKI:
	@$(DOWNLOAD) MillepedeII MillepedeII_V04-03-00.tgz svn:checkout:140:http://svnsrv.desy.de/public/MillepedeII/tags/V04-03-00

# MillepedeII build
$(EXTBINDIR)/pede: $(EXTSRCDIR)/MillepedeII/WIKI
	@echo "building MillepedeII"
	@cp -fa $(EXTSRCDIR)/MillepedeII $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/MillepedeII && make pede && cp pede $(EXTBINDIR)/

# MillepedeII clean
MillepedeII.clean:
	@echo "cleaning MillepedeII"
	@-cd $(EXTBUILDDIR)/MillepedeII 2>/dev/null && make clean
	@rm -f $(EXTBUILDDIR)/pede $(EXTBINDIR)/pede

# MillepedeII touch
MillepedeII.touch:
	@rm -f $(EXTBINDIR)/pede


# dependencies for HepMC
hepmc: $(EXTLIBDIR)/libHepMC.so
hepmc.src: $(EXTSRCDIR)/hepmc

# HepMC download
$(EXTSRCDIR)/hepmc:
	@$(DOWNLOAD) hepmc HepMC-2.06.09.tar.gz http://lcgapp.cern.ch/project/simu/HepMC/download/HepMC-2.06.09.tar.gz

# HepMC build
$(EXTLIBDIR)/libHepMC.so: $(EXTSRCDIR)/hepmc
	@echo "building HepMC"
	@mkdir -p $(EXTBUILDDIR)/hepmc
	@cd $(EXTBUILDDIR)/hepmc && $(CMAKE) -DCMAKE_INSTALL_PREFIX=$(EXTDIR) \
	    -Dmomentum:STRING=GEV -Dlength:STRING=CM $(EXTSRCDIR)/hepmc && \
	    make -j $(NPROCESSES) && make install

# HepMC clean
hepmc.clean:
	@echo "cleaning HepMC"
	@-cd $(EXTBUILDDIR)/hepmc 2>/dev/null && make clean
	@rm -rf $(EXTDIR)/hepmc $(EXTBUILDDIR)/hepmc $(EXTLIBDIR)/libHepMC* $(EXTLIBDIR)/libhepmC* $(EXTINCDIR)/HepMC

# HepMC touch
hepmc.touch:
	@rm -f $(EXTLIBDIR)/libHepMC.so


# dependencies for Pythia
pythia: $(EXTLIBDIR)/libpythia8.so
pythia.src: $(EXTSRCDIR)/pythia/configure

# Pythia download
$(EXTSRCDIR)/pythia/configure:
	@$(DOWNLOAD) pythia pythia8209.tgz http://home.thep.lu.se/~torbjorn/pythia8/pythia8209.tgz
	@cd $(EXTSRCDIR)/pythia && patch -Np0 < $(PATCHDIR)/pythia.patch

# Pythia build
$(EXTLIBDIR)/libpythia8.so: $(EXTSRCDIR)/pythia/configure
	@echo "building Pythia"
	@cp -fa $(EXTSRCDIR)/pythia $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/pythia && ./configure --prefix=$(EXTDIR) --enable-shared \
	    --with-hepmc2=$(EXTDIR) $(PYTHIA_OPTION) && \
	    make -j $(NPROCESSES) && make install
	#Fix absolute path in pythia8-config and make it executable
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$${BELLE2_EXTERNALS_DIR}:g" $(EXTBINDIR)/pythia8-config
	@sed -i "s:\$$PREFIX/Makefile.inc:\$$PREFIX/share/Pythia8/examples/Makefile.inc:g" $(EXTBINDIR)/pythia8-config
	@chmod a+x $(EXTBINDIR)/pythia8-config

# Pythia clean
pythia.clean:
	@echo "cleaning Pythia"
	@-cd $(EXTBUILDDIR)/pythia 2>/dev/null && make clean
	@rm -rf $(EXTDIR)/pythia $(EXTLIBDIR)/libpythia* $(EXTINCDIR)/Pythia8* $(EXTDIR)/share/pythia

# Pythia touch
pythia.touch:
	@rm -f $(EXTLIBDIR)/libpythia8.so


# dependencies for Photos
photos: $(EXTLIBDIR)/libPhotosCxxInterface.so
photos.src: $(EXTSRCDIR)/PHOTOS/configure

# Photos download
$(EXTSRCDIR)/PHOTOS/configure:
	@$(DOWNLOAD) PHOTOS PHOTOS.3.56.tar.gz http://photospp.web.cern.ch/photospp/resources/PHOTOS.3.56/PHOTOS.3.56.tar.gz
	@cd $(EXTSRCDIR)/PHOTOS && patch -Np0 < $(PATCHDIR)/photos.patch

# Photos build
$(EXTLIBDIR)/libPhotosCxxInterface.so: $(EXTSRCDIR)/PHOTOS/configure
	@echo "building Photos"
	@cp -fa $(EXTSRCDIR)/PHOTOS $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/PHOTOS && ./configure --prefix=$(EXTDIR) --with-hepmc=$(EXTDIR) && \
	    make && make install

# Photos clean
photos.clean:
	@echo "cleaning Photos"
	@-cd $(EXTBUILDDIR)/PHOTOS 2>/dev/null && make clean
	@rm -rf $(EXTDIR)/photos $(EXTLIBDIR)/libPhotos* $(EXTINCDIR)/Photos

# Photos touch
photos.touch:
	@rm -f $(EXTLIBDIR)/libPhotosCxxInterface.so


# dependencies for Tauola
tauola: $(EXTLIBDIR)/libTauolaCxxInterface.so
tauola.src: $(EXTSRCDIR)/TAUOLA/configure

# Tauola download
$(EXTSRCDIR)/TAUOLA/configure:
	@$(DOWNLOAD) TAUOLA TAUOLA.1.1.4.tar.gz http://tauolapp.web.cern.ch/tauolapp/resources/TAUOLA.1.1.4/TAUOLA.1.1.4.tar.gz

# Tauola build
$(EXTLIBDIR)/libTauolaCxxInterface.so: $(EXTSRCDIR)/TAUOLA/configure
	@echo "building Tauola"
	@cp -fa $(EXTSRCDIR)/TAUOLA $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/TAUOLA && ./configure --prefix=$(EXTDIR) --with-hepmc=$(EXTDIR) && make && make install

# Tauola clean
tauola.clean:
	@echo "cleaning Tauola"
	@-cd $(EXTBUILDDIR)/TAUOLA 2>/dev/null && make clean
	@rm -rf $(EXTDIR)/tauola $(EXTLIBDIR)/libTauola* $(EXTINCDIR)/Tauola

# Tauola touch
tauola.touch:
	@rm -f $(EXTLIBDIR)/libTauolaCxxInterface.so


# dependencies for EvtGen
evtgen: $(EXTLIBDIR)/libEvtGen.so
evtgen.src: $(EXTSRCDIR)/evtgen/configure

# EvtGen download
$(EXTSRCDIR)/evtgen/configure:
	@$(DOWNLOAD) EvtGen EvtGen.R01-04-00.tar.gz http://evtgen.warwick.ac.uk/static/srcrep/R01-04-00/EvtGen.R01-04-00.tar.gz
	@mv $(EXTSRCDIR)/EvtGen/R01-04-00 $(EXTSRCDIR)/evtgen
	@rmdir $(EXTSRCDIR)/EvtGen
	@cd $(EXTSRCDIR)/evtgen && patch -Np0 < $(PATCHDIR)/evtgen.patch

# EvtGen build
$(EXTLIBDIR)/libEvtGen.so: $(EXTSRCDIR)/evtgen/configure
	@echo "building EvtGen"
	@cp -fa $(EXTSRCDIR)/evtgen $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/evtgen && ./configure --hepmcdir=$(EXTDIR) --pythiadir=$(EXTDIR) \
	    --photosdir=$(EXTDIR) --tauoladir=$(EXTDIR) $(EVTGEN_OPTION) && \
	    make -j $(NPROCESSES) lib_shared && make all
	# install ourselves as evtgen stuff is expected in share/evtgen but
	# evtgen has no option to install that way
	@cd $(EXTBUILDDIR)/evtgen && \
	    cp -fr lib/* $(EXTLIBDIR) && \
	    cp -fr EvtGen EvtGenBase EvtGenModels EvtGenExternal $(EXTINCDIR) && \
	    mkdir -p $(EXTDIR)/share/evtgen && cp -fr *.DEC *.XML evt.pdl $(EXTDIR)/share/evtgen

# EvtGen clean
evtgen.clean:
	@echo "cleaning EvtGen"
	@-cd $(EXTBUILDDIR)/evtgen 2>/dev/null && make clean
	@rm -rf $(EXTDIR)/evtgen $(EXTLIBDIR)/libEvtGen* $(EXTINCDIR)/evtgen $(EXTDIR)/share/evtgen

# EvtGen touch
evtgen.touch:
	@rm -f $(EXTLIBDIR)/libEvtGen.so


# dependencies for Phokhara
phokhara: $(EXTLIBDIR)/libeemmg5.so
phokhara.src: $(EXTSRCDIR)/phokhara/Makefile

# Phokhara download
$(EXTSRCDIR)/phokhara/Makefile:
	@$(DOWNLOAD) phokhara PH9.1b.tar.gz http://ific.uv.es/~rodrigo/phokhara/PH9.1b.tar.gz
	@cd $(EXTSRCDIR)/phokhara/eemmg-lib && rm -f */*.o && make clean
	@cd $(EXTSRCDIR)/phokhara && patch -Np0 < $(PATCHDIR)/phokhara.patch

# Phokhara build
$(EXTLIBDIR)/libeemmg5.so: $(EXTSRCDIR)/phokhara/Makefile
	@echo "building Phokhara"
	@cp -fa $(EXTSRCDIR)/phokhara $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/phokhara/eemmg-lib && make
	@cp $(EXTBUILDDIR)/phokhara/eemmg-lib/lib*.so $(EXTLIBDIR)/
	@mkdir -p $(EXTDIR)/share/phokhara && cp $(EXTSRCDIR)/phokhara/const_and_model_paramall9.1.dat $(EXTDIR)/share/phokhara/

# Phokhara clean
phokhara.clean:
	@echo "cleaning Phokhara"
	@-cd $(EXTBUILDDIR)/phokhara/eemmg-lib 2>/dev/null && make clean
	@rm -rf $(EXTSRCDIR)/phokhara/eemmg-lib/*/*.o $(EXTLIBDIR)/libeemmg*.so $(EXTLIBDIR)/libqcdloop1.so $(EXTLIBDIR)/libpjfry.so

# Phokhara touch
phokhara.touch:
	@rm -f $(EXTLIBDIR)/libeemmg5.so


# dependencies for MadGraph
madgraph: $(EXTDIR)/madgraph/bin/mg5 $(EXTLIBDIR)/libExRootAnalysis.so
madgraph.src: $(EXTDIR)/madgraph/bin/mg5 $(EXTSRCDIR)/ExRootAnalysis/Makefile

# MadGraph developer's kit installation
$(EXTDIR)/madgraph/bin/mg5:
	@echo "downloading MadGraph"
	@$(DOWNLOAD) madgraph MG5_aMC_v2.2.2.tar.gz
	@mv $(EXTSRCDIR)/madgraph $(EXTDIR)/madgraph

# MadGraph ExRootAnalysis download
$(EXTSRCDIR)/ExRootAnalysis/Makefile:
	@$(DOWNLOAD) ExRootAnalysis ExRootAnalysis_V1.1.2.tar.gz

# MadGraph ExRootAnalysis build
$(EXTLIBDIR)/libExRootAnalysis.so: $(EXTSRCDIR)/ExRootAnalysis/Makefile
	@echo "building ExRootAnalysis"
	@cp -fa $(EXTSRCDIR)/ExRootAnalysis $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/ExRootAnalysis && make
	@cp $(EXTBUILDDIR)/ExRootAnalysis/lib*.so $(EXTLIBDIR)/
	@cp $(EXTBUILDDIR)/ExRootAnalysis/Ex*Converter $(EXTBINDIR)/
	@cp -a $(EXTBUILDDIR)/ExRootAnalysis/ExRootAnalysis $(EXTINCDIR)/

# MadGraph clean
madgraph.clean:
	@echo "cleaning MadGraph"
	@-cd $(EXTBUILDDIR)/ExRootAnalysis 2>/dev/null && make clean
	@rm -rf $(EXTLIBDIR)/libExRootAnalysis.so $(EXTBINDIR)/Ex*Converter $(EXTINCDIR)/ExRootAnalysis

# MadGraph touch
madgraph.touch:
	@rm -f $(EXTLIBDIR)/libExRootAnalysis.so


# dependencies for CRY
cry: $(EXTLIBDIR)/libCRY.a
cry.src: $(EXTSRCDIR)/cry/README

# CRY download
$(EXTSRCDIR)/cry/README:
	@$(DOWNLOAD) cry cry_v1.7.tar.gz http://nuclear.llnl.gov/simulation/cry_v1.7.tar.gz
	@cd $(EXTSRCDIR)/cry && patch -Np0 < $(PATCHDIR)/cry.patch

# CRY build
$(EXTLIBDIR)/libCRY.a: $(EXTSRCDIR)/cry/README
	@echo "building CRY"
	@cp -fa $(EXTSRCDIR)/cry $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/cry && make
	@cp $(EXTBUILDDIR)/cry/lib/libCRY.* $(EXTLIBDIR)/
	@mkdir -p $(EXTINCDIR)/cry && cp -a $(EXTBUILDDIR)/cry/src/*.h $(EXTINCDIR)/cry/

# CRY clean
cry.clean:
	@echo "cleaning CRY"
	@-cd $(EXTBUILDDIR)/cry 2>/dev/null && make clean
	@rm -rf $(EXTLIBDIR)/libCRY.* $(EXTINCDIR)/cry

# CRY touch
cry.touch:
	@rm -f $(EXTLIBDIR)/libCRY.a


# dependencies for FLC
flc: $(EXTLIBDIR)/libComplexPDF.so
flc.src: $(EXTSRCDIR)/FLC/README

# FLC download
$(EXTSRCDIR)/FLC/README:
	@$(DOWNLOAD) FLC BELLE_FLC_1.1.tar.gz http://www-ekp.physik.uni-karlsruhe.de/~mprim/BELLE_FLC/BELLE_FLC_1.1.tar.gz
	@cd $(EXTSRCDIR)/FLC && patch -Np0 < $(PATCHDIR)/FLC.patch

# FLC build, FIXME: make clean? delete folder first?
$(EXTLIBDIR)/libComplexPDF.so: $(EXTSRCDIR)/FLC/README
	@echo "building FLC"
	@cp -fa $(EXTSRCDIR)/FLC $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/FLC && ./make.sh -j $(NPROCESSES) CXX=$(CXX) OPT=$(CXXFLAGS) OPT+=-I$(ROOTSYS)/include BOOST_INC=-I$(EXTINCDIR) BOOST_LIB=-L$(EXTLIBDIR)
	@cp $(EXTBUILDDIR)/FLC/lib/* $(EXTLIBDIR)/
	@cp -a $(EXTBUILDDIR)/FLC/include $(EXTINCDIR)

# flc clean
flc.clean:
	@echo "cleaning FLC"
	@-cd $(EXTBUILDDIR)/FLC 2>/dev/null && ./make.sh clean
	@rm -rf $(EXTLIBDIR)/lib*ComplexPDF.so $(EXTINCDIR)

# flc touch command
flc.touch:
	@rm -rf $(EXTLIBDIR)/libComplexPDF.so



# dependencies for eigen
eigen: $(EXTINCDIR)/Eigen/Eigen
eigen.src: $(EXTSRCDIR)/eigen/INSTALL

# eigen download
$(EXTSRCDIR)/eigen/INSTALL:
	@$(DOWNLOAD) eigen eigen_3.2.5.tar.bz2 http://bitbucket.org/eigen/eigen/get/3.2.5.tar.bz2

# eigen build
$(EXTINCDIR)/Eigen/Eigen: $(EXTSRCDIR)/eigen/INSTALL
	@echo "installing eigen"
	@cp -a $(EXTSRCDIR)/eigen/Eigen $(EXTINCDIR)/

# eigen clean
eigen.clean:
	@echo "cleaning eigen"
	@rm -rf $(EXTINCDIR)/Eigen

# eigen touch
eigen.touch:
	@rm -rf $(EXTSRCDIR)/Eigen/Eigen


# dependencies for vc
vc: $(EXTLIBDIR)/libVc.a
vc.src: $(EXTSRCDIR)/vc

# vc download
$(EXTSRCDIR)/vc:
	@$(DOWNLOAD) vc Vc-0.7.5.tar.gz https://github.com/VcDevel/Vc/releases/download/0.7.5/Vc-0.7.5.tar.gz

# vc build
$(EXTLIBDIR)/libVc.a: $(EXTSRCDIR)/vc
	@echo "installing vc"
	@mkdir -p $(EXTBUILDDIR)/vc
	@cd $(EXTBUILDDIR)/vc && $(CMAKE) -DCMAKE_INSTALL_PREFIX=$(EXTDIR) -DBUILD_TESTING=OFF $(VC_OPTION) $(EXTSRCDIR)/vc && \
	    make -j $(NPROCESSES) && make install
	#Fix absolute path in .cmake file/RaveConfig.cmake:
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$$ENV{BELLE2_EXTERNALS_DIR}:g" $(EXTLIBDIR)/cmake/Vc/VcConfig.cmake

# vc clean
vc.clean:
	@echo "cleaning vc"
	@rm -rf $(EXTBUILDDIR)/vc $(EXTINCDIR)/Vc $(EXTLIBDIR)/libVc.a

# vc touch
vc.touch:
	@rm -rf $(EXTLIBDIR)/libVc.a


# dependencies for nsm2
nsm2: $(EXTBINDIR)/nsmd2
nsm2.src: $(EXTSRCDIR)/nsm2

# nsm2 download
$(EXTSRCDIR)/nsm2:
	@$(DOWNLOAD) nsm2 nsm2.1.9.27.tgz

# nsm2 build
$(EXTBINDIR)/nsmd2: $(EXTSRCDIR)/nsm2
	@echo "installing nsm2"
	@cp -fa $(EXTSRCDIR)/nsm2 $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/nsm2 && make && make install

# nsm2 clean
nsm2.clean:
	@echo "cleaning nsm2"
	@-cd $(EXTBUILDDIR)/nsm2 && make clean
	@rm -rf $(EXTINCDIR)/nsm2 $(EXTBINDIR)/nsm*2 $(EXTLIBDIR)/libnsm2*

# nsm2 touch
nsm2.touch:
	@rm -rf $(EXTBINDIR)/nsmd2


# dependencies for belle_legacy
belle_legacy: $(EXTLIBDIR)/libbelle_legacy.so
belle_legacy.src: $(EXTSRCDIR)/belle_legacy

# belle_legacy download
$(EXTSRCDIR)/belle_legacy:
	@$(DOWNLOAD) belle_legacy belle_legacy-1.3.tgz svn:checkout:18674:https://belle2.cc.kek.jp/svn/groups/belle_legacy

# belle_legacy build
$(EXTLIBDIR)/libbelle_legacy.so: $(EXTSRCDIR)/belle_legacy
	@echo "installing belle_legacy"
	@cp -fa $(EXTSRCDIR)/belle_legacy $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/belle_legacy && make -j $(NPROCESSES) && \
	    make BELLE2_EXTERNALS_DIR=$(EXTDIR) BELLE2_EXTERNALS_SUBDIR="" install

# belle_legacy clean
belle_legacy.clean:
	@echo "cleaning belle_legacy"
	@-cd $(EXTBUILDDIR)/belle_legacy 2>/dev/null && make clean
	@rm -rf $(EXTINCDIR)/belle_legacy $(EXTDIR)/share/belle_legacy $(EXTLIBDIR)/libbelle_legacy.*

# belle_legacy touch
belle_legacy.touch:
	@rm -rf $(EXTLIBDIR)/libbelle_legacy.so


# dependencies for curl
curl: $(EXTLIBDIR)/libcurl.so
curl.src: $(EXTSRCDIR)/curl/README

# curl download
$(EXTSRCDIR)/curl/README:
	@$(DOWNLOAD) curl curl-7.44.0.tar.gz http://curl.haxx.se/download/curl-7.44.0.tar.gz

# curl build
$(EXTLIBDIR)/libcurl.so: $(EXTSRCDIR)/curl/README
	@echo "building curl"
	@cp -fa $(EXTSRCDIR)/curl $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/curl && ./configure --prefix=$(EXTDIR) --includedir=$(EXTINCDIR) --libdir=$(EXTLIBDIR) \
	    --bindir=$(EXTBINDIR) --datarootdir=$(EXTDIR)/share/curl && \
	    make -j $(NPROCESSES) && make install
	#Fix absolute path in curl-config
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$${BELLE2_EXTERNALS_DIR}:g" $(EXTBINDIR)/curl-config

# curl clean
curl.clean:
	@echo "cleaning curl"
	@-cd $(EXTBUILDDIR)/curl 2>/dev/null && make uninstall && make clean
	@rm -rf $(EXTINCDIR)/curl $(EXTDIR)/share/curl

# curl touch
curl.touch:
	@rm -rf $(EXTLIBDIR)/libcurl.so

# FANN: Fast Artificial Neural Network Library
fann: $(EXTLIBDIR)/libfann.so
fann.src: $(EXTSRCDIR)/fann/README.txt
fann.touch:
	@rm -f $(EXTLIBDIR)/libfann.so

$(EXTSRCDIR)/fann/README.txt:
	@$(DOWNLOAD) fann fann-2.2.0.tar.gz https://github.com/libfann/fann/archive/2.2.0.tar.gz

$(EXTLIBDIR)/libfann.so: $(EXTSRCDIR)/fann/README.txt
	@mkdir -p $(EXTBUILDDIR)/fann
	@cd $(EXTBUILDDIR)/fann && $(CMAKE) -DCMAKE_INSTALL_PREFIX=$(EXTDIR) $(FANN_OPTION) $(EXTSRCDIR)/fann && \
	    make -j $(NPROCESSES); make install
