From 0140eed09555877abe500663629001102e5eb60f Mon Sep 17 00:00:00 2001
From: Martin Ritter <martin.ritter@lmu.de>
Date: Tue, 11 May 2021 16:25:41 +0000
Subject: [PATCH 1/2] Apply private patch by Vladimir Ivanchenko produced for
 version 10.6

---
 .../include/G4GammaGeneralProcess.hh          |  91 +++---
 .../src/G4GammaGeneralProcess.cc              | 292 ++++++++----------
 2 files changed, 177 insertions(+), 206 deletions(-)

diff --git a/source/physics_lists/constructors/electromagnetic/include/G4GammaGeneralProcess.hh b/source/physics_lists/constructors/electromagnetic/include/G4GammaGeneralProcess.hh
index a97a74d9..4c2d4d32 100644
--- a/source/physics_lists/constructors/electromagnetic/include/G4GammaGeneralProcess.hh
+++ b/source/physics_lists/constructors/electromagnetic/include/G4GammaGeneralProcess.hh
@@ -59,9 +59,7 @@ class G4ParticleDefinition;
 class G4VParticleChange;
 class G4GammaConversionToMuons;
 class G4HadronicProcess;
-class G4LossTableManager;
 class G4MaterialCutsCouple;
-class G4EmParameters;
 
 //....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....
 
@@ -71,9 +69,9 @@ public:
 
   explicit G4GammaGeneralProcess();
 
-  virtual ~G4GammaGeneralProcess();
+  ~G4GammaGeneralProcess() override;
 
-  G4bool IsApplicable(const G4ParticleDefinition&) final;
+  G4bool IsApplicable(const G4ParticleDefinition&) override;
 
   void AddEmProcess(G4VEmProcess*);
 
@@ -81,37 +79,37 @@ public:
 
   void AddHadProcess(G4HadronicProcess*);
 
-  void ProcessDescription(std::ostream& outFile) const final;
+  void ProcessDescription(std::ostream& outFile) const override;
 
 protected:
 
-  void InitialiseProcess(const G4ParticleDefinition*) final;
+  void InitialiseProcess(const G4ParticleDefinition*) override;
 
 public:
 
   // Initialise for build of tables
-  void PreparePhysicsTable(const G4ParticleDefinition&) final;
+  void PreparePhysicsTable(const G4ParticleDefinition&) override;
 
   // Build physics table during initialisation
-  void BuildPhysicsTable(const G4ParticleDefinition&) final;
+  void BuildPhysicsTable(const G4ParticleDefinition&) override;
 
   // Called before tracking of each new G4Track
-  void StartTracking(G4Track*) final;
+  void StartTracking(G4Track*) override;
 
   // implementation of virtual method, specific for G4GammaGeneralProcess
   G4double PostStepGetPhysicalInteractionLength(
                              const G4Track& track,
                              G4double   previousStepSize,
-                             G4ForceCondition* condition) final;
+                             G4ForceCondition* condition) override;
 
   // implementation of virtual method, specific for G4GammaGeneralProcess
-  G4VParticleChange* PostStepDoIt(const G4Track&, const G4Step&) final;
+  G4VParticleChange* PostStepDoIt(const G4Track&, const G4Step&) override;
 
   // Store PhysicsTable in a file.
   // Return false in case of failure at I/O
   G4bool StorePhysicsTable(const G4ParticleDefinition*,
                            const G4String& directory,
-                           G4bool ascii = false) final;
+                           G4bool ascii = false) override;
 
   // Retrieve Physics from a file.
   // (return true if the Physics Table can be build by using file)
@@ -120,40 +118,49 @@ public:
   // should be placed under the directory specifed by the argument.
   G4bool RetrievePhysicsTable(const G4ParticleDefinition*,
                               const G4String& directory,
-                              G4bool ascii) final;
+                              G4bool ascii) override;
 
-  const G4String& GetProcessName() const;
+  // Temporary method
+  const G4String& GetSubProcessName() const;
 
-  G4int GetProcessSubType() const;
+  // Temporary method
+  G4int GetSubProcessSubType() const;
 
-  G4VEmProcess* GetEmProcess(const G4String& name) final;
+  G4VEmProcess* GetEmProcess(const G4String& name) override;
 
-protected:
+  inline const G4VProcess* GetSelectedProcess() const;
 
-  G4double GetMeanFreePath(const G4Track& track, G4double previousStepSize,
-                           G4ForceCondition* condition) final;
+  // hide copy constructor and assignment operator
+  G4GammaGeneralProcess(G4GammaGeneralProcess &) = delete;
+  G4GammaGeneralProcess & operator=
+  (const G4GammaGeneralProcess &right) = delete;
 
-private:
+protected:
 
-  // It returns the cross section per volume for energy/ material
-  G4double TotalCrossSectionPerVolume();
+  G4double GetMeanFreePath(const G4Track& track, G4double previousStepSize,
+                           G4ForceCondition* condition) override;
 
   inline G4double ComputeGeneralLambda(size_t idxe, size_t idxt);
 
   inline G4double GetProbability(size_t idxt);
 
-  inline void SelectedProcess(const G4Track& track, G4VProcess* ptr);
+  inline void SelectedProcess(const G4Step& step, G4VProcess* ptr);
 
-  inline G4VParticleChange* SampleSecondaries(const G4Track&, const G4Step&,
-					      G4VEmProcess*);
+  inline void SelectEmProcess(const G4Step&, G4VEmProcess*);
 
-  G4VParticleChange* SampleSecondaries(const G4Track&, const G4Step&,
-				       G4HadronicProcess*);
+  void SelectHadProcess(const G4Track&, const G4Step&, G4HadronicProcess*);
 
-  // hide copy constructor and assignment operator
-  G4GammaGeneralProcess(G4GammaGeneralProcess &);
-  G4GammaGeneralProcess & operator=(const G4GammaGeneralProcess &right);
+private:
 
+  // It returns the cross section per volume for energy/ material
+  G4double TotalCrossSectionPerVolume();
+
+protected:
+
+  G4HadronicProcess*           theGammaNuclear;
+  G4VProcess*                  selectedProc;
+
+private:
   static G4EmDataHandler*      theHandler;
   static const size_t          nTables = 15;
   static G4bool                theT[nTables];
@@ -163,9 +170,7 @@ private:
   G4VEmProcess*                theCompton;
   G4VEmProcess*                theConversionEE;
   G4VEmProcess*                theRayleigh;
-  G4HadronicProcess*           theGammaNuclear;
   G4GammaConversionToMuons*    theConversionMM;
-  G4VProcess*                  selectedProc;
 
   G4double                     minPEEnergy;
   G4double                     minEEEnergy;
@@ -194,28 +199,32 @@ G4GammaGeneralProcess::ComputeGeneralLambda(size_t idxe, size_t idxt)
 
 inline G4double G4GammaGeneralProcess::GetProbability(size_t idxt)
 {
-  return (theT[idxt]) ? theHandler->GetVector(idxt, basedCoupleIndex)
-    ->LogVectorValue(preStepKinEnergy, preStepLogE) : 1.0;
+  return theHandler->GetVector(idxt, basedCoupleIndex)
+    ->LogVectorValue(preStepKinEnergy, preStepLogE);
 }
 
 //....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....
 
 inline void
-G4GammaGeneralProcess::SelectedProcess(const G4Track& track, G4VProcess* ptr)
+G4GammaGeneralProcess::SelectedProcess(const G4Step& step, G4VProcess* ptr)
 {
   selectedProc = ptr;
-  const_cast<G4Track*>(&track)->SetCreatorProcess(ptr);
+  step.GetPostStepPoint()->SetProcessDefinedStep(ptr);
 }
 
 //....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....
 
-inline G4VParticleChange* 
-G4GammaGeneralProcess::SampleSecondaries(const G4Track& track, const G4Step& step,
-	 			         G4VEmProcess* proc)
+inline void G4GammaGeneralProcess::SelectEmProcess(const G4Step& step, G4VEmProcess* proc)
 {
   proc->CurrentSetup(currentCouple,preStepKinEnergy);
-  SelectedProcess(track, proc);
-  return proc->PostStepDoIt(track, step);
+  SelectedProcess(step, proc);
+}
+
+//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....
+
+inline const G4VProcess* G4GammaGeneralProcess::GetSelectedProcess() const
+{
+  return selectedProc;
 }
 
 //....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....
diff --git a/source/physics_lists/constructors/electromagnetic/src/G4GammaGeneralProcess.cc b/source/physics_lists/constructors/electromagnetic/src/G4GammaGeneralProcess.cc
index 8717f61e..23574aa1 100644
--- a/source/physics_lists/constructors/electromagnetic/src/G4GammaGeneralProcess.cc
+++ b/source/physics_lists/constructors/electromagnetic/src/G4GammaGeneralProcess.cc
@@ -76,15 +76,15 @@
 
 G4EmDataHandler* G4GammaGeneralProcess::theHandler = nullptr;
 G4bool G4GammaGeneralProcess::theT[nTables] =
-  {true,false,true,true,false,false,true,true,true,
-   false,true,true,true,false,false};
+  {true,false,true,true,true,false,true,true,true,
+   true,true,true,true,true,true};
 G4String G4GammaGeneralProcess::nameT[nTables] =
   {"0","1","2","3","4","5","6","7","8",
    "9","10","11","12","13","14"};
 
 G4GammaGeneralProcess::G4GammaGeneralProcess():
   G4VEmProcess("GammaGeneralProc", fElectromagnetic),
-  minPEEnergy(50*CLHEP::keV),
+  minPEEnergy(150*CLHEP::keV),
   minEEEnergy(2*CLHEP::electron_mass_c2),
   minMMEnergy(100*CLHEP::MeV),
   peLambda(0.0),
@@ -109,8 +109,6 @@ G4GammaGeneralProcess::G4GammaGeneralProcess():
 
 G4GammaGeneralProcess::~G4GammaGeneralProcess()
 {
-  //std::cout << "G4GammaGeneralProcess::~G4GammaGeneralProcess " << isTheMaster
-  //	    << "  " << theHandler << G4endl;
   if(isTheMaster) {
     delete theHandler;
     theHandler = nullptr;
@@ -128,7 +126,7 @@ G4bool G4GammaGeneralProcess::IsApplicable(const G4ParticleDefinition&)
 
 void G4GammaGeneralProcess::AddEmProcess(G4VEmProcess* ptr)
 {
-  if(!ptr) { return; }
+  if(nullptr == ptr) { return; }
   G4int stype = ptr->GetProcessSubType();
   if(stype == fRayleigh)                 { theRayleigh = ptr; }
   else if(stype == fPhotoElectricEffect) { thePhotoElectric = ptr; }
@@ -154,12 +152,6 @@ void G4GammaGeneralProcess::AddHadProcess(G4HadronicProcess* ptr)
 
 void G4GammaGeneralProcess::PreparePhysicsTable(const G4ParticleDefinition& part)
 {
-  if(1 < verboseLevel) {
-    G4cout << "G4GammaGeneralProcess::PreparePhysicsTable() for "
-           << GetProcessName()
-           << " and particle " << part.GetParticleName()
-           << G4endl;
-  }
   SetParticle(&part);
   currentCouple = nullptr;
   currentMaterial = nullptr;
@@ -170,6 +162,25 @@ void G4GammaGeneralProcess::PreparePhysicsTable(const G4ParticleDefinition& part
   if(isTheMaster) { SetVerboseLevel(theParameters->Verbose()); }
   else { SetVerboseLevel(theParameters->WorkerVerbose()); }
 
+  if(1 < verboseLevel) {
+    G4cout << "G4GammaGeneralProcess::PreparePhysicsTable() for "
+           << GetProcessName()
+           << " and particle " << part.GetParticleName()
+	   << " isMaster: " << isTheMaster << G4endl;
+  }
+
+  // 3 sub-processes must be always defined
+  if(thePhotoElectric == nullptr || theCompton == nullptr ||
+     theConversionEE == nullptr) {
+    G4ExceptionDescription ed;
+    ed << "### G4GeneralGammaProcess is initialized incorrectly"
+       << "\n Photoelectric: " << thePhotoElectric
+       << "\n Compton: " << theCompton
+       << "\n Conversion: " << theConversionEE;
+    G4Exception("G4GeneralGammaProcess","em0004",
+		FatalException, ed,"");
+  }
+
   if(thePhotoElectric) { thePhotoElectric->PreparePhysicsTable(part); }
   if(theCompton)       { theCompton->PreparePhysicsTable(part); }
   if(theConversionEE)  { theConversionEE->PreparePhysicsTable(part); }
@@ -187,11 +198,9 @@ void G4GammaGeneralProcess::InitialiseProcess(const G4ParticleDefinition*)
   if(isTheMaster) {
 
     // tables are created and its size is defined only once
-    if(!theHandler) { 
+    if(nullptr == theHandler) {
       theHandler = new G4EmDataHandler(nTables);
-      if(theRayleigh) { theT[1] = theT[4] = true; } 
-      if(theGammaNuclear) { theT[9] = theT[13] = true; } 
-      if(theConversionMM) { theT[14] = true; } 
+      if(theRayleigh) { theT[1] = true; }
 
       theHandler->SetMasterProcess(thePhotoElectric);
       theHandler->SetMasterProcess(theCompton);
@@ -223,14 +232,14 @@ void G4GammaGeneralProcess::InitialiseProcess(const G4ParticleDefinition*)
     }
 
     for(size_t i=0; i<nTables; ++i) {
+      if(!theT[i]) { continue; }
       //G4cout << "## PreparePhysTable " << i << "." << G4endl;
-      if(theT[i]) { 
       G4PhysicsTable* table = theHandler->MakeTable(i);
       //G4cout << "   make table " << table << G4endl;
       for(size_t j=0; j<numOfCouples; ++j) {
 	vec = (*table)[j];
-	  if (bld->GetFlag(j) && !vec) {
-	    //G4cout << " i= " << i << " j= " << j << " make new vector" << G4endl;
+	if (bld->GetFlag(j) && nullptr == vec) {
+	  //G4cout <<" i= "<<i<<" j= "<< j <<" make new vector"<< G4endl;
 	  if(i<=1) {
 	    vec = new G4PhysicsVector(aVector);
 	  } else if(i<=5) {
@@ -245,7 +254,6 @@ void G4GammaGeneralProcess::InitialiseProcess(const G4ParticleDefinition*)
       }
     }
   }
-  }
 }
 
 //....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....
@@ -258,32 +266,29 @@ void G4GammaGeneralProcess::BuildPhysicsTable(const G4ParticleDefinition& part)
            << " and particle " << part.GetParticleName()
            << G4endl;
   }
-  if(thePhotoElectric) { 
   if(!isTheMaster) {
     thePhotoElectric->SetEmMasterProcess(theHandler->GetMasterProcess(0));
   }
   thePhotoElectric->BuildPhysicsTable(part);
-  }
-  if(theCompton) { 
+
   if(!isTheMaster) {
     theCompton->SetEmMasterProcess(theHandler->GetMasterProcess(1));
   }
   theCompton->BuildPhysicsTable(part);
-  }
-  if(theConversionEE) { 
+
   if(!isTheMaster) {
     theConversionEE->SetEmMasterProcess(theHandler->GetMasterProcess(2));
   }
   theConversionEE->BuildPhysicsTable(part);
-  }
-  if(theRayleigh) { 
+
+  if(theRayleigh != nullptr) {
     if(!isTheMaster) {
       theRayleigh->SetEmMasterProcess(theHandler->GetMasterProcess(3));
     }
     theRayleigh->BuildPhysicsTable(part);
   }
-  if(theGammaNuclear)  { theGammaNuclear->BuildPhysicsTable(part); }
-  if(theConversionMM)  { theConversionMM->BuildPhysicsTable(part); }
+  if(theGammaNuclear != nullptr)  { theGammaNuclear->BuildPhysicsTable(part); }
+  if(theConversionMM != nullptr)  { theConversionMM->BuildPhysicsTable(part); }
 
   if(isTheMaster) {
     const G4ProductionCutsTable* theCoupleTable=
@@ -293,7 +298,7 @@ void G4GammaGeneralProcess::BuildPhysicsTable(const G4ParticleDefinition& part)
     G4LossTableBuilder* bld = lManager->GetTableBuilder();
     const std::vector<G4PhysicsTable*>& tables = theHandler->GetTables();
 
-    G4CrossSectionDataStore* gn = (theGammaNuclear) 
+    G4CrossSectionDataStore* gn = (nullptr != theGammaNuclear)
       ? theGammaNuclear->GetCrossSectionDataStore() : nullptr;
     G4DynamicParticle* dynParticle =
       new G4DynamicParticle(G4Gamma::Gamma(),G4ThreeVector(1,0,0),1.0);
@@ -319,8 +324,9 @@ void G4GammaGeneralProcess::BuildPhysicsTable(const G4ParticleDefinition& part)
         for(size_t j=0; j<nn; ++j) {
           G4double e = (*(tables[0]))[idx]->Energy(j);
           G4double loge = G4Log(e);
-          sigComp = (theCompton) ? theCompton->GetLambda(e, couple, loge) : 0.0;
-          sigR = (theRayleigh) ? theRayleigh->GetLambda(e, couple, loge) : 0.0;
+          sigComp = theCompton->GetLambda(e, couple, loge);
+          sigR = (nullptr != theRayleigh) ?
+            theRayleigh->GetLambda(e, couple, loge) : 0.0;
           G4double sum = sigComp + sigR;
 	  if(1 < verboseLevel) {
 	    G4cout << j << ". E= " << e << " xs= " << sum
@@ -328,7 +334,7 @@ void G4GammaGeneralProcess::BuildPhysicsTable(const G4ParticleDefinition& part)
 	  }
           (*(tables[0]))[idx]->PutValue(j, sum);
 	  if(theT[1]) {
-            val = (sum > 0.0) ? sigComp/sum : 0.0;
+            val = sigR/sum;
 	    (*(tables[1]))[idx]->PutValue(j, val);
 	  }
 	}
@@ -341,16 +347,11 @@ void G4GammaGeneralProcess::BuildPhysicsTable(const G4ParticleDefinition& part)
         for(size_t j=0; j<nn; ++j) {
           G4double e = (*(tables[2]))[idx]->Energy(j);
           G4double loge = G4Log(e);
-          sigComp = (theCompton) ? theCompton->GetLambda(e, couple, loge) : 0.0;
-          sigR = (theRayleigh) ? theRayleigh->GetLambda(e, couple, loge) : 0.0;
-          sigPE = (thePhotoElectric) 
-	    ? thePhotoElectric->GetLambda(e, couple, loge) : 0.0;
-          sigN = 0.0;
-          if(gn) {
-	    dynParticle->SetKineticEnergy(e);
-	    sigN = gn->ComputeCrossSection(dynParticle, material);
-	  }
-          G4double sum = sigComp + sigR + sigPE + sigN;
+          sigComp = theCompton->GetLambda(e, couple, loge);
+          sigR = (nullptr != theRayleigh) ?
+            theRayleigh->GetLambda(e, couple, loge) : 0.0;
+          sigPE = thePhotoElectric->GetLambda(e, couple, loge);
+          G4double sum = sigComp + sigR + sigPE;
 	  if(1 < verboseLevel) {
 	    G4cout << j << ". E= " << e << " xs= " << sum
 		   << " compt= " << sigComp << " conv= " << sigConv
@@ -358,17 +359,13 @@ void G4GammaGeneralProcess::BuildPhysicsTable(const G4ParticleDefinition& part)
 		   << " GN= " << sigN << G4endl;
 	  }
           (*(tables[2]))[idx]->PutValue(j, sum);
-          val = (sum > 0.0) ? sigPE/sum : 0.0;
+
+          val = sigPE/sum;
 	  (*(tables[3]))[idx]->PutValue(j, val);
-	  if(theT[4]) {
-            val = (sum > 0.0) ? (sigComp + sigPE)/sum : 0.0;
+
+	  val = (sigR > 0.0) ? (sigComp + sigPE)/sum : 1.0;
 	  (*(tables[4]))[idx]->PutValue(j, val);
 	}
-	  if(theT[5]) {
-            val = (sum > 0.0) ? (sigComp + sigPE + sigR)/sum : 0.0;
-	    (*(tables[5]))[idx]->PutValue(j, val);
-	  } 
-	}
 
 	// energy interval 2
         nn = (*(tables[6]))[idx]->GetVectorLength();
@@ -378,13 +375,11 @@ void G4GammaGeneralProcess::BuildPhysicsTable(const G4ParticleDefinition& part)
         for(size_t j=0; j<nn; ++j) {
           G4double e = (*(tables[6]))[idx]->Energy(j);
           G4double loge = G4Log(e);
-          sigComp = (theCompton) ? theCompton->GetLambda(e, couple, loge) : 0.0;
-          sigConv = (theConversionEE) 
-	    ? theConversionEE->GetLambda(e, couple, loge) : 0.0;
-          sigPE = (thePhotoElectric) 
-	    ? thePhotoElectric->GetLambda(e, couple, loge) : 0.0;
+          sigComp = theCompton->GetLambda(e, couple, loge);
+          sigConv = theConversionEE->GetLambda(e, couple, loge);
+          sigPE = thePhotoElectric->GetLambda(e, couple, loge);
           sigN = 0.0;
-          if(gn) {
+          if(nullptr != gn) {
 	    dynParticle->SetKineticEnergy(e);
 	    sigN = gn->ComputeCrossSection(dynParticle, material);
 	  }
@@ -396,15 +391,16 @@ void G4GammaGeneralProcess::BuildPhysicsTable(const G4ParticleDefinition& part)
 		   << " GN= " << sigN << G4endl;
 	  }
           (*(tables[6]))[idx]->PutValue(j, sum);
-          val = (sum > 0.0) ? sigConv/sum : 0.0;
+
+          val = sigConv/sum;
 	  (*(tables[7]))[idx]->PutValue(j, val);
-          val = (sum > 0.0) ? (sigConv + sigComp)/sum : 0.0;
+
+          val = (sigConv + sigComp)/sum;
 	  (*(tables[8]))[idx]->PutValue(j, val);
-	  if(theT[9]) {
-            val = (sum > 0.0) ? (sigConv + sigComp + sigPE)/sum : 0.0;
+
+	  val = (sigN > 0.0) ? (sigConv + sigComp + sigPE)/sum : 1.0;
 	  (*(tables[9]))[idx]->PutValue(j, val);
 	}
-	}
 
 	// energy interval 3
         nn = (*(tables[10]))[idx]->GetVectorLength();
@@ -415,18 +411,16 @@ void G4GammaGeneralProcess::BuildPhysicsTable(const G4ParticleDefinition& part)
         for(size_t j=0; j<nn; ++j) {
           G4double e = (*(tables[10]))[idx]->Energy(j);
           G4double loge = G4Log(e);
-          sigComp = (theCompton) ? theCompton->GetLambda(e, couple, loge) : 0.0;
-          sigConv = (theConversionEE) 
-	    ? theConversionEE->GetLambda(e, couple, loge) : 0.0;
-          sigPE = (thePhotoElectric) 
-	    ? thePhotoElectric->GetLambda(e, couple, loge) : 0.0;
+          sigComp = theCompton->GetLambda(e, couple, loge);
+          sigConv = theConversionEE->GetLambda(e, couple, loge);
+          sigPE = thePhotoElectric->GetLambda(e, couple, loge);
           sigN = 0.0;
-          if(gn) {
+          if(nullptr != gn) {
 	    dynParticle->SetKineticEnergy(e);
 	    sigN = gn->ComputeCrossSection(dynParticle, material);
 	  }
           sigM = 0.0;
-          if(theConversionMM) {
+          if(nullptr != theConversionMM) {
 	    val = theConversionMM->ComputeMeanFreePath(e, material);
 	    sigM = (val < DBL_MAX) ? 1./val : 0.0;
 	  }
@@ -438,22 +432,21 @@ void G4GammaGeneralProcess::BuildPhysicsTable(const G4ParticleDefinition& part)
 		   << " GN= " << sigN << G4endl;
 	  }
           (*(tables[10]))[idx]->PutValue(j, sum);
-          val = (sum > 0.0) ? 1.0 - sigConv/sum : 1.0;
+
+          val = (sigComp + sigPE + sigN + sigM)/sum;
 	  (*(tables[11]))[idx]->PutValue(j, val);
-          val = (sum > 0.0) ? 1.0 - (sigConv + sigComp)/sum : 1.0;
+
+          val = (sigPE + sigN + sigM)/sum;
 	  (*(tables[12]))[idx]->PutValue(j, val);
-	  if(theT[13]) {
-            val = (sum > 0.0) ? 1.0 - (sigConv + sigComp + sigPE)/sum : 1.0;
+
+	  val = (sigN + sigM)/sum;
 	  (*(tables[13]))[idx]->PutValue(j, val);
-	  } 
-	  if(theT[14]) {
-            val = (sum > 0.0) 
-	      ? 1.0 - (sigConv + sigComp + sigPE + sigN)/sum : 1.0;
+
+	  val = sigN/sum;
 	  (*(tables[14]))[idx]->PutValue(j, val);
 	}
-	}
 	for(size_t k=0; k<nTables; ++k) {
-	  if(theT[k] && splineFlag) { 
+	  if(splineFlag) {
 	    (*(tables[k]))[idx]->FillSecondDerivatives();
 	  }
 	}
@@ -552,8 +545,7 @@ G4double G4GammaGeneralProcess::TotalCrossSectionPerVolume()
   if(preStepKinEnergy < minPEEnergy) {
     cross = ComputeGeneralLambda(0, 0);
     //G4cout << "XS1: " << cross << G4endl;
-    peLambda = (thePhotoElectric) ? thePhotoElectric
-      ->GetLambda(preStepKinEnergy, currentCouple, preStepLogE) : 0.0;
+    peLambda = thePhotoElectric->GetLambda(preStepKinEnergy, currentCouple, preStepLogE);
     cross += peLambda;
     //G4cout << "XS2: " << cross << G4endl;
 
@@ -584,9 +576,8 @@ G4VParticleChange* G4GammaGeneralProcess::PostStepDoIt(const G4Track& track,
 {
   // In all cases clear number of interaction lengths
   theNumberOfInteractionLengthLeft = -1.0;
+  selectedProc = nullptr;
   G4double q = G4UniformRand();
-  G4double x = preStepLambda*G4UniformRand(); 
-  G4double p;
   /*
   G4cout << "PostStep: preStepLambda= " << preStepLambda << " x= " << x
          << " PE= " << peLambda << " q= " << q << " idxE= " << idxEnergy
@@ -594,92 +585,70 @@ G4VParticleChange* G4GammaGeneralProcess::PostStepDoIt(const G4Track& track,
   */
   switch (idxEnergy) {
   case 0:
-    if(x <= peLambda) { 
-      return SampleSecondaries(track, step, thePhotoElectric);
+    if(preStepLambda*q <= peLambda) {
+      SelectEmProcess(step, thePhotoElectric);
     } else {
-      p = GetProbability(1);
-      if(x <= peLambda + (preStepLambda - peLambda)*p) {
-	return SampleSecondaries(track, step, theCompton);
-      } else if(theRayleigh) {
-	return SampleSecondaries(track, step, theRayleigh);
+      if(theT[1] && preStepLambda*q < preStepLambda*GetProbability(1) + peLambda) {
+	SelectEmProcess(step, theRayleigh);
+      } else {
+	SelectEmProcess(step, theCompton);
       }
     }
     break;
 
   case 1:
-    p = GetProbability(3);
-    if(q <= p) {
-      return SampleSecondaries(track, step, thePhotoElectric);
-    }
-    p = GetProbability(4);
-    if(q <= p) {
-      return SampleSecondaries(track, step, theCompton);
-    }
-    p = GetProbability(5);
-    if(q <= p) {
-      if(theRayleigh) {
-	return SampleSecondaries(track, step, theRayleigh);
-      }
-    } else if(theGammaNuclear) {
-      return SampleSecondaries(track, step, theGammaNuclear);
+    if(q <= GetProbability(3)) {
+      SelectEmProcess(step, thePhotoElectric);
+    } else if(q <= GetProbability(4)) {
+      SelectEmProcess(step, theCompton);
+    } else if(theRayleigh) {
+      SelectEmProcess(step, theRayleigh);
     }
     break;
 
   case 2:
-    p = GetProbability(7);
-    if(q <= p) {
-      return SampleSecondaries(track, step, theConversionEE);
-    }
-    p = GetProbability(8);
-    if(q <= p) {
-      return SampleSecondaries(track, step, theCompton);
-    }
-    p = GetProbability(9);
-    if(q <= p) {
-      return SampleSecondaries(track, step, thePhotoElectric);
+    if(q <= GetProbability(7)) {
+      SelectEmProcess(step, theConversionEE);
+    } else if(q <= GetProbability(8)) {
+      SelectEmProcess(step, theCompton);
+    } else if(q <= GetProbability(9)) {
+      SelectEmProcess(step, thePhotoElectric);
     } else if(theGammaNuclear) {
-      return SampleSecondaries(track, step, theGammaNuclear);
+      SelectHadProcess(track, step, theGammaNuclear);
     }
     break;
 
   case 3:
-    p = 1.0 - GetProbability(11);
-    if(q <= p) {
-      return SampleSecondaries(track, step, theConversionEE);
-    }
-    p = 1.0 - GetProbability(12);
-    if(q <= p) {
-      return SampleSecondaries(track, step, theCompton);
-    }
-    p = 1.0 - GetProbability(13);
-    if(q <= p) {
-      return SampleSecondaries(track, step, thePhotoElectric);
-    } 
-    p = 1.0 - GetProbability(14);
-    if(q <= p) {
-      if(theGammaNuclear) {
-	return SampleSecondaries(track, step, theGammaNuclear);
-      }
+    if(q + GetProbability(11) <= 1.0) {
+      SelectEmProcess(step, theConversionEE);
+    } else if(q + GetProbability(12) <= 1.0) {
+      SelectEmProcess(step, theCompton);
+    } else if(q + GetProbability(13) <= 1.0) {
+      SelectEmProcess(step, thePhotoElectric);
+    } else if(theGammaNuclear && q + GetProbability(14) <= 1.0) {
+      SelectHadProcess(track, step, theGammaNuclear);
     } else if(theConversionMM) {
-      SelectedProcess(track, theConversionMM);
-      return theConversionMM->PostStepDoIt(track, step);
+      SelectedProcess(step, theConversionMM);
     }
     break;
   }
-  // no interaction
+  // sample secondaries
+  if(selectedProc != nullptr) {
+    return selectedProc->PostStepDoIt(track, step);
+  }
+  // no interaction - exception case
   fParticleChange.InitializeForPostStep(track);
   return &fParticleChange;
 }
 
 //....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....
 
-G4VParticleChange* G4GammaGeneralProcess::SampleSecondaries(
-           const G4Track& track, const G4Step& step, G4HadronicProcess* proc)
+void G4GammaGeneralProcess::SelectHadProcess(const G4Track& track,
+            const G4Step& step, G4HadronicProcess* proc)
 {
-  SelectedProcess(track, proc);
+  SelectedProcess(step, proc);
   proc->GetCrossSectionDataStore()->ComputeCrossSection(track.GetDynamicParticle(),
                                                         track.GetMaterial());
-  return theGammaNuclear->PostStepDoIt(track, step);
 }
 
 //....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....
@@ -690,16 +659,13 @@ G4bool G4GammaGeneralProcess::StorePhysicsTable(const G4ParticleDefinition* part
 {
   G4bool yes = true;
   if(!isTheMaster) { return yes; }
-  if(thePhotoElectric &&
-     !thePhotoElectric->StorePhysicsTable(part, directory, ascii)) 
+  if(!thePhotoElectric->StorePhysicsTable(part, directory, ascii))
     { yes = false; }
-  if(theCompton && 
-     !theCompton->StorePhysicsTable(part, directory, ascii))
+  if(!theCompton->StorePhysicsTable(part, directory, ascii))
     { yes = false; }
-  if(theConversionEE && 
-     !theConversionEE->StorePhysicsTable(part, directory, ascii))
+  if(!theConversionEE->StorePhysicsTable(part, directory, ascii))
     { yes = false; }
-  if(theRayleigh &&
+  if(theRayleigh != nullptr &&
      !theRayleigh->StorePhysicsTable(part, directory, ascii))
     { yes = false; }
 
@@ -727,16 +693,13 @@ G4GammaGeneralProcess::RetrievePhysicsTable(const G4ParticleDefinition* part,
            << GetProcessName() << G4endl;
   }
   G4bool yes = true;
-  if(thePhotoElectric &&
-     !thePhotoElectric->RetrievePhysicsTable(part, directory, ascii)) 
+  if(!thePhotoElectric->RetrievePhysicsTable(part, directory, ascii))
     { yes = false; }
-  if(theCompton && 
-     !theCompton->RetrievePhysicsTable(part, directory, ascii))
+  if(!theCompton->RetrievePhysicsTable(part, directory, ascii))
     { yes = false; }
-  if(theConversionEE && 
-     !theConversionEE->RetrievePhysicsTable(part, directory, ascii))
+  if(!theConversionEE->RetrievePhysicsTable(part, directory, ascii))
     { yes = false; }
-  if(theRayleigh &&
+  if(theRayleigh != nullptr &&
      !theRayleigh->RetrievePhysicsTable(part, directory, ascii))
     { yes = false; }
 
@@ -766,9 +729,9 @@ G4double G4GammaGeneralProcess::GetMeanFreePath(const G4Track& track,
 
 void G4GammaGeneralProcess::ProcessDescription(std::ostream& out) const
 {
-  if(thePhotoElectric) { thePhotoElectric->ProcessDescription(out); }
-  if(theCompton)       { theCompton->ProcessDescription(out); }
-  if(theConversionEE)  { theConversionEE->ProcessDescription(out); }
+  thePhotoElectric->ProcessDescription(out);
+  theCompton->ProcessDescription(out);
+  theConversionEE->ProcessDescription(out);
   if(theRayleigh)      { theRayleigh->ProcessDescription(out); }
   if(theGammaNuclear)  { theGammaNuclear->ProcessDescription(out); }
   if(theConversionMM)  { theConversionMM->ProcessDescription(out); }
@@ -776,16 +739,15 @@ void G4GammaGeneralProcess::ProcessDescription(std::ostream& out) const
 
 //....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....
 
-const G4String& G4GammaGeneralProcess::GetProcessName() const
+const G4String& G4GammaGeneralProcess::GetSubProcessName() const
 {
-  //G4cout << "GetProcessName(): " << selectedProc << G4endl;
   return (selectedProc) ? selectedProc->GetProcessName()
     : G4VProcess::GetProcessName();
 }
 
 //....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....
 
-G4int G4GammaGeneralProcess::GetProcessSubType() const
+G4int G4GammaGeneralProcess::GetSubProcessSubType() const
 {
   return (selectedProc) ? selectedProc->GetProcessSubType()
     : fGammaGeneralProcess;
@@ -796,13 +758,13 @@ G4int G4GammaGeneralProcess::GetProcessSubType() const
 G4VEmProcess* G4GammaGeneralProcess::GetEmProcess(const G4String& name)
 {
   G4VEmProcess* proc = nullptr;
-  if(thePhotoElectric && name == thePhotoElectric->GetProcessName()) {
+  if(name == thePhotoElectric->GetProcessName()) {
     proc = thePhotoElectric;
-  } else if(theCompton && name == theCompton->GetProcessName()) {
+  } else if(name == theCompton->GetProcessName()) {
     proc = theCompton;
-  } else if(theConversionEE && name == theConversionEE->GetProcessName()) {
+  } else if(name == theConversionEE->GetProcessName()) {
     proc = theConversionEE;
-  } else if(theRayleigh && name == theRayleigh->GetProcessName()) {
+  } else if(theRayleigh != nullptr && name == theRayleigh->GetProcessName()) {
     proc = theRayleigh;
   }
   return proc;
-- 
2.17.1


From 64dbd62a3015546c28adbe241ab88f017a1094c1 Mon Sep 17 00:00:00 2001
From: Martin Ritter <martin.ritter@lmu.de>
Date: Tue, 11 May 2021 16:28:49 +0000
Subject: [PATCH 2/2] Apply fix to G4EMStandardPhysics_option2.cc

---
 .../electromagnetic/src/G4EmStandardPhysics_option2.cc           | 1 +
 1 file changed, 1 insertion(+)

diff --git a/source/physics_lists/constructors/electromagnetic/src/G4EmStandardPhysics_option2.cc b/source/physics_lists/constructors/electromagnetic/src/G4EmStandardPhysics_option2.cc
index ef53828e..28ff14df 100644
--- a/source/physics_lists/constructors/electromagnetic/src/G4EmStandardPhysics_option2.cc
+++ b/source/physics_lists/constructors/electromagnetic/src/G4EmStandardPhysics_option2.cc
@@ -331,6 +331,7 @@ void G4EmStandardPhysics_option2::ConstructProcess()
       G4hMultipleScattering* pmsc = new G4hMultipleScattering();
       pmsc->SetEmModel(new G4WentzelVIModel());
 
+      ph->RegisterProcess(pmsc, particle);
       ph->RegisterProcess(new G4hIonisation(), particle);
       ph->RegisterProcess(pb, particle);
       ph->RegisterProcess(pp, particle);
-- 
2.17.1

