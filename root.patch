Index: montecarlo/eg/src/TDatabasePDG.cxx
===================================================================
--- montecarlo/eg/src/TDatabasePDG.cxx	(Revision 45300)
+++ montecarlo/eg/src/TDatabasePDG.cxx	(Arbeitskopie)
@@ -19,6 +19,7 @@
 #include "TDecayChannel.h"
 #include "TParticlePDG.h"
 #include <stdlib.h>
+#include <fstream>
 
 
 ////////////////////////////////////////////////////////////////////////
@@ -712,6 +713,73 @@
 
 
 //______________________________________________________________________________
+void TDatabasePDG::ReadEvtGenTable(const char* filename)
+{
+   // read list of particles from an EvtGen pdl file
+   // if the particle list does not exist, it is created, otherwise
+   // particles are added to the existing list
+
+   // the code for reading the evt.pdl file is copied from EvtPartPropDb::readPDT
+
+   if (fParticleList == 0) {
+      fParticleList  = new THashList;
+      fListOfClasses = new TObjArray;
+   }
+
+   std::ifstream indec(filename);
+  
+   char cmnd[100], xxxx[100], pname[100];
+   int  stdhepid;
+   double mass, pwidth, pmaxwidth;
+   int    chg3, spin2;
+   double ctau;
+   int    lundkc;
+  
+   if (!indec) {
+      Error("ReadPDGTable","Could not open PDG particle file %s",filename);
+      return;
+   }
+  
+   do{
+    
+      char ch,ch1;
+    
+      do{
+      
+         indec.get(ch);  
+         if (ch=='\n') indec.get(ch);
+         if (ch!='*') {
+	    indec.putback(ch);
+         }
+         else{
+	    while (indec.get(ch1),ch1!='\n');
+         }
+      } while(ch=='*');
+
+      indec >> cmnd;
+
+      if (strcmp(cmnd,"end")){
+      
+         if (!strcmp(cmnd,"add")){
+	
+	    indec >> xxxx >> xxxx >> pname >> stdhepid;
+            indec >> mass >> pwidth >> pmaxwidth >> chg3 >> spin2 >> ctau >> lundkc;
+
+            TParticlePDG* part = AddParticle(pname,
+                                             pname,
+                                             mass,
+                                             0,
+                                             pwidth,
+                                             chg3,
+                                             "Unknown",
+                                             stdhepid);
+         }
+      }
+   }while(strcmp(cmnd,"end"));
+}
+
+
+//______________________________________________________________________________
 void TDatabasePDG::Browse(TBrowser* b)
 {
    //browse data base
Index: montecarlo/eg/inc/TDatabasePDG.h
===================================================================
--- montecarlo/eg/inc/TDatabasePDG.h	(Revision 45300)
+++ montecarlo/eg/inc/TDatabasePDG.h	(Arbeitskopie)
@@ -82,6 +82,8 @@
    virtual void   ReadPDGTable (const char *filename = "");
    virtual Int_t  WritePDGTable(const char *filename);
 
+   virtual void   ReadEvtGenTable(const char* filename);
+
    ClassDef(TDatabasePDG,2)  // PDG particle database
 
 };
Index: html/src/TClassDocOutput.cxx
===================================================================
--- html/src/TClassDocOutput.cxx	(Revision 45300)
+++ html/src/TClassDocOutput.cxx	(Arbeitskopie)
@@ -81,7 +81,7 @@
 
    if (!force && !IsModified(fCurrentClass, kSource)
        && !IsModified(fCurrentClass, kDoc)) {
-      Printf(fHtml->GetCounterFormat(), "-no change-", fHtml->GetCounter(), filename.Data());
+//      Printf(fHtml->GetCounterFormat(), "-no change-", fHtml->GetCounter(), filename.Data());
       return;
    }
 
@@ -93,8 +93,14 @@
       return;
    }
 
-   Printf(fHtml->GetCounterFormat(), "", fHtml->GetCounter(), filename.Data());
+//   Printf(fHtml->GetCounterFormat(), "", fHtml->GetCounter(), filename.Data());
+   printf("  <compound kind=\"class\">\n");
+   printf("    <name>%s</name>\n", TString(fCurrentClass->GetName()).ReplaceAll("&", "&amp;").ReplaceAll("<", "&lt;").ReplaceAll(">", "&gt;").Data());
+   TString tmp;
+   fHtml->GetHtmlFileName(fCurrentClass, tmp);
+   printf("    <filename>%s</filename>\n", tmp.ReplaceAll("./", "").Data());
 
+#ifdef DETAILED_DOXYGEN_TAGS
    // write a HTML header for the classFile file
    WriteHtmlHeader(classFile, fCurrentClass->GetName(), "", fCurrentClass);
    WriteClassDocHeader(classFile);
@@ -112,6 +118,9 @@
       fParser->GetSourceInfo(TDocParser::kInfoLastUpdate),
       fParser->GetSourceInfo(TDocParser::kInfoAuthor),
       fParser->GetSourceInfo(TDocParser::kInfoCopyright));
+#endif
+
+   printf("  </compound>\n");
 }
 
 //______________________________________________________________________________
@@ -158,12 +167,21 @@
       TDocMethodWrapper *methWrap = 0;
       while ((methWrap = (TDocMethodWrapper*) iMethWrap())) {
          const TMethod* method = methWrap->GetMethod();
+         printf("    <member kind=\"function\"");
+         if (access != TDocParser::kPublic) {
+           printf(" protection=\"%s\"", accesstxt[access]);
+         }
+         if (kIsStatic & method->Property()) {
+           printf(" static=\"yes\"");
+         }
+         printf(">\n");
 
          // it's a c'tor - Cint stores the class name as return type
          Bool_t isctor = (!strcmp(method->GetName(), method->GetReturnTypeName()));
          // it's a d'tor - Cint stores "void" as return type
          Bool_t isdtor = (!isctor && method->GetName()[0] == '~');
 
+         printf("      <type>");
          classFile << "<tr class=\"func";
          if (method->GetClass() != fCurrentClass)
             classFile << "inh";
@@ -173,16 +191,25 @@
                classFile << "virtual ";
             else
                classFile << " virtual";
+            printf("virtual ");
          }
 
-         if (kIsStatic & method->Property())
+         if (kIsStatic & method->Property()) {
             classFile << "static ";
+            printf("static ");
+         }
 
-         if (!isctor && !isdtor)
+         if (!isctor && !isdtor) {
             fParser->DecorateKeywords(classFile, method->GetReturnTypeName());
+            printf(method->GetReturnTypeName());
+         }
+         printf("</type>\n");
 
          TString mangledM(method->GetClass()->GetName());
          NameSpace2FileName(mangledM);
+         TString tmp;
+         fHtml->GetHtmlFileName(method->GetClass(), tmp);
+         printf("      <anchorfile>%s</anchorfile>\n", tmp.ReplaceAll("./", "").Data());
          classFile << "</td><td class=\"funcname\"><a class=\"funcname\" href=\"";
          if (method->GetClass() != fCurrentClass) {
             TString htmlFile;
@@ -191,6 +218,7 @@
          }
          classFile << "#" << mangledM;
          classFile << ":";
+         printf("      <anchor>%s:", mangledM.Data());
          mangledM = method->GetName();
          NameSpace2FileName(mangledM);
          Int_t overloadIdx = methWrap->GetOverloadIdx();
@@ -199,6 +227,7 @@
             mangledM += overloadIdx;
          }
          classFile << mangledM << "\">";
+         printf("%s</anchor>\n", mangledM.Data());
          if (method->GetClass() != fCurrentClass) {
             classFile << "<span class=\"baseclass\">";
             ReplaceSpecialChars(classFile, method->GetClass()->GetName());
@@ -206,8 +235,10 @@
          }
          ReplaceSpecialChars(classFile, method->GetName());
          classFile << "</a>";
+         printf("      <name>%s</name>\n", method->GetName());
 
          fParser->DecorateKeywords(classFile, const_cast<TMethod*>(method)->GetSignature());
+         printf("      <arglist>%s</arglist>\n", TString(const_cast<TMethod*>(method)->GetSignature()).ReplaceAll("&", "&amp;").ReplaceAll("\"", "&quot;").Data());
          bool propSignal = false;
          bool propMenu   = false;
          bool propToggle = false;
@@ -232,6 +263,7 @@
             }
          }
          classFile << "</td></tr>" << endl;
+         printf("    </member>\n");
       }
       classFile << endl << "</table></div>" << endl;
    }
@@ -283,6 +315,7 @@
       Bool_t prevIsInh = kTRUE;
 
       while ((member = (TDataMember*) iDM())) {
+         TString anchorfile, anchor;
          Bool_t haveNewEnum = access > 2 && prevEnumName != member->GetTypeName();
          if (haveNewEnum) {
             if (prevEnumName.Length()) {
@@ -311,6 +344,10 @@
                classFile << "enum ";
             else 
                startClassName = 5;
+            printf("    <member kind=\"enumeration\">\n");
+            if (!enumName.EndsWith("<i>[unnamed]</i>")) {
+              printf("      <name>%s</name>\n", enumName.Data());
+            }
             
             Ssiz_t endClassName = enumName.Last(':'); // need template handling here!
             if (endClassName != kNPOS && endClassName > 0 && enumName[endClassName - 1] == ':') {
@@ -332,6 +369,8 @@
 
          TString mangledM(member->GetClass()->GetName());
          NameSpace2FileName(mangledM);
+         fHtml->GetHtmlFileName(member->GetClass(), anchorfile);
+         anchorfile.ReplaceAll("./", "");
          classFile << "</td><td class=\"dataname\"><a ";
          if (member->GetClass() != fCurrentClass) {
             classFile << "href=\"";
@@ -342,9 +381,12 @@
             classFile << "name=\"";
          classFile << mangledM;
          classFile << ":";
+         anchor = mangledM;
+         anchor += ":";
          mangledM = member->GetName();
          NameSpace2FileName(mangledM);
          classFile << mangledM << "\">";
+         anchor += mangledM;
          if (member->GetClass() == fCurrentClass)
             classFile << "</a>";
          if (access < 3 && member->GetClass() != fCurrentClass) {
@@ -369,6 +411,29 @@
             ReplaceSpecialChars(classFile, member->GetTitle());
          } else classFile << "<td>";
          classFile << "</td></tr>" << endl;
+
+         if (haveNewEnum) {
+           printf("      <anchor>%s</anchor>\n", anchor.Data());
+           printf("      <anchorfile>%s</anchorfile>\n", anchorfile.Data());
+           printf("    </member>\n");
+         }
+         if (access > 2) {
+           printf("    <member kind=\"enumvalue\">\n");
+         } else {
+           printf("    <member kind=\"variable\"");
+           if (access != TDocParser::kPublic) {
+             printf(" protection=\"%s\"", accesstxt[access]);
+           }
+           if (member->Property() & G__BIT_ISSTATIC) {
+             printf(" static=\"yes\"");
+           }
+           printf(">\n");
+           printf("      <type>%s</type>\n", fHtml->ShortType(member->GetFullTypeName()));
+         }
+         printf("      <name>%s</name>\n", member->GetName());
+         printf("      <anchor>%s</anchor>\n", anchor.Data());
+         printf("      <anchorfile>%s</anchorfile>\n", anchorfile.Data());
+         printf("    </member>\n");
       } // for members
 
       if (prevEnumName.Length()) {
@@ -605,8 +670,8 @@
       gErrorIgnoreLevel = kWarning;
       psCanvas->SaveAs(filename);
       gErrorIgnoreLevel = saveErrorIgnoreLevel;
-   } else
-      Printf(fHtml->GetCounterFormat(), "-no change-", "", filename.Data());
+   }// else
+//      Printf(fHtml->GetCounterFormat(), "-no change-", "", filename.Data());
 }
 
 //______________________________________________________________________________
@@ -1153,7 +1218,7 @@
       return kFALSE;
    }
 
-   Printf(fHtml->GetCounterFormat(), "", fHtml->GetCounter(), (filename + ".html").Data());
+//   Printf(fHtml->GetCounterFormat(), "", fHtml->GetCounter(), (filename + ".html").Data());
    // write out header
    WriteHtmlHeader(out, "Class Hierarchy");
    out << "<h1>Class Hierarchy</h1>" << endl;
@@ -1303,7 +1368,7 @@
    if (!htmlFile.Length()) {
       TString what(fCurrentClass->GetName());
       what += " (source not found)";
-      Printf(fHtml->GetCounterFormat(), "-skipped-", "", what.Data());
+//      Printf(fHtml->GetCounterFormat(), "-skipped-", "", what.Data());
       return;
    }
 
Index: html/src/TDocOutput.cxx
===================================================================
--- html/src/TDocOutput.cxx	(Revision 45300)
+++ html/src/TDocOutput.cxx	(Arbeitskopie)
@@ -650,7 +650,7 @@
       return;
    }
 
-   Printf(fHtml->GetCounterFormat(), "", fHtml->GetCounter(), filename.Data());
+//   Printf(fHtml->GetCounterFormat(), "", fHtml->GetCounter(), filename.Data());
 
    // write out header
    WriteHtmlHeader(out, "Class Hierarchy");
@@ -704,7 +704,7 @@
       return;
    }
 
-   Printf(fHtml->GetCounterFormat(), "", fHtml->GetCounter(), filename.Data());
+//   Printf(fHtml->GetCounterFormat(), "", fHtml->GetCounter(), filename.Data());
 
    // write indexFile header
    WriteHtmlHeader(indexFile, "Class Index");
@@ -833,7 +833,7 @@
          Error("CreateModuleIndex", "Can't open file '%s' !", filename.Data());
          continue;
       }
-      Printf(fHtml->GetCounterFormat(), "", fHtml->GetCounter(), filename.Data());
+//      Printf(fHtml->GetCounterFormat(), "", fHtml->GetCounter(), filename.Data());
 
       TString htmltitle("Index of ");
       TString moduletitle(module->GetName());
@@ -1099,7 +1099,7 @@
       return;
    }
 
-   Printf(fHtml->GetCounterFormat(), "", fHtml->GetCounter(), (dotfilename + ".html").Data());
+//   Printf(fHtml->GetCounterFormat(), "", fHtml->GetCounter(), (dotfilename + ".html").Data());
    // write out header
    WriteHtmlHeader(out, "Library Dependencies");
 
@@ -1132,7 +1132,7 @@
       return;
    }
 
-   Printf(fHtml->GetCounterFormat(), "", "", outFile.Data());
+//   Printf(fHtml->GetCounterFormat(), "", "", outFile.Data());
 
    WriteHtmlHeader(out, GetHtml()->GetProductName() + " Reference Guide");
 
@@ -1279,7 +1279,7 @@
       return;
    }
 
-   Printf(fHtml->GetCounterFormat(), "", "", outFile.Data());
+//   Printf(fHtml->GetCounterFormat(), "", "", outFile.Data());
 
    // write typesList header
    WriteHtmlHeader(typesList, "List of data types");
Index: sql/oracle/src/TOracleStatement.cxx
===================================================================
--- sql/oracle/src/TOracleStatement.cxx	(Revision 45300)
+++ sql/oracle/src/TOracleStatement.cxx	(Arbeitskopie)
@@ -171,7 +171,7 @@
    CheckStatement("Process", kFALSE);
 
    try {
-
+ 
       if (IsParSettMode()) {
          fStmt->executeUpdate();
          fWorkingMode = 0;
@@ -374,7 +374,7 @@
       Bytes buf((unsigned char*) mem, size);
 
       fStmt->setBytes(npar+1, buf);
-      
+       
       return kTRUE;
 
    } catch (SQLException &oraex)  {
@@ -384,6 +384,37 @@
 }   
 
 //______________________________________________________________________________
+Bool_t TOracleStatement::RegisterOutputParameter(Int_t npar, Int_t type, UInt_t maxsize, const std::string &sqltype)
+{
+  fStmt->registerOutParam(npar+1, (Type) type, maxsize, sqltype);
+  return kTRUE;
+}
+
+//______________________________________________________________________________
+Bool_t TOracleStatement::SetBlob(Int_t npar, void* mem, Long_t size, Long_t maxsize)
+{
+   // set parameter value as binary data
+   
+   //CheckSetPar("SetBlob");
+   //CheckGetField("SetBlob", kFALSE);
+   try {
+
+      // this is when NextIteration is called first time
+      //if (fIterCounter==1) 
+      //   fStmt->setMaxParamSize(npar+1, maxsize);      
+
+      Blob blob = fStmt->getBlob(npar+1);
+      blob.write(size,(unsigned char*) mem, size); 
+       
+      return kTRUE;
+
+   } catch (SQLException &oraex)  {
+      SetError(oraex.getErrorCode(), oraex.getMessage().c_str(), "SetBlob");
+   }
+   return kFALSE;
+}   
+
+//______________________________________________________________________________
 Bool_t TOracleStatement::SetDate(Int_t npar, Int_t year, Int_t month, Int_t day)
 {
    // Set date value for parameter npar
Index: sql/oracle/inc/TOracleStatement.h
===================================================================
--- sql/oracle/inc/TOracleStatement.h	(Revision 45300)
+++ sql/oracle/inc/TOracleStatement.h	(Arbeitskopie)
@@ -122,7 +122,8 @@
    virtual Bool_t      GetVLong64(Int_t npar, std::vector<Long64_t> &value);
    virtual Bool_t      GetVULong64(Int_t npar, std::vector<ULong64_t> &value);
    virtual Bool_t      GetVDouble(Int_t npar, std::vector<Double_t> &value);
-
+   Bool_t              RegisterOutputParameter(Int_t npar, Int_t type, UInt_t maxsize=0, const std::string &sqltype="");
+   Bool_t              SetBlob(Int_t npar, void* mem, Long_t size, Long_t maxsize = 0x1000);
    ClassDef(TOracleStatement, 0); // SQL statement class for Oracle
 };
 
Index: sql/pgsql/src/TPgSQLStatement.cxx
===================================================================
--- sql/pgsql/src/TPgSQLStatement.cxx	(Revision 45300)
+++ sql/pgsql/src/TPgSQLStatement.cxx	(Arbeitskopie)
@@ -22,13 +22,13 @@
 #include "TDatime.h"
 
 #include <stdlib.h>
+#include <arpa/inet.h>
 
+
 ClassImp(TPgSQLStatement)
 
 #ifdef PG_VERSION_NUM
-
 static const Int_t kBindStringSize = 25;
-
 //______________________________________________________________________________
 TPgSQLStatement::TPgSQLStatement(PgSQL_Stmt_t* stmt, Bool_t errout):
    TSQLStatement(errout),
@@ -40,6 +40,7 @@
    fIterationCount(0),
    fParamLengths(0),
    fParamFormats(0),
+   fResultFormat(0),
    fNumResultRows(0),
    fNumResultCols(0)
 {
@@ -58,6 +59,7 @@
       fWorkingMode = 2;
       SetBuffersNumber(fNumResultCols);
    }
+   fLittleEndian = ntohl(0x1)!=0x1;
 }
 
 //______________________________________________________________________________
@@ -130,11 +132,13 @@
    if (IsSetParsMode()) {
       fStmt->fRes= PQexecPrepared(fStmt->fConn,"",fNumBuffers,
                                  (const char* const*)fBind,
-                                 0,0,0);
+                                 fParamLengths,
+                                 fParamFormats,
+                                 fResultFormat);
 
    } else { //result set mode
 
-      fStmt->fRes= PQexecPrepared(fStmt->fConn,"",0,(const char* const*) 0,0,0,0);
+      fStmt->fRes= PQexecPrepared(fStmt->fConn,"",0,(const char* const*) 0,0,0, fResultFormat);
    }
    ExecStatusType stat = PQresultStatus(fStmt->fRes);
    if (!pgsql_success(stat))
@@ -225,6 +229,12 @@
 }
 
 //______________________________________________________________________________
+Bool_t TPgSQLStatement::SetResultFormat( Int_t binaryformat )
+{
+   fResultFormat = binaryformat;
+   return kTRUE;
+}
+//______________________________________________________________________________
 Bool_t TPgSQLStatement::NextIteration()
 {
    // Increment iteration counter for statement, where parameter can be set.
@@ -244,9 +254,10 @@
 
    fStmt->fRes= PQexecPrepared(fStmt->fConn,"",fNumBuffers,
                                (const char* const*)fBind,
-                               0,//fParamLengths,
-                               0,//fParamFormats,
-                               0);
+                               fParamLengths,
+                               fParamFormats,
+                               fResultFormat
+                               );
    ExecStatusType stat = PQresultStatus(fStmt->fRes);
    if (!pgsql_success(stat) ){
       CheckErrNo("NextIteration", kTRUE, kFALSE) ;
@@ -337,13 +348,30 @@
 }
 
 //______________________________________________________________________________
+const char * TPgSQLStatement::GetNToH(Int_t npar)
+{
+
+char *val = (char*) PQgetvalue(fStmt->fRes,fIterationCount,npar);
+if (!fLittleEndian) return  (const char*) val;
+char t;
+for( int i = 0;i< fParamLengths[npar]/2;i++ ){
+  t = *(val+i);
+  *(val+i) = *(val+fParamLengths[npar]-1-i);
+  *(val+fParamLengths[npar]-1-i)=t;
+}
+
+return  (const char*) val;
+}
+
+//______________________________________________________________________________
 Int_t TPgSQLStatement::GetInt(Int_t npar)
 {
    // Get integer.
 
    if (PQgetisnull(fStmt->fRes,fIterationCount,npar))
-      return (Int_t)0;
-
+      return (Int_t)0;  
+   if ( fResultFormat ) return  *((Int_t *) GetNToH( npar ));
+   else 
    return (Int_t) atoi(PQgetvalue(fStmt->fRes,fIterationCount,npar));
 }
 
@@ -355,6 +383,8 @@
    if (PQgetisnull(fStmt->fRes,fIterationCount,npar))
       return (UInt_t)0;
 
+   if ( fResultFormat ) return *((UInt_t *) GetNToH( npar ));
+   else 
    return (UInt_t) atoi(PQgetvalue(fStmt->fRes,fIterationCount,npar));
 }
 
@@ -365,7 +395,9 @@
 
    if (PQgetisnull(fStmt->fRes,fIterationCount,npar))
       return (Long_t)0;
-
+   
+   if ( fResultFormat ) return  *((Long_t *) GetNToH( npar ));
+   else 
    return (Long_t) atol(PQgetvalue(fStmt->fRes,fIterationCount,npar));
 }
 
@@ -377,6 +409,7 @@
    if (PQgetisnull(fStmt->fRes,fIterationCount,npar))
       return (Long64_t)0;
 
+   if ( fResultFormat ) return *((Long64_t *) GetNToH( npar )); else 
 #ifndef R__WIN32
    return (Long64_t) atoll(PQgetvalue(fStmt->fRes,fIterationCount,npar));
 #else
@@ -392,6 +425,7 @@
    if (PQgetisnull(fStmt->fRes,fIterationCount,npar))
       return (ULong64_t)0;
 
+   if ( fResultFormat ) return  *((ULong64_t *) GetNToH( npar )); else
 #ifndef R__WIN32
    return (ULong64_t) atoll(PQgetvalue(fStmt->fRes,fIterationCount,npar));
 #else
@@ -406,6 +440,9 @@
 
    if (PQgetisnull(fStmt->fRes,fIterationCount,npar))
       return (Double_t)0;
+   
+   if ( fResultFormat ) return  *((Double_t *) GetNToH( npar )); 
+   else 
    return (Double_t) atof(PQgetvalue(fStmt->fRes,fIterationCount,npar));
 }
 
@@ -425,14 +462,17 @@
 
    size_t sz;
    char *cptr = PQgetvalue(fStmt->fRes,fIterationCount,npar);
-   unsigned char * mptr = PQunescapeBytea((const unsigned char*)cptr,&sz);
+  
+   unsigned char * mptr = ( unsigned char *) cptr;
+   if ( ! fResultFormat )  mptr = PQunescapeBytea((const unsigned char*)cptr,&sz);   
+   else                      sz = PQgetlength(fStmt->fRes,fIterationCount,npar);
    if ((Long_t)sz>size) {
-      delete [] (unsigned char*) mem;
+      if (mem!=NULL) delete [] (unsigned char*) mem;
       mem = (void*) new unsigned char[sz];
    }
    size=sz;
    memcpy(mem,mptr,sz);
-   PQfreemem(mptr);
+   if ( !fResultFormat )  PQfreemem(mptr);
    return kTRUE;
 }
 
@@ -509,17 +549,35 @@
    //    stmt->SetNull(2);
 
    fBind[npar][0] = 0;
+   fParamFormats[npar] = 0;
+   
+   return kTRUE;
+}
 
+//______________________________________________________________________________
+Bool_t TPgSQLStatement::SetBinaryRaw(Int_t npar, void *value, Long_t size)
+{
+   // Set parameter value as raw binary data
+
+   if (size> kBindStringSize) {
+     delete [] fBind[npar];
+     fBind[npar]= new char[size];
+   }  
+   memcpy(fBind[npar],value, size);
+   fParamFormats[npar] = 1;
+   fParamLengths[npar] = size;
+    
    return kTRUE;
 }
 
+
 //______________________________________________________________________________
 Bool_t TPgSQLStatement::SetInt(Int_t npar, Int_t value)
 {
    // Set parameter value as integer.
-
    snprintf(fBind[npar],kBindStringSize,"%d",value);
-
+   fParamFormats[npar] = 0;
+   
    return kTRUE;
 }
 
@@ -529,6 +587,7 @@
    // Set parameter value as unsinged integer.
 
    snprintf(fBind[npar],kBindStringSize,"%u",value);
+   fParamFormats[npar] = 0;
 
    return kTRUE;
 }
@@ -539,6 +598,7 @@
    // Set parameter value as long.
 
    snprintf(fBind[npar],kBindStringSize,"%ld",value);
+   fParamFormats[npar] = 0;
 
    return kTRUE;
 }
@@ -549,6 +609,7 @@
    // Set parameter value as 64-bit integer.
 
    snprintf(fBind[npar],kBindStringSize,"%lld",(Long64_t)value);
+   fParamFormats[npar] = 0;
 
    return kTRUE;
 }
@@ -559,6 +620,7 @@
    // Set parameter value as unsinged 64-bit integer.
 
    snprintf(fBind[npar],kBindStringSize,"%llu",(ULong64_t)value);
+   fParamFormats[npar] = 0;
 
    return kTRUE;
 }
@@ -569,6 +631,7 @@
    // Set parameter value as double value.
 
    snprintf(fBind[npar],kBindStringSize,"%lf",value);
+   fParamFormats[npar] = 0;
 
    return kTRUE;
 }
@@ -583,6 +646,8 @@
       fBind[npar] = new char[maxsize];
    }
    strlcpy(fBind[npar],value,maxsize);
+   fParamFormats[npar] = 0;
+   
    return kTRUE;
 }
 
@@ -593,13 +658,13 @@
 
    size_t sz=size;
    size_t mxsz=maxsize;
-   char* mptr = (char*)malloc(2*sz+1);
-   mxsz=PQescapeString (mptr,(char*)mem,sz);
-
+   unsigned char* mptr = PQescapeBytea ((const unsigned char*)mem,sz, &mxsz); 
    delete [] fBind[npar];
    fBind[npar]= new char[mxsz+1];
    memcpy(fBind[npar],mptr,mxsz);
-   free(mptr);
+   PQfreemem(mptr); 
+   fParamFormats[npar] = 0;
+   
    return kTRUE;
 }
 
@@ -610,6 +675,7 @@
 
    TDatime d =TDatime(year,month,day,0,0,0);
    snprintf(fBind[npar],kBindStringSize,"%s",(char*)d.AsSQLString());
+   fParamFormats[npar] = 0;
 
    return kFALSE;
 }
@@ -621,6 +687,8 @@
 
    TDatime d=TDatime(2000,1,1,hour,min,sec);
    snprintf(fBind[npar],kBindStringSize,"%s",(char*)d.AsSQLString());
+   fParamFormats[npar] = 0;
+   
    return kTRUE;
 }
 
@@ -631,6 +699,8 @@
 
    TDatime d=TDatime(year,month,day,hour,min,sec);
    snprintf(fBind[npar],kBindStringSize,"%s",(char*)d.AsSQLString());
+   fParamFormats[npar] = 0;
+   
    return kTRUE;
 }
 
@@ -641,6 +711,8 @@
 
    TDatime d(year,month,day,hour,min,sec);
    snprintf(fBind[npar],kBindStringSize,"%s",(char*)d.AsSQLString());
+   fParamFormats[npar] = 0;
+   
    return kTRUE;
 }
 
@@ -722,7 +794,12 @@
    return kFALSE;
 }
 
+//______________________________________________________________________________
 
+Bool_t TPgSQLStatement::SetResultFormat( Int_t )
+{
+   return kFALSE;
+}
 //______________________________________________________________________________
 Bool_t TPgSQLStatement::NextIteration()
 {
@@ -889,8 +966,12 @@
 
    return kFALSE;
 }
-
 //______________________________________________________________________________
+Bool_t TPgSQLStatement::SetBinaryRaw(Int_t , void *, Long_t )
+{ 
+   return kFALSE;
+}
+//______________________________________________________________________________
 Bool_t TPgSQLStatement::SetInt(Int_t, Int_t)
 {
    // Set parameter value as integer.
Index: sql/pgsql/inc/TPgSQLStatement.h
===================================================================
--- sql/pgsql/inc/TPgSQLStatement.h	(Revision 45300)
+++ sql/pgsql/inc/TPgSQLStatement.h	(Arbeitskopie)
@@ -54,6 +54,8 @@
    Int_t                 fIterationCount;//! number of iteration
    int                  *fParamLengths;  //! length of column
    int                  *fParamFormats;  //! data type (OID)
+   int                   fResultFormat;  //! result format type
+   Bool_t                fLittleEndian;
    Int_t                 fNumResultRows;
    Int_t                 fNumResultCols;
 
@@ -77,7 +79,10 @@
    virtual Int_t       GetBufferLength() const { return 1; }
    virtual Int_t       GetNumParameters();
 
+   Bool_t SetResultFormat( Int_t binaryformat );
+   const char *        GetNToH(Int_t npar);
    virtual Bool_t      SetNull(Int_t npar);
+   Bool_t  SetBinaryRaw(Int_t npar, void *value, Long_t size);
    virtual Bool_t      SetInt(Int_t npar, Int_t value);
    virtual Bool_t      SetUInt(Int_t npar, UInt_t value);
    virtual Bool_t      SetLong(Int_t npar, Long_t value);
@@ -114,6 +119,8 @@
    virtual Bool_t      GetTime(Int_t npar, Int_t& hour, Int_t& min, Int_t& sec);
    virtual Bool_t      GetDatime(Int_t npar, Int_t& year, Int_t& month, Int_t& day, Int_t& hour, Int_t& min, Int_t& sec);
    virtual Bool_t      GetTimestamp(Int_t npar, Int_t& year, Int_t& month, Int_t& day, Int_t& hour, Int_t& min, Int_t& sec, Int_t&);
+   
+   
 
    ClassDef(TPgSQLStatement, 0);  // SQL statement class for PgSQL DB
 };
