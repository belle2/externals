From 5641dbb8f5878716ccd475a660cb2cf34b07005d Mon Sep 17 00:00:00 2001
From: Thomas Laroche <tho.laroche@gmail.com>
Date: Sun, 12 Jul 2015 17:30:56 +0200
Subject: [PATCH 1/2] Build/Install parallel_fann & parallel_fann_cpp

---
 src/CMakeLists.txt              | 15 +++++++++++++++
 src/doublefann.c                |  1 +
 src/floatfann.c                 |  1 +
 src/include/CMakeLists.txt      |  8 +++++++-
 src/parallel_doublefann_cpp.cpp | 27 +++++++++++++++++++++++++++
 src/parallel_floatfann_cpp.cpp  | 27 +++++++++++++++++++++++++++
 6 files changed, 78 insertions(+), 1 deletion(-)
 create mode 100644 src/parallel_doublefann_cpp.cpp
 create mode 100644 src/parallel_floatfann_cpp.cpp

diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 35f7663..0e52dae 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1,3 +1,15 @@
+FIND_PACKAGE(OpenMP)
+IF(OPENMP_FOUND)
+  OPTION(DISABLE_PARALLEL_FANN "Disable parallel fann functions" OFF)
+ENDIF(OPENMP_FOUND)
+
+IF(NOT OPENMP_FOUND OR DISABLE_PARALLEL_FANN)
+  ADD_DEFINITIONS(-DDISABLE_PARALLEL_FANN)
+ELSE()
+  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
+  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
+ENDIF(NOT OPENMP_FOUND OR DISABLE_PARALLEL_FANN)
+
 ADD_SUBDIRECTORY( include ) 
 
 INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/src/include)
@@ -9,6 +21,7 @@ endif (WIN32)
 
 SET(floatfann_LIB_SRCS
 floatfann.c
+parallel_floatfann_cpp.cpp
 )
 
 ADD_LIBRARY(floatfann ${floatfann_LIB_SRCS})
@@ -23,6 +36,7 @@ INSTALL(TARGETS floatfann LIBRARY DESTINATION ${LIB_INSTALL_DIR}
 
 SET(doublefann_LIB_SRCS
 doublefann.c
+parallel_doublefann_cpp.cpp
 )
 
 ADD_LIBRARY(doublefann ${doublefann_LIB_SRCS})
@@ -53,6 +67,7 @@ INSTALL(TARGETS fixedfann LIBRARY DESTINATION ${LIB_INSTALL_DIR}
 
 SET(fann_LIB_SRCS
 floatfann.c
+parallel_floatfann_cpp.cpp
 )
 
 ADD_LIBRARY(fann ${fann_LIB_SRCS})
diff --git a/src/doublefann.c b/src/doublefann.c
index efd1071..264ae56 100644
--- a/src/doublefann.c
+++ b/src/doublefann.c
@@ -28,3 +28,4 @@ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 #include "fann_train_data.c"
 #include "fann_error.c"
 #include "fann_cascade.c"
+#include "parallel_fann.c"
diff --git a/src/floatfann.c b/src/floatfann.c
index db4667c..28ca886 100644
--- a/src/floatfann.c
+++ b/src/floatfann.c
@@ -28,3 +28,4 @@ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 #include "fann_train_data.c"
 #include "fann_error.c"
 #include "fann_cascade.c"
+#include "parallel_fann.c"
diff --git a/src/include/CMakeLists.txt b/src/include/CMakeLists.txt
index 5093eaa..c9aed12 100644
--- a/src/include/CMakeLists.txt
+++ b/src/include/CMakeLists.txt
@@ -1,4 +1,10 @@
 ########### install files ###############
 
-install (FILES fann.h doublefann.h fann_internal.h floatfann.h fann_data.h fixedfann.h fann_activation.h fann_cascade.h fann_error.h fann_train.h fann_io.h fann_cpp.h DESTINATION ${INCLUDE_INSTALL_DIR})
+IF(NOT OPENMP_FOUND OR DISABLE_PARALLEL_FANN)
+  SET(PARALLEL_INCLUDES "")
+ELSE(NOT OPENMP_FOUND OR DISABLE_PARALLEL_FANN)
+  SET(PARALLEL_INCLUDES parallel_fann.h parallel_fann.hpp)
+ENDIF(NOT OPENMP_FOUND OR DISABLE_PARALLEL_FANN)
+
+install (FILES fann.h doublefann.h fann_internal.h floatfann.h fann_data.h fixedfann.h fann_activation.h fann_cascade.h fann_error.h fann_train.h fann_io.h fann_cpp.h ${PARALLEL_INCLUDES} DESTINATION ${INCLUDE_INSTALL_DIR})
 
diff --git a/src/parallel_doublefann_cpp.cpp b/src/parallel_doublefann_cpp.cpp
new file mode 100644
index 0000000..626225f
--- /dev/null
+++ b/src/parallel_doublefann_cpp.cpp
@@ -0,0 +1,27 @@
+/*
+Fast Artificial Neural Network Library (fann)
+Copyright (C) 2003-2012 Steffen Nissen (sn@leenissen.dk)
+
+This library is free software; you can redistribute it and/or
+modify it under the terms of the GNU Lesser General Public
+License as published by the Free Software Foundation; either
+version 2.1 of the License, or (at your option) any later version.
+
+This library is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+Lesser General Public License for more details.
+
+You should have received a copy of the GNU Lesser General Public
+License along with this library; if not, write to the Free Software
+Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+/* Easy way to allow for build of multiple binaries */
+
+#ifndef DISABLE_PARALLEL_FANN
+#include "config.h"
+#include "doublefann.h"
+
+#include "parallel_fann_cpp.cpp"
+#endif /* DISABLE_PARALLEL_FANN */
diff --git a/src/parallel_floatfann_cpp.cpp b/src/parallel_floatfann_cpp.cpp
new file mode 100644
index 0000000..5e57286
--- /dev/null
+++ b/src/parallel_floatfann_cpp.cpp
@@ -0,0 +1,27 @@
+/*
+Fast Artificial Neural Network Library (fann)
+Copyright (C) 2003-2012 Steffen Nissen (sn@leenissen.dk)
+
+This library is free software; you can redistribute it and/or
+modify it under the terms of the GNU Lesser General Public
+License as published by the Free Software Foundation; either
+version 2.1 of the License, or (at your option) any later version.
+
+This library is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+Lesser General Public License for more details.
+
+You should have received a copy of the GNU Lesser General Public
+License along with this library; if not, write to the Free Software
+Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+/* Easy way to allow for build of multiple binaries */
+
+#ifndef DISABLE_PARALLEL_FANN
+#include "config.h"
+#include "floatfann.h"
+
+#include "parallel_fann_cpp.cpp"
+#endif /* DISABLE_PARALLEL_FANN */

From f9e5c39ec61120b518911335cfdf480c9546c0a1 Mon Sep 17 00:00:00 2001
From: Thomas Laroche <tho.laroche@gmail.com>
Date: Sun, 12 Jul 2015 17:33:09 +0200
Subject: [PATCH 2/2] Fix parallel headers:

- Add #ifndef FIXEDFANN
- Add extern "C" to parallel_fann.h
---
 src/include/parallel_fann.h   | 22 +++++++++++++++++++++-
 src/include/parallel_fann.hpp |  4 +++-
 2 files changed, 24 insertions(+), 2 deletions(-)

diff --git a/src/include/parallel_fann.h b/src/include/parallel_fann.h
index b5e05cb..508056e 100644
--- a/src/include/parallel_fann.h
+++ b/src/include/parallel_fann.h
@@ -9,6 +9,16 @@
 
 #include <fann.h>
 
+#ifdef __cplusplus
+extern "C"
+{
+	
+#ifndef __cplusplus
+} /* to fool automatic indention engines */ 
+#endif
+#endif	/* __cplusplus */
+
+#ifndef FIXEDFANN
 FANN_EXTERNAL float FANN_API fann_train_epoch_batch_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb);
 
 FANN_EXTERNAL float FANN_API fann_train_epoch_irpropm_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb);
@@ -20,6 +30,16 @@ FANN_EXTERNAL float FANN_API fann_train_epoch_sarprop_parallel(struct fann *ann,
 FANN_EXTERNAL float FANN_API fann_train_epoch_incremental_mod(struct fann *ann, struct fann_train_data *data);
 
 FANN_EXTERNAL float FANN_API fann_test_data_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb);
+#endif /* FIXEDFANN */
+
+#ifdef __cplusplus
+#ifndef __cplusplus
+/* to fool automatic indention engines */ 
+{
+	
+#endif
+} 
+#endif	/* __cplusplus */
 
 #endif /* PARALLEL_FANN_H_ */
-#endif /* DISABLE_PARALLEL_FANN */
\ No newline at end of file
+#endif /* DISABLE_PARALLEL_FANN */
diff --git a/src/include/parallel_fann.hpp b/src/include/parallel_fann.hpp
index 095e749..e8d4010 100644
--- a/src/include/parallel_fann.hpp
+++ b/src/include/parallel_fann.hpp
@@ -9,6 +9,7 @@
 #include <vector>
 #include <fann.h>
 
+#ifndef FIXEDFANN
 namespace parallel_fann {
 float train_epoch_batch_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb);
 
@@ -33,5 +34,6 @@ float train_epoch_incremental_mod(struct fann *ann, struct fann_train_data *data
 float test_data_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb);
 float test_data_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb, std::vector< std::vector<fann_type> >& predicted_outputs);
 }
+#endif /* FIXEDFANN */
 #endif /* PARALLEL_FANN_HPP_ */
-#endif /* DISABLE_PARALLEL_FANN */
\ No newline at end of file
+#endif /* DISABLE_PARALLEL_FANN */
From 95a08e88aaeacb6bb46490dddbdcb4d32d64e682 Mon Sep 17 00:00:00 2001
From: saraNeuhaus <sneuhaus@mpp.mpg.de>
Date: Fri, 21 Aug 2015 13:44:04 +0200
Subject: [PATCH 1/2] double quote includes in parallel_fann headers

---
 src/include/parallel_fann.h   | 2 +-
 src/include/parallel_fann.hpp | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/include/parallel_fann.h b/src/include/parallel_fann.h
index b5e05cb..daee603 100644
--- a/src/include/parallel_fann.h
+++ b/src/include/parallel_fann.h
@@ -7,7 +7,7 @@
 #ifndef PARALLEL_FANN_H_
 #define PARALLEL_FANN_H_
 
-#include <fann.h>
+#include "fann.h"
 
 FANN_EXTERNAL float FANN_API fann_train_epoch_batch_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb);
 
diff --git a/src/include/parallel_fann.hpp b/src/include/parallel_fann.hpp
index 095e749..e3dcb20 100644
--- a/src/include/parallel_fann.hpp
+++ b/src/include/parallel_fann.hpp
@@ -7,7 +7,7 @@
 #define PARALLEL_FANN_HPP_
 #include <omp.h>
 #include <vector>
-#include <fann.h>
+#include "fann.h"
 
 namespace parallel_fann {
 float train_epoch_batch_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb);

From a699c6786de2535afa06966b9b5540b417cbdb9b Mon Sep 17 00:00:00 2001
From: saraNeuhaus <sneuhaus@mpp.mpg.de>
Date: Fri, 21 Aug 2015 13:44:40 +0200
Subject: [PATCH 2/2] fix function names in parallel_fann_cpp to match header

---
 src/parallel_fann_cpp.cpp | 24 ++++++++++++------------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/src/parallel_fann_cpp.cpp b/src/parallel_fann_cpp.cpp
index 2a433db..cca9716 100644
--- a/src/parallel_fann_cpp.cpp
+++ b/src/parallel_fann_cpp.cpp
@@ -9,7 +9,7 @@ using namespace std;
 namespace parallel_fann {
 // TODO rewrite all these functions in c++ using fann_cpp interface
 
-float fann_train_epoch_batch_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb)
+float train_epoch_batch_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb)
 {
 	fann_reset_MSE(ann);
 	vector<struct fann *> ann_vect(threadnumb);
@@ -78,7 +78,7 @@ float fann_train_epoch_batch_parallel(struct fann *ann, struct fann_train_data *
 }
 
 
-float fann_train_epoch_irpropm_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb)
+float train_epoch_irpropm_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb)
 {
 
 	if(ann->prev_train_slopes == NULL)
@@ -196,7 +196,7 @@ float fann_train_epoch_irpropm_parallel(struct fann *ann, struct fann_train_data
 }
 
 
-float fann_train_epoch_quickprop_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb)
+float train_epoch_quickprop_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb)
 {
 
 	if(ann->prev_train_slopes == NULL)
@@ -330,7 +330,7 @@ float fann_train_epoch_quickprop_parallel(struct fann *ann, struct fann_train_da
 }
 
 
-float fann_train_epoch_sarprop_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb)
+float train_epoch_sarprop_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb)
 {
 	if(ann->prev_train_slopes == NULL)
 	{
@@ -485,7 +485,7 @@ float fann_train_epoch_sarprop_parallel(struct fann *ann, struct fann_train_data
 	return fann_get_MSE(ann);
 }
 
-float fann_train_epoch_incremental_mod(struct fann *ann, struct fann_train_data *data)
+float train_epoch_incremental_mod(struct fann *ann, struct fann_train_data *data)
 {
 	unsigned int i;
 
@@ -501,7 +501,7 @@ float fann_train_epoch_incremental_mod(struct fann *ann, struct fann_train_data
 
 //the following versions returns also the outputs via the predicted_outputs parameter
 
-float fann_train_epoch_batch_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb,vector< vector<fann_type> >& predicted_outputs)
+float train_epoch_batch_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb,vector< vector<fann_type> >& predicted_outputs)
 {
 	fann_reset_MSE(ann);
 	predicted_outputs.resize(data->num_data,vector<fann_type> (data->num_output));
@@ -577,7 +577,7 @@ float fann_train_epoch_batch_parallel(struct fann *ann, struct fann_train_data *
 }
 
 
-float fann_train_epoch_irpropm_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb, vector< vector<fann_type> >& predicted_outputs)
+float train_epoch_irpropm_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb, vector< vector<fann_type> >& predicted_outputs)
 {
 
 	if(ann->prev_train_slopes == NULL)
@@ -699,7 +699,7 @@ float fann_train_epoch_irpropm_parallel(struct fann *ann, struct fann_train_data
 }
 
 
-float fann_train_epoch_quickprop_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb, vector< vector<fann_type> >& predicted_outputs)
+float train_epoch_quickprop_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb, vector< vector<fann_type> >& predicted_outputs)
 {
 
 	if(ann->prev_train_slopes == NULL)
@@ -838,7 +838,7 @@ float fann_train_epoch_quickprop_parallel(struct fann *ann, struct fann_train_da
 }
 
 
-float fann_train_epoch_sarprop_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb, vector< vector<fann_type> >& predicted_outputs)
+float train_epoch_sarprop_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb, vector< vector<fann_type> >& predicted_outputs)
 {
 
 	if(ann->prev_train_slopes == NULL)
@@ -1000,7 +1000,7 @@ float fann_train_epoch_sarprop_parallel(struct fann *ann, struct fann_train_data
 }
 
 
-float fann_train_epoch_incremental_mod(struct fann *ann, struct fann_train_data *data, vector< vector<fann_type> >& predicted_outputs)
+float train_epoch_incremental_mod(struct fann *ann, struct fann_train_data *data, vector< vector<fann_type> >& predicted_outputs)
 {
 
 	predicted_outputs.resize(data->num_data,vector<fann_type> (data->num_output));
@@ -1024,7 +1024,7 @@ float fann_train_epoch_incremental_mod(struct fann *ann, struct fann_train_data
 	return fann_get_MSE(ann);
 }
 
-float fann_test_data_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb)
+float test_data_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb)
 {
 	if(fann_check_input_output_sizes(ann, data) == -1)
 		return 0;
@@ -1064,7 +1064,7 @@ float fann_test_data_parallel(struct fann *ann, struct fann_train_data *data, co
 	return fann_get_MSE(ann);
 }
 
-float fann_test_data_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb, vector< vector<fann_type> >& predicted_outputs)
+float test_data_parallel(struct fann *ann, struct fann_train_data *data, const unsigned int threadnumb, vector< vector<fann_type> >& predicted_outputs)
 {
 	if(fann_check_input_output_sizes(ann, data) == -1)
 		return 0;
