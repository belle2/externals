import os, re, platform
from distutils import sysconfig
import config

# get the sub directory name for architecture and build option dependent files
subdir = os.environ['BELLE2_SUBDIR']

# create construction environment
global_env = Environment(ENV = os.environ,
                         tools = ['default', 'root_dict', 'process_dir'],
                         BUILDERS = {},
                         BUILDDIR = os.path.join('#build', subdir),
                         EXTDIR = os.environ['BELLE2_EXTERNALS_DIR'],
#Direct installation into the externals INCDIR makes problems with installation
#                         INCDIR = os.path.join('$EXTDIR', 'include', 'genfit'),
                         INCDIR = os.path.join('#include', 'genfit'),
                         LIBDIR = '#lib',
                         CCFLAGS = ['-Wall'],
                         CPPPATH = ['$INCDIR', os.path.join('$EXTDIR', 'include', 'root')])


# check for debug flag
option = os.environ.get('BELLE2_EXTERNALS_OPTION', os.environ['BELLE2_OPTION'])
if option == 'debug':
    global_env.Append(CCFLAGS = '-g')
elif option == 'opt':
    global_env.Append(CCFLAGS = '-O3')
elif option == 'intel':
    intel_dir = None
    for dir in os.environ.get('PATH', '').split(os.pathsep):
        if os.path.isfile(os.path.join(dir, 'icpc')):
            intel_dir = dir
            break
    if not intel_dir:
        print 'Intel compiler not found.'
        Exit(1)
    (base_dir, bin, arch) = intel_dir.rsplit(os.sep, 2)
    global_env.PrependENVPath('INCLUDE', os.path.join(base_dir, 'include'))
    global_env.PrependENVPath('LIB', os.path.join(base_dir, 'lib', arch))
    global_env.PrependENVPath('PATH', intel_dir)
    global_env.PrependENVPath('LD_LIBRARY_PATH', os.path.join(base_dir, 'lib', arch))
    global_env['CC'] = 'icc'
    global_env['CXX'] = 'icpc'
    global_env['FC'] = 'ifort'
    global_env['AR'] = 'xiar'
    global_env['LD'] = 'xild'
else:
    print 'Aborted because of unknown build option:', option
    Exit(1)

# set variant directory for object files
VariantDir(global_env['BUILDDIR'], '.', duplicate = 0)


# check for required packages and configure the environment
if (not global_env.GetOption('clean')) and (not global_env.GetOption('help')):
    if not config.configure(global_env):
        Exit(1)

# loop over directory entries and filter out package directories
exclude_dirs = ['build', 'include', 'lib', 'bin', 'site_scons']
local_packages = []
for entry in os.listdir(os.getcwd()):
    if entry.find('.') > -1 or os.path.isfile(entry) or entry in exclude_dirs:
        continue

    # we are in a package directory
    global_env['PACKAGE'] = entry
    local_packages.append(entry)

    global_env.ProcessDirectory(entry)

