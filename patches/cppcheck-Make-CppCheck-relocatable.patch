From c4d97a2e48b3967f54a985b5c1c032ba838f52a6 Mon Sep 17 00:00:00 2001
From: Martin Ritter <martin.ritter@lmu.de>
Date: Wed, 17 Mar 2021 11:07:49 +0000
Subject: [PATCH] Make cpcheck relocatable

---
 cli/cppcheckexecutor.cpp | 14 +++-----------
 lib/cppcheck.cpp         | 12 ++++++------
 lib/library.cpp          |  7 ++++---
 lib/platform.cpp         | 15 ++++++++-------
 4 files changed, 21 insertions(+), 27 deletions(-)

diff --git a/cli/cppcheckexecutor.cpp b/cli/cppcheckexecutor.cpp
index 0b51a76..75405d7 100644
--- a/cli/cppcheckexecutor.cpp
+++ b/cli/cppcheckexecutor.cpp
@@ -869,16 +869,9 @@ int CppCheckExecutor::check_internal(CppCheck& cppcheck, int /*argc*/, const cha
     if (!std || !posix || !windows) {
         const std::list<ErrorMessage::FileLocation> callstack;
         const std::string msg("Failed to load " + std::string(!std ? "std.cfg" : !posix ? "posix.cfg" : "windows.cfg") + ". Your Cppcheck installation is broken, please re-install.");
-#ifdef FILESDIR
-        const std::string details("The Cppcheck binary was compiled with FILESDIR set to \""
-                                  FILESDIR "\" and will therefore search for "
-                                  "std.cfg in " FILESDIR "/cfg.");
-#else
-        const std::string cfgfolder(Path::fromNativeSeparators(Path::getPathFromFilename(argv[0])) + "cfg");
-        const std::string details("The Cppcheck binary was compiled without FILESDIR set. Either the "
-                                  "std.cfg should be available in " + cfgfolder + " or the FILESDIR "
-                                  "should be configured.");
-#endif
+        const std::string details("The Cppcheck binary was compiled for the Belle2 externals, "
+                                  "please make sure the externals are setup using b2setup "
+                                  "or setupext and $BELLE2_EXTERNALS_DIR is set correctly.");
         ErrorMessage errmsg(callstack, emptyString, Severity::information, msg+" "+details, "failedToLoadCfg", false);
         reportErr(errmsg);
         return EXIT_FAILURE;
diff --git a/lib/cppcheck.cpp b/lib/cppcheck.cpp
index 307327b..c20b4d4 100644
--- a/lib/cppcheck.cpp
+++ b/lib/cppcheck.cpp
@@ -78,12 +78,12 @@ namespace {
             if (Path::fileExists(exepath + "addons/" + fileName))
                 return exepath + "addons/" + fileName;
 
-#ifdef FILESDIR
-            if (Path::fileExists(FILESDIR + ("/" + fileName)))
-                return FILESDIR + ("/" + fileName);
-            if (Path::fileExists(FILESDIR + ("/addons/" + fileName)))
-                return FILESDIR + ("/addons/" + fileName);
-#endif
+            char* extDir = std::getenv("BELLE2_EXTERNALS_DIR");
+            if(extDir){
+                const std::string fname = std::string(extDir) + "/share/Cppcheck/addons" + fileName;
+                if (Path::fileExists(fname)) return fname;
+            }
+
             return "";
         }
 
diff --git a/lib/library.cpp b/lib/library.cpp
index d929d57..263df8b 100644
--- a/lib/library.cpp
+++ b/lib/library.cpp
@@ -96,9 +96,10 @@ Library::Error Library::load(const char exename[], const char path[])
         }
 
         std::list<std::string> cfgfolders;
-#ifdef FILESDIR
-        cfgfolders.emplace_back(FILESDIR "/cfg");
-#endif
+
+        char* extDir = std::getenv("BELLE2_EXTERNALS_DIR");
+        if(extDir) cfgfolders.push_back(std::string(extDir) + "/share/Cppcheck/cfg");
+
         if (exename) {
             const std::string exepath(Path::fromNativeSeparators(Path::getPathFromFilename(exename)));
             cfgfolders.push_back(exepath + "cfg");
diff --git a/lib/platform.cpp b/lib/platform.cpp
index 3ba2e6f..176bc12 100644
--- a/lib/platform.cpp
+++ b/lib/platform.cpp
@@ -165,13 +165,14 @@ bool cppcheck::Platform::loadPlatformFile(const char exename[], const std::strin
             filenames.push_back(Path::getPathFromFilename(Path::fromNativeSeparators(exename)) + "platforms/" + filename);
             filenames.push_back(Path::getPathFromFilename(Path::fromNativeSeparators(exename)) + "platforms/" + filename + ".xml");
         }
-#ifdef FILESDIR
-        std::string filesdir = FILESDIR;
-        if (!filesdir.empty() && filesdir[filesdir.size()-1] != '/')
-            filesdir += '/';
-        filenames.push_back(filesdir + ("platforms/" + filename));
-        filenames.push_back(filesdir + ("platforms/" + filename + ".xml"));
-#endif
+
+        char* extDir = std::getenv("BELLE2_EXTERNALS_DIR");
+        if(extDir){
+            const std::string fname = std::string(extDir) + "/share/Cppcheck/platforms" + filename;
+            filenames.push_back(fname);
+            filenames.push_back(fname + ".xml");
+        }
+
         bool success = false;
         for (const std::string & f : filenames) {
             if (doc.LoadFile(f.c_str()) == tinyxml2::XML_SUCCESS) {
-- 
2.31.0

