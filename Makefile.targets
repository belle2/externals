# reset makeflags for sub make calls
override MAKEFLAGS:=

# make sure this file is not executed in parallel
.NOTPARALLEL:

# define directories
export BELLE2_EXTERNALS_DIR := $(shell pwd)
export BELLE2_EXTERNALS_SUBDIR := $(BELLE2_ARCH)/$(BELLE2_EXTERNALS_OPTION)
export PATCHDIR := $(BELLE2_EXTERNALS_DIR)/patches
export EXTDIR := $(BELLE2_EXTERNALS_DIR)/$(BELLE2_EXTERNALS_SUBDIR)
export EXTSRCDIR := $(BELLE2_EXTERNALS_DIR)/src
export EXTBUILDDIR := $(BELLE2_EXTERNALS_DIR)/build/$(BELLE2_EXTERNALS_SUBDIR)
export EXTINCDIR := $(EXTDIR)/include
export EXTLIBDIR := $(EXTDIR)/lib
export EXTBINDIR := $(EXTDIR)/bin
export EXTCOMDIR := $(BELLE2_EXTERNALS_DIR)/$(BELLE2_ARCH)/common
export EXTSHRDIR := $(BELLE2_EXTERNALS_DIR)/share
export ROOTSYS := $(EXTCOMDIR)/root

# download script to get and extract sources
export DOWNLOAD := $(BELLE2_EXTERNALS_DIR)/tools/download.sh

# function to get a relative path in a recipe. This will return a backtick
# string to be expanded by the shell which is needed to get the current shell
# directory. Relpath has been added to python2.6 so we should be fine
#  - $(call relpath,$(EXTSRCDIR)) returns a shell expression to evaluate
#    $EXTSRCDIR relative to the current directory
#  - $(call relpath,$(EXTINCDIR),$(EXTDIR)) returns a shell expression to
#    evaluate $EXTINCDIR relative to $EXTDIR
# if needed as make variable wrap it in a shell echo call $(shell echo $(call
# relpath,...))
relpath=`python -c 'import os,sys; print(os.path.relpath(*sys.argv[1:]))' $(1) $(2)`

# get rid of localization
export LANG:=C

# set number of parallel jobs to the number of processors
ifeq ($(shell uname),Darwin)
  NPROCESSES:=$(shell sysctl -n hw.ncpu 2> /dev/null)
else
  NPROCESSES:=$(shell grep "physical id" /proc/cpuinfo 2> /dev/null | wc -l)
  ifeq ($(NPROCESSES),0)
    NPROCESSES:=$(shell grep processor /proc/cpuinfo 2> /dev/null | wc -l)
  endif
endif
ifdef BELLE2_MAKE_NPROCESSES
  NPROCESSES:=$(BELLE2_MAKE_NPROCESSES)
endif
ifeq ($(NPROCESSES),0)
  NPROCESSES:=1
endif

# Default compiler: gcc/g++
export CC:=gcc
export CXX:=g++

# By default, we provide DWARF debug information even for optimized packages, as
# it has uses for dynamic analysis like profiling. You can opt out of it for
# selected packages using the following target file name prefix filter.
#
# The current approach has several caveats that one should keep in mind:
#
# - You must match every make target used during the building and installation
#   of a package, including file-based targets like binutils' "$(EXTBINDIR)/ld".
# - To work around the fact that make's filter functions only support a single %
#   wildcard, which makes it hard to match the middle of a file name, we trim
#   the directory part of the file name before matching. This approach is not
#   flexible enough to e.g. match the "xz" part of "$(EXTSRCDIR)/xz/INSTALL".
# - Prefix-based filtering can also overshoot (e.g. "ld" is a prefix of "ldd"
#   and "ldap"). Please make sure that your prefixes don't accidentally affect
#   other targets in this makefile, extending the filtering logic as necessary.
#
OPTDEB_EXCLUDE_PREFIXES:=astyle bazel binutils clang cmake cppcheck doxygen \
	gcc gdb git git-lfs ld llvm pkg-config rclone valgrind
OPTDEB_EXCLUDE_PATTERNS:=$(OPTDEB_EXCLUDE_PREFIXES:%=%%)
OPTDEB_ENABLED=$(filter-out $(OPTDEB_EXCLUDE_PATTERNS),$(notdir $@))

# set debug or optimization options
ifeq ($(BELLE2_EXTERNALS_OPTION),debug)
  # suffix for the install target when running "make install". For opt/common
  # mode this can be set to "-strip" to install stripped versions of the programs
  # to greatly reduce disk size, especially for gcc
  export INSTALL_TARGET_SUFFIX:=
  export CONFIGURE_CXXFLAGS:=-g
  export CONFIGURE_COMMON_FLAGS:=--enable-debug
  export CMAKE_COMMON_FLAGS:=-DCMAKE_BUILD_TYPE=RelWithDebInfo
  export BOOST_OPTION:=variant=debug
  export GEANT4_OPTION:=
else
# make if (option=opt or option=common) using the filter: filter will only
# return common or opt if they are in the EXTERNALS_OPTION so if the option is
# anything else we get an empty string
ifneq (, $(filter $(BELLE2_EXTERNALS_OPTION), common opt))
  export INSTALL_TARGET_SUFFIX=$(if $(OPTDEB_ENABLED),,-strip)
  export CONFIGURE_CXXFLAGS=$(if $(OPTDEB_ENABLED),-g)
  export CONFIGURE_COMMON_FLAGS=$(if $(OPTDEB_ENABLED),--enable-debug)
  export CMAKE_COMMON_FLAGS=-DCMAKE_BUILD_TYPE=$(if $(OPTDEB_ENABLED),RelWithDebInfo,Release)
  export BOOST_OPTION:=variant=release
  export GEANT4_OPTION:=-DGEANT4_BUILD_STORE_TRAJECTORY=OFF -DGEANT4_BUILD_VERBOSE_CODE=OFF
else
ifeq ($(BELLE2_EXTERNALS_OPTION),intel)
  export CC:=icc
  export CXX:=icpc
  export CXXCPP:=icc -E
  export FC:=ifort
  export AR:=xiar
  export LD:=xild
  export BOOST_OPTION:=variant=release toolset=intel
  export GEANT4_OPTION:=-DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icc -DGEANT4_BUILD_STORE_TRAJECTORY=OFF -DGEANT4_BUILD_VERBOSE_CODE=OFF
else
  $(error Unknown externals build option. Please source the setup_belle2 script.)
endif
endif
endif

export ROOT_OPTION:=
ifdef ORACLE_HOME
  ROOT_OPTION += -Doracle=ON -DORACLE_LIBRARY_OCCI=$(ORACLE_HOME) -DORACLE_INCLUDE_DIR=$(ORACLE_HOME)/sdk/include/
endif
ROOT_OPTION+= -Dpgsql=ON -DPOSTGRESQL_INCLUDE_DIR=$(EXTINCDIR)/pgsql/ -DPOSTGRESQL_LIBRARY=$(EXTLIBDIR)/libpq.so

# check for xerces xml library to enable GDML persistency in geant4 which is a
# useful but not necessary tool to track changes in the geometry
# disabled due to BII-5219: new xerces-c not compatible with our ancient Geant4
#ifeq ($(shell pkg-config --exists xerces-c 2> /dev/null; echo $$?),0)
#  GEANT4_OPTION+= -DGEANT4_USE_GDML=ON
#endif

# check for graphics packages needed to built ROOT's OpenGL support
GL_GLU_EXISTS:=$(shell pkg-config --exists gl glu 2> /dev/null; echo $$?)
ifeq ($(GL_GLU_EXISTS),0)
  ROOT_OPTION+= -Dopengl=ON -Dbuiltin_glew=ON
endif


# check whether geant4 data files are already installed
GEANT4_DATA_EXISTS:=$(shell test -d share/Geant4-10.1.2/data/G4EMLOW6.41; echo $$?)
ifneq ($(GEANT4_DATA_EXISTS),0)
  GEANT4_OPTION+= -DGEANT4_INSTALL_DATA=ON
endif

# check for graphics packages
GL_XMU_EXISTS:=$(shell pkg-config --exists gl xmu 2> /dev/null; echo $$?)
ifeq ($(GL_XMU_EXISTS),0)
  GEANT4_OPTION+= -D g4vis_build_openglx_driver='y' -D g4vis_use_openglx='y'
endif

# cmake executable including common options
CMAKE=cmake -DCMAKE_INSTALL_PREFIX=$(EXTDIR) $(CMAKE_COMMON_FLAGS)

# now path for current option and common packages, could be two times the same
export PATH := $(ROOTSYS)/bin:$(EXTBINDIR):$(BELLE2_EXTERNALS_DIR)/$(BELLE2_ARCH)/common/bin:$(PATH)
ifeq ($(shell uname),Darwin)
  export DYLD_LIBRARY_PATH := $(ROOTSYS)/lib:$(EXTLIBDIR):$(BELLE2_EXTERNALS_DIR)/$(BELLE2_ARCH)/common/lib:$(DYLD_LIBRARY_PATH)
else
  export LD_LIBRARY_PATH := $(ROOTSYS)/lib:$(EXTLIBDIR):$(BELLE2_EXTERNALS_DIR)/$(BELLE2_ARCH)/common/lib:$(LD_LIBRARY_PATH)
endif

# directory we want to create
DIRECTORIES:=$(EXTSRCDIR) $(EXTBUILDDIR) $(EXTLIBDIR) $(EXTBINDIR)
# directories we want to share between all options
SHARED_DIRECTORIES:=$(EXTINCDIR) $(EXTDIR)/share

# when called without targets, do nothing
donothing: ;

dirs: $(DIRECTORIES) $(SHARED_DIRECTORIES)
# make a lib64 -> lib symlink on 64bit platforms because gcc decides it needs
# to install some libraries in lib64
ifeq ($(shell uname -m),x86_64)
	@cd $(EXTDIR) && ln -sfT lib lib64
endif

# pkg config wrapper using correct paths and being relocatable (if .pc files are fixed)
pkg-config-wrapper: $(EXTBINDIR)/pkg-config
# nothing to do for src
pkg-config-wrapper.src: ;

$(EXTBINDIR)/pkg-config: tools/pkg-config
	@echo "Installing pkg-config wrapper"
	@install $< $@

relocatable_fixes:
# Fix absolute paths in .pc files for pkg-config and in python scripts
	-@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$${BELLE2_EXTERNALS_DIR}:g" $(EXTLIBDIR)/pkgconfig/*.pc 2>/dev/null
# and in CMAKE files
	-@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$$ENV{BELLE2_EXTERNALS_DIR}:g" $(EXTLIBDIR)/cmake/**/*.cmake 2>/dev/null
# Fix absolute paths in pip packages and other python scripts id python is installed.
# But only if python3 actually exists
	@if which python3 > /dev/null; then $(BELLE2_EXTERNALS_DIR)/tools/python_relocate.py $(EXTDIR) $(EXTBINDIR) `python3-config --configdir`; fi
# Replace hardlinks by symlinks as cvmfs complains about hardlinks
# But only if python3 actually exists
	@if which python3 > /dev/null; then $(BELLE2_EXTERNALS_DIR)/tools/convert_hardlinks.py $(EXTDIR) $(EXTSHRDIR); fi
# And finally split and strip all binaries except bazel because stripping bazel removes all functionality :?
	@if which python3 > /dev/null; then $(BELLE2_EXTERNALS_DIR)/tools/strip_the_elves.py -j $(NPROCESSES) -e bin/bazel $(EXTDIR); fi

# create directories
$(DIRECTORIES):
	@echo "create $@"
	@mkdir -p $@

# create shared directories
$(SHARED_DIRECTORIES):
	@echo "create shared $@"
	@mkdir -p $(BELLE2_EXTERNALS_DIR)/$(notdir $@)
	@cd $(dir $@) && ln -sf $(call relpath,$(BELLE2_EXTERNALS_DIR)/$(notdir $@))

binutils: $(EXTBINDIR)/ld
binutils.src: $(EXTSRCDIR)/binutils
binutils.touch:
	@rm -fr $(EXTBINDIR)/ld

$(EXTSRCDIR)/binutils:
	@$(DOWNLOAD) binutils binutils-2.34.tar.bz2 http://ftp.gnu.org/gnu/binutils/binutils-2.34.tar.bz2

$(EXTBINDIR)/ld: $(EXTSRCDIR)/binutils
	@echo "building binutils"
	@mkdir -p $(EXTBUILDDIR)/binutils
	#note: avoid propagating CXXFLAGS by explicitly unsetting in sub-shell (works in posix and csh)
	@cd $(EXTBUILDDIR)/binutils && unset CXXFLAGS && $(EXTSRCDIR)/binutils/configure $(CONFIGURE_COMMON_FLAGS) \
	    --disable-werror --disable-multilib --enable-shared --enable-gold --prefix=$(EXTDIR) && \
	    make tooldir=$(EXTDIR) -j $(NPROCESSES) && \
	    make tooldir=$(EXTDIR) -j $(NPROCESSES) install$(INSTALL_TARGET_SUFFIX)

binutils.clean:
	@echo "cleaning binutils"
	@-cd $(EXTSRCDIR)/binutils/build && make distclean
	@rm -rf $(EXTSRCDIR)/binutils

gcc: $(EXTBINDIR)/gcc
gcc.src: $(EXTSRCDIR)/gcc

$(EXTSRCDIR)/gcc:
	@$(DOWNLOAD) gcc gcc-9.3.0.tar.xz http://ftp.gnu.org/gnu/gcc/gcc-9.3.0/gcc-9.3.0.tar.xz
# and also download the prerequisites in their latest version
	@$(DOWNLOAD) gcc/gmp gmp-6.2.0.tar.xz https://gmplib.org/download/gmp/gmp-6.2.0.tar.xz
	@$(DOWNLOAD) gcc/mpfr mpfr-4.0.2.tar.xz http://www.mpfr.org/mpfr-4.0.2/mpfr-4.0.2.tar.xz
	@$(DOWNLOAD) gcc/mpc mpc-1.1.0.tar.gz http://ftp.gnu.org/gnu/mpc/mpc-1.1.0.tar.gz
	@$(DOWNLOAD) gcc/isl isl-0.21.tar.xz http://isl.gforge.inria.fr/isl-0.21.tar.xz

$(EXTBINDIR)/gcc: $(EXTSRCDIR)/gcc
	@echo "building gcc"
	@mkdir -p $(EXTBUILDDIR)/gcc
# note: avoid propagating CXXFLAGS by explicitly unsetting in sub-shell (works in posix and csh)
# Also, gcc will *always* consider $prefix/include as system include dir and
# put it *after* /usr/local/include which breaks things. So, we choose another
# prefix but adjust the other directories to be like we want them. However,
# these directories need to be inside prefix. Since prefix cannot be EXTDIR or
# BELLE2_EXTERNALS_DIR as both contain an include dir the only option is
# $(BELLE2_EXTERNALS_DIR)/$(BELLE2_ARCH). As nothing gets installed in the
# prefix anymore this should be fine. It's not pretty though but
# alternatives are installing gcc completely separately or patching it.
# Now ROOT needs to see a c++ in the search path, otherwise it thinks there are
# no c++ std includes so we install the c++ includes in $(EXTINCDIR)/c++ but
# skip the version: there's only one gcc version per external version.
	@cd $(EXTBUILDDIR)/gcc/ && unset CXXFLAGS && $(EXTSRCDIR)/gcc/configure --disable-multilib --disable-bootstrap \
	    --prefix=$(BELLE2_EXTERNALS_DIR)/$(BELLE2_ARCH) --exec-prefix=$(EXTDIR) --datarootdir=$(EXTDIR)/share \
	    --with-gxx-include-dir=$(EXTINCDIR)/c++ --enable-languages=c,c++,fortran --without-system-libz && \
	    make -j $(NPROCESSES) && make install$(INSTALL_TARGET_SUFFIX)
# now remove the bloody empty directory gcc creates in prefix. but make sure
# it's actually empty
	@[ $$(ls -A $(BELLE2_EXTERNALS_DIR)/$(BELLE2_ARCH)/include 2>/dev/null) ] && \
	    { echo "$(BELLE2_EXTERNALS_DIR)/$(BELLE2_ARCH)/include not empty, something is wrong"; exit 1; } || exit 0
	@rm -fr $(BELLE2_EXTERNALS_DIR)/$(BELLE2_ARCH)/include

gcc.clean:
	@echo "cleaning gcc"
	@rm -rf $(EXTBUILDDIR)/gcc

clang: $(EXTBINDIR)/clang++
clang.src: $(EXTSRCDIR)/llvm
clang.touch:
	rm -fr $(EXTBINDIR)/clang++

$(EXTSRCDIR)/llvm:
	@$(DOWNLOAD) llvm llvm-8.0.0.src.tar.xz http://llvm.org/releases/8.0.0/llvm-8.0.0.src.tar.xz
	@$(DOWNLOAD) llvm/tools/clang cfe-8.0.0.src.tar.xz http://llvm.org/releases/8.0.0/cfe-8.0.0.src.tar.xz
	@$(DOWNLOAD) llvm/projects/compiler-rt compiler-rt-8.0.0.src.tar.xz http://llvm.org/releases/8.0.0/compiler-rt-8.0.0.src.tar.xz
	@$(DOWNLOAD) llvm/projects/lld lld-8.0.0.src.tar.xz http://llvm.org/releases/8.0.0/lld-8.0.0.src.tar.xz
# in case we want the llvm debugger
#	@$(DOWNLOAD) llvm/projects/lldb lldb-8.0.0.src.tar.xz http://llvm.org/releases/8.0.0/lldb-8.0.0.src.tar.xz
	@$(DOWNLOAD) llvm/projects/libcxx libcxx-8.0.0.src.tar.xz http://llvm.org/releases/8.0.0/libcxx-8.0.0.src.tar.xz
	@$(DOWNLOAD) llvm/projects/libcxxabi libcxxabi-8.0.0.src.tar.xz http://llvm.org/releases/8.0.0/libcxxabi-8.0.0.src.tar.xz
# in case we want llvm libunwind
#	@$(DOWNLOAD) llvm/projects/libunwind libunwind-8.0.0.src.tar.xz http://llvm.org/releases/8.0.0/libunwind-8.0.0.src.tar.xz
	@$(DOWNLOAD) llvm/tools/clang/tools/extra clang-tools-extra-8.0.0.src.tar.xz http://llvm.org/releases/8.0.0/clang-tools-extra-8.0.0.src.tar.xz
	@cd $(EXTSRCDIR)/llvm && patch -p1 < $(PATCHDIR)/llvm-8.0-pythonforward.patch

$(EXTBINDIR)/clang++: $(EXTSRCDIR)/llvm
	@echo "building llvm/clang"
	@mkdir -p $(EXTBUILDDIR)/llvm
	@cd $(EXTBUILDDIR)/llvm && $(CMAKE) -G "Unix Makefiles"  \
	    -DPython_ADDITIONAL_VERSIONS=3.8 -DPYTHON_EXECUTABLE=`which python3` \
	    $(EXTSRCDIR)/llvm && \
	    make -j $(NPROCESSES) && make install

valgrind: $(EXTBINDIR)/valgrind
valgrind.src: $(EXTSRCDIR)/valgrind
valgrind.touch:
	@rm -fr $(EXTBINDIR)/valgrind

$(EXTSRCDIR)/valgrind:
	@$(DOWNLOAD) valgrind valgrind-3.15.0.tar.bz2 http://sourceware.org/pub/valgrind/valgrind-3.15.0.tar.bz2

$(EXTBINDIR)/valgrind: $(EXTSRCDIR)/valgrind
	@echo "building valgrind"
	@cp -fa $< $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/valgrind && ./configure $(CONFIGURE_COMMON_FLAGS) --prefix=$(EXTDIR) --enable-silent-rules && \
	    make -j $(NPROCESSES) && make install$(INSTALL_TARGET_SUFFIX)

libxml2: $(EXTBINDIR)/xml2-config
libxml2.src: $(EXTSRCDIR)/libxml2

libxml2.clean:
	@rm -fr $(EXTSRCDIR)/libxml

libxml2.touch:
	@rm $(EXTBINDIR)/xml2-config

$(EXTSRCDIR)/libxml2:
	@$(DOWNLOAD) libxml2 libxml2-2.9.10.tar.gz ftp://xmlsoft.org/libxml2/libxml2-2.9.10.tar.gz

$(EXTBINDIR)/xml2-config: $(EXTSRCDIR)/libxml2
	@cd $< && ./configure $(CONFIGURE_COMMON_FLAGS) --prefix=$(EXTDIR) --enable-silent-rules --without-python && \
	    make -j $(NPROCESSES) && make install$(INSTALL_TARGET_SUFFIX)
	#Fix absolute path in xml2-config and lib/xml2Conf.sh
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$${BELLE2_EXTERNALS_DIR}:g" $@
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$${BELLE2_EXTERNALS_DIR}:g" $(EXTLIBDIR)/xml2Conf.sh

libxslt: $(EXTBINDIR)/xslt-config
libxslt.src: $(EXTSRCDIR)/libxslt

libxslt.clean:
	@rm -fr $(EXTSRCDIR)/libxml

libxslt.touch:
	@rm $(EXTBINDIR)/xslt-config

$(EXTSRCDIR)/libxslt:
	@$(DOWNLOAD) libxslt libxslt-1.1.34.tar.gz ftp://xmlsoft.org/libxslt/libxslt-1.1.34.tar.gz

$(EXTBINDIR)/xslt-config: $(EXTSRCDIR)/libxslt
	@cd $< && ./configure $(CONFIGURE_COMMON_FLAGS) --prefix=$(EXTDIR) --enable-silent-rules --without-python && \
	    make -j $(NPROCESSES) && make install$(INSTALL_TARGET_SUFFIX)
	#Fix absolute path in xslt-config and lib/xsltConf.sh
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$${BELLE2_EXTERNALS_DIR}:g" $@
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$${BELLE2_EXTERNALS_DIR}:g" $(EXTLIBDIR)/xsltConf.sh

zlib: $(EXTLIBDIR)/libz.so
zlib.src: $(EXTSRCDIR)/zlib
zlib.touch:
	@rm -f $(EXTLIBDIR)/libz.so

$(EXTSRCDIR)/zlib:
	@$(DOWNLOAD) zlib zlib-1.2.11.tar.gz http://zlib.net/zlib-1.2.11.tar.gz

# zlib: so basic that we only want it it common so we just do an in source build
$(EXTLIBDIR)/libz.so: $(EXTSRCDIR)/zlib
	@cp -fa $(EXTSRCDIR)/zlib $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/zlib && ./configure --prefix=$(EXTDIR) && \
	    make -j $(NPROCESSES) install

bzip2: $(EXTBINDIR)/bzip2
bzip2.src: $(EXTSRCDIR)/bzip2

bzip2.clean:
	@rm -fr $(EXTSRCDIR)/bzip2

bzip2.touch:
	@rm -fr $(EXTBINDIR)/bzip2

$(EXTSRCDIR)/bzip2:
	@$(DOWNLOAD) bzip2 bzip2-1.0.8.tar.gz https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz

$(EXTBINDIR)/bzip2: $(EXTSRCDIR)/bzip2
	@cd $< && make -f Makefile-libbz2_so && mv libbz2.so* $(EXTLIBDIR)
	@cd $< && make install PREFIX=$(EXTDIR)
	# make links relative
	@cd $(EXTBINDIR) && ln -fs bzdiff bzcmp && ln -fs bzgrep bzfgrep && \
	    ln -fs bzgrep bzegrep && ln -fs bzmore bzless
	# add symlink to find library
	@cd $(EXTLIBDIR) && ln -fs libbz2.so.1.0.8 libbz2.so

xz: $(EXTBINDIR)/xz
xz.src: $(EXTSRCDIR)/xz/INSTALL
xz.touch:
	@rm -fr $(EXTBINDIR)/xz

$(EXTSRCDIR)/xz/INSTALL:
	@$(DOWNLOAD) xz xz-5.2.5.tar.gz https://tukaani.org/xz/xz-5.2.5.tar.gz

$(EXTBINDIR)/xz: $(EXTSRCDIR)/xz/INSTALL
	@echo "building xz"
	@mkdir -p $(EXTBUILDDIR)/xz
	@cd $(EXTBUILDDIR)/xz && $(EXTSRCDIR)/xz/configure $(CONFIGURE_COMMON_FLAGS) \
	    --prefix=$(EXTDIR) --enable-silent-rules && \
	    make -j $(NPROCESSES) && \
	    make -j $(NPROCESSES) install$(INSTALL_TARGET_SUFFIX)

xz.clean:
	@echo "cleaning xz"
	@rm -rf $(EXTSRCDIR)/xz

lz4: $(EXTBINDIR)/lz4
lz4.src: $(EXTSRCDIR)/lz4/INSTALL
lz4.touch:
	@rm -fr $(EXTBINDIR)/lz4

$(EXTSRCDIR)/lz4/INSTALL:
	@$(DOWNLOAD) lz4 lz4-v1.9.2.tar.gz https://github.com/lz4/lz4/archive/v1.9.2.tar.gz

$(EXTBINDIR)/lz4: $(EXTSRCDIR)/lz4/INSTALL
	@echo "building lz4"
	@cp -fa $(EXTSRCDIR)/lz4 $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/lz4 && \
	    make -j $(NPROCESSES) prefix=$(EXTDIR) && \
	    make -j $(NPROCESSES) install prefix=$(EXTDIR)

lz4.clean:
	@echo "cleaning lz4"
	@rm -rf $(EXTSRCDIR)/lz4

sqlite: $(EXTBINDIR)/sqlite3
sqlite.src: $(EXTSRCDIR)/sqlite
sqlite.clean:
	@rm -fr $(EXTBUILDDIR)/sqlite
sqlite.touch:
	@rm -fr $(EXTBINDIR)/sqlite3

$(EXTSRCDIR)/sqlite:
	$(DOWNLOAD) sqlite sqlite-autoconf-3310100.tar.gz https://www.sqlite.org/2020/sqlite-autoconf-3310100.tar.gz

$(EXTBINDIR)/sqlite3: $(EXTSRCDIR)/sqlite
	@echo "building sqlite"
	@mkdir -p $(EXTBUILDDIR)/sqlite
	@cd $(EXTBUILDDIR)/sqlite && $(EXTSRCDIR)/sqlite/configure --prefix=$(EXTDIR) \
	    --enable-json1 --enable-fts5 --enable-session --enable-silent-rules && \
	    make -j $(NPROCESSES) && make install$(INSTALL_TARGET_SUFFIX)

python: $(EXTBINDIR)/python3
python.src: $(EXTSRCDIR)/python

python.clean:
	@rm -fr $(EXTSRCDIR)/python

python.touch:
	@rm -fr $(EXTBINDIR)/python3

$(EXTSRCDIR)/python:
	@$(DOWNLOAD) python Python-3.8.2.tgz https://www.python.org/ftp/python/3.8.2/Python-3.8.2.tgz

$(EXTBINDIR)/python3: $(EXTSRCDIR)/python
	@echo "building python"
	@mkdir -p $(EXTBUILDDIR)/python
	@cd $(EXTBUILDDIR)/python && $(EXTSRCDIR)/python/configure $(CONFIGURE_COMMON_FLAGS) --enable-shared \
	    --prefix=$(EXTDIR) --with-ensurepip=install && \
	    make -j $(NPROCESSES) && make install
# add customization to the site directories so that we can also install packages into the other lib directories
	@cp sitecustomize.py $(EXTLIBDIR)/python3.8/site-packages

# not very nice but pip only can handle one pem file at a time, so concatenate
# the tools pem file and the official one
CREATE_PIP_CERTCHAIN := "cat $(BELLE2_TOOLS)/certchain.pem `python3 -c 'import site; print(site.getsitepackages()[0])'`/pip/_vendor/*/cacert.pem > .pip-certchain.pem"

MAIN_REQUIREMENTS:= "requirements-core.txt"
# No torch on SL6
ifeq ($(strip $(shell b2install-print-os)), sl6)
  MAIN_REQUIREMENTS:= "requirements-core.sl6.txt"
endif

PIP3OPTIONS:=--disable-pip-version-check --require-hashes --cert=.pip-certchain.pem \
	    --find-links=https://belle2:Aith4tee@b2-master.belle2.org/download/python-packages/
# don't use index if we want to restrict to the belle2 download server
ifneq ($(USE_BELLE2SERVER),)
    PIP3OPTIONS+=--no-index
endif

# download the source for the python packages. This is only called directly or
# with make src and it will download src and binary package versions
python-packages.src:
	eval $(CREATE_PIP_CERTCHAIN)
# make sure pip is up to date
	pip3 install --find-links=src/python-packages $(PIP3OPTIONS) \
	    -r requirements-base.txt
	cat requirements-base.txt $(MAIN_REQUIREMENTS) | (while read line; do \
	  echo $$line | pip3 download -d src/python-packages $(PIP3OPTIONS) --no-deps --no-build-isolation --no-binary=:all: -r/dev/stdin; \
	  echo $$line | pip3 download -d src/python-packages $(PIP3OPTIONS) --no-deps --no-build-isolation -r/dev/stdin; \
	done)

# python packages will install ipython so use this as prerequisite and actual
# target. needs to be updated if ipython is removed
python-packages: $(EXTBINDIR)/ipython
python-packages.touch:
	@rm -fr $(EXTBINDIR)/ipython

# install all required python packages. setuptools-scm used to be required by
# path.py but for newer versions we can just install the wheel which doesn't
# need that. For now we ignore this dependency and assume easy_install will do
# it correctly.
$(EXTBINDIR)/ipython:
	eval $(CREATE_PIP_CERTCHAIN)
	pip3 install --find-links=src/python-packages $(PIP3OPTIONS) \
	    -r requirements-base.txt
	pip3 install --find-links=src/python-packages $(PIP3OPTIONS) \
	    -r requirements-base.txt -r $(MAIN_REQUIREMENTS)
# make pep8 compatibility link
	cd $(EXTBINDIR) && ln -sf pycodestyle pep8
# register widget extension in jupyter
	jupyter nbextension enable --py --sys-prefix widgetsnbextension
# make sure our own python3 kernel has precedence over /usr/share/jupyter/kernels/python3
	ipython kernel install --sys-prefix --display-name "Python 3 (Belle2)"
# but make the path relative so it can be found correctly if the externals are installed in a different directory.
	sed -i 's#$(EXTBINDIR)/*##g' $(EXTDIR)/share/jupyter/kernels/python3/kernel.json
# install our own version of sphinx-argparse
	pip3 install -U --no-deps src/sphinx-argparse

root-python-packages.src:
	eval $(CREATE_PIP_CERTCHAIN)
	cat requirements-root.txt | (while read line; do \
	  echo $$line | pip3 download -d src/python-packages $(PIP3OPTIONS) --no-deps --no-build-isolation --no-binary=:all: -r/dev/stdin; \
	  echo $$line | pip3 download -d src/python-packages $(PIP3OPTIONS) --no-deps --no-build-isolation -r/dev/stdin; \
	done)

root-python-packages: $(EXTLIBDIR)/python3.8/site-packages/root_numpy/info.py

$(EXTLIBDIR)/python3.8/site-packages/root_numpy/info.py:
	eval $(CREATE_PIP_CERTCHAIN)
	pip3 install --prefix=$(EXTDIR) --find-links=src/python-packages $(PIP3OPTIONS) \
	    --no-deps -r requirements-root.txt

root-python-packages.clean:
	@rm -fr $(EXTLIBDIR)/python3.8/site-packages/

root-python-packages.touch: root-python-packages.clean

gdb: $(EXTBINDIR)/gdb
gdb.src: $(EXTSRCDIR)/gdb
gdb.touch:
	rm -fr $(EXTBINDIR)/gdb

$(EXTSRCDIR)/gdb:
	@$(DOWNLOAD) gdb gdb-9.1.tar.xz http://ftp.gnu.org/gnu/gdb/gdb-9.1.tar.xz

$(EXTBINDIR)/gdb: $(EXTSRCDIR)/gdb
	@echo "building gdb"
	@mkdir -p $(EXTBUILDDIR)/gdb
# note: avoid propagating CXXFLAGS by explicitly unsetting in sub-shell (works in posix and csh)
# also touch all .info files and their prerequisites to make sure they are up to
# date, otherwise makeinfo might be called on "make install" and we don't want to require that
	@cd $(EXTBUILDDIR)/gdb && unset CXXFLAGS && $(EXTSRCDIR)/gdb/configure $(CONFIGURE_COMMON_FLAGS) \
	    --prefix=$(EXTDIR) --with-python=python3 && \
	    make -j $(NPROCESSES) && \
	    touch gdb/doc/version.subst gdb/doc/GDBvn.texi gdb/doc/*.info && \
	    make install

gdb.clean:
	@echo "cleaning gdb"
	@-cd $(EXTSRCDIR)/gdb && make distclean
	@rm -rf $(EXTSRCDIR)/gdb


# dependencies for cmake
cmake: $(EXTBINDIR)/cmake
cmake.src: $(EXTSRCDIR)/cmake/bootstrap

# cmake download
$(EXTSRCDIR)/cmake/bootstrap:
	@$(DOWNLOAD) cmake cmake-3.16.5.tar.gz http://www.cmake.org/files/v3.16/cmake-3.16.5.tar.gz

# cmake build
$(EXTBINDIR)/cmake: $(EXTSRCDIR)/cmake/bootstrap
	@echo "building cmake"
	@cd $(EXTSRCDIR)/cmake && ./bootstrap --prefix=$(EXTDIR) --system-curl \
	    --system-bzip2 --system-zlib --parallel=$(NPROCESSES) && \
	    sed -i 's/BUILD_CursesDialog\:BOOL=ON/BUILD_CursesDialog\:BOOL=OFF/g' CMakeCache.txt && \
	    make -j $(NPROCESSES) && make install

# cmake clean
cmake.clean:
	@echo "cleaning cmake"
	@cd $(EXTSRCDIR)/cmake && make clean
	@rm -f $(EXTBINDIR)/cmake

# cmake touch
cmake.touch:
	@rm -f $(EXTBINDIR)/cmake


# dependencies for google test
gtest: $(EXTLIBDIR)/libgtest.so
gtest.src: $(EXTSRCDIR)/gtest/README.md

# google test download
$(EXTSRCDIR)/gtest/README.md:
	@$(DOWNLOAD) gtest gtest-1.10.0.tar.gz https://github.com/google/googletest/archive/release-1.10.0.tar.gz

# google test build
$(EXTLIBDIR)/libgtest.so: $(EXTSRCDIR)/gtest/README.md
	@echo "building gtest"
	@mkdir -p $(EXTBUILDDIR)/gtest
	@cd $(EXTBUILDDIR)/gtest && $(CMAKE) $(EXTSRCDIR)/gtest \
	    -DBUILD_SHARED_LIBS=ON \
	    -DPython_ADDITIONAL_VERSIONS=3.8 -DPYTHON_EXECUTABLE=`which python3` && \
	    make -j $(NPROCESSES) && make install

# google test clean
gtest.clean:
	@echo "cleaning gtest"
	@rm -rf $(EXTBUILDDIR)/gtest $(EXTINCDIR)/gtest $(EXTLIBDIR)/libgtest.a

# google test touch
gtest.touch:
	@rm -f $(EXTLIBDIR)/libgtest.a


# dependencies for boost
boost: $(EXTLIBDIR)/libboost_system.so
boost.src: $(EXTSRCDIR)/boost/INSTALL

# boost download
$(EXTSRCDIR)/boost/INSTALL:
	@$(DOWNLOAD) boost boost_1_72_0.tar.bz2 http://downloads.sourceforge.net/project/boost/boost/1.72.0/boost_1_72_0.tar.bz2

# boost build
$(EXTLIBDIR)/libboost_system.so: $(EXTSRCDIR)/boost/INSTALL
	@echo "building boost"
	cd $(EXTSRCDIR)/boost && ./bootstrap.sh --prefix=$(EXTDIR) \
	    --includedir=$(EXTINCDIR) --with-python=python3 --without-icu && \
	    ./b2 install -sZLIB_INCLUDE=$(EXTINCDIR) -sZLIB_LIBPATH=$(EXTLIBDIR) \
	    -sBZIP2_INCLUDE=$(EXTINCDIR) -sBZIP2_LIBPATH=$(EXTLIBDIR) \
	    -sLZMA_INCLUDE=$(EXTINCDIR) -sLZMA_LIBPATH=$(EXTLIBDIR) \
	    --disable-icu --build-dir=$(EXTBUILDDIR) -j$(NPROCESSES) $(BOOST_OPTION)
	@cd $(EXTLIBDIR) && ln -sfT libboost_python38.so libboost_python.so

# boost clean
boost.clean:
	@echo "cleaning boost"
	@-cd $(EXTSRCDIR)/boost && ./b2 --clean $(BOOST_OPTION)
	@rm -rf $(EXTINCDIR)/boost $(EXTLIBDIR)/libboost_* $(EXTBUILDDIR)/boost

# boost touch
boost.touch:
	@rm -f $(EXTLIBDIR)/libboost_system.so

libuuid: $(EXTINCDIR)/uuid/uuid.h
libuuid.src: $(EXTSRCDIR)/util-linux/README
libuuid.clean:
	@rm -fr $(EXTINCDIR)/uuid $(EXTLIBDIR)/libuuid* $(EXTLIBDIR)/pkgconfig/uuid.pc
libuuid.touch: libuuid.clean

$(EXTSRCDIR)/util-linux/README:
	@$(DOWNLOAD) util-linux util-linux-2.32.1.tar.xz https://www.kernel.org/pub/linux/utils/util-linux/v2.32/util-linux-2.32.1.tar.xz

$(EXTINCDIR)/uuid/uuid.h: $(EXTSRCDIR)/util-linux/README
	@echo "building libuuid"
	@mkdir -p $(EXTBUILDDIR)/util-linux
	@cd $(EXTBUILDDIR)/util-linux && $(EXTSRCDIR)/util-linux/configure $(CONFIGURE_COMMON_FLAGS) \
	    --prefix=$(EXTDIR) --includedir=$(EXTINCDIR) --libdir=$(EXTLIBDIR) \
	    --bindir=$(EXTBINDIR) --disable-all-programs --enable-libuuid --enable-libuuid-force-uuidd \
	    --disable-bash-completion && \
	    make -j $(NPROCESSES) && make install

# cppcheck
cppcheck: $(EXTBINDIR)/cppcheck
cppcheck.src: $(EXTSRCDIR)/cppcheck
cppcheck.touch:
	@rm -fr $(EXTBINDIR)/cppcheck

$(EXTSRCDIR)/cppcheck:
	@$(DOWNLOAD) cppcheck cppcheck-1.88.tar.bz2 http://downloads.sourceforge.net/project/cppcheck/cppcheck/1.88/cppcheck-1.88.tar.bz2
	@cd $(EXTSRCDIR)/cppcheck && patch -p1 < $(PATCHDIR)/cppcheck-Make-CppCheck-relocatable.patch

$(EXTBINDIR)/cppcheck: $(EXTSRCDIR)/cppcheck
	@echo "building cppcheck"
	@mkdir -p $(EXTBUILDDIR)/cppcheck
	@cd $(EXTBUILDDIR)/cppcheck && $(CMAKE) $(EXTSRCDIR)/cppcheck \
	    -DPython_ADDITIONAL_VERSIONS=3.8 -DPYTHON_EXECUTABLE=`which python3` && \
	    make -j $(NPROCESSES) && make install

# doxygen
doxygen: $(EXTBINDIR)/doxygen
doxygen.src: $(EXTSRCDIR)/doxygen
doxygen.touch:
	@rm -fr $(EXTBINDIR)/doxygen

$(EXTSRCDIR)/doxygen:
	@$(DOWNLOAD) doxygen doxygen-1.8.15.src.tar.gz http://doxygen.nl/files/doxygen-1.8.15.src.tar.gz

$(EXTBINDIR)/doxygen: $(EXTSRCDIR)/doxygen
	@echo "building doxygen"
	@mkdir -p $(EXTBUILDDIR)/doxygen
	@cd $(EXTBUILDDIR)/doxygen && $(CMAKE) $(EXTSRCDIR)/doxygen \
	    -DPython_ADDITIONAL_VERSIONS=3.8 -DPYTHON_EXECUTABLE=`which python3` && \
	    make -j $(NPROCESSES) && make install

# dependencies for CLHEP
clhep: $(EXTBINDIR)/clhep-config
clhep.src: $(EXTSRCDIR)/CLHEP

# CLHEP download
$(EXTSRCDIR)/CLHEP:
	@$(DOWNLOAD) CLHEP clhep-2.2.0.4.tgz http://proj-clhep.web.cern.ch/proj-clhep/DISTRIBUTION/tarFiles/clhep-2.2.0.4.tgz

# CLHEP build
$(EXTBINDIR)/clhep-config: $(EXTSRCDIR)/CLHEP
	@echo "building CLHEP"
	@mkdir -p $(EXTBUILDDIR)/CLHEP
	@cd $(EXTBUILDDIR)/CLHEP && $(CMAKE) $(EXTSRCDIR)/CLHEP/CLHEP && \
	    make -j $(NPROCESSES) && make install

# CLHEP clean
clhep.clean:
	@echo "cleaning CLHEP"
	@rm -rf $(EXTBUILDDIR)/CLHEP $(EXTDIR)/CLHEP $(EXTLIBDIR)/libCLHEP* $(EXTBINDIR)/clhep-config

# CLHEP touch
clhep.touch:
	@rm -f $(EXTBINDIR)/clhep-config


# dependencies for GEANT4
geant4: $(EXTBINDIR)/geant4.sh
geant4.src: $(EXTSRCDIR)/geant4

# GEANT4 download
$(EXTSRCDIR)/geant4:
	@$(DOWNLOAD) geant4 geant4.10.01.p02.tar.gz http://geant4.cern.ch/support/source/geant4.10.01.p02.tar.gz
	# fix gdml output for long properties. Already included upstream
	@cd $(EXTSRCDIR)/geant4 && patch -p1 < $(PATCHDIR)/geant4-gdml-strlen.patch
	# disable forced overlap check in opt mode and cosmetic verbosity fixes
	@cd $(EXTSRCDIR)/geant4 && patch -p1 < $(PATCHDIR)/geant4-verbosity.patch
	# fix rounding problem in G4ReplicaNavigation reported by Alexei
	@cd $(EXTSRCDIR)/geant4 && patch -p1 < $(PATCHDIR)/geant4-replicanavigation.patch
	# fix irreproducibility reported by Kirill (BII-2433)
	@cd $(EXTSRCDIR)/geant4 && patch -p1 < $(PATCHDIR)/geant4-1990-cascade_rotation.patch
	# fix rounding problem in SubtractionSolid by porting 10.4 version
	@cd $(EXTSRCDIR)/geant4 && patch -p1 < $(PATCHDIR)/geant4-subtractionSolid-backport10.4.patch
	# fix something ... I just got an updated .cc file via mail for BII-2750
	@cd $(EXTSRCDIR)/geant4 && patch -p1 < $(PATCHDIR)/geant4-BII-2750-G4GDecay3.patch

# GEANT4 build
$(EXTBINDIR)/geant4.sh: $(EXTBINDIR)/clhep-config $(EXTSRCDIR)/geant4
	@echo "building geant4"
	@mkdir -p $(EXTBUILDDIR)/geant4
	@cd $(EXTBUILDDIR)/geant4 && $(CMAKE) $(GEANT4_OPTION) \
	    -DCLHEP_ROOT_DIR=$(EXTDIR) -DCLHEP_INCLUDE_DIR=$(EXTINCDIR) -DCLHEP_LIBRARY=$(EXTLIBDIR) \
	    -DGEANT4_USE_G3TOG4=ON -DGEANT4_USE_SYSTEM_EXPAT=OFF $(EXTSRCDIR)/geant4 && \
	    make -j $(NPROCESSES) && make install
	# Fix absolute path in geant4-config, geant4.sh and geant4.csh
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$${BELLE2_EXTERNALS_DIR}:g" $(EXTBINDIR)/geant4*
	# Also fix geant4make just to be safe
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$${BELLE2_EXTERNALS_DIR}:g" $(EXTDIR)/share/Geant4-10.1.2/geant4make/geant4make.*

# GEANT4 clean
geant4.clean:
	@echo "cleaning geant4"
	@-cd $(EXTBUILDDIR)/geant4 && make clean
	@rm -rf $(EXTBUILDDIR)/geant4 $(EXTDIR)/geant4 $(EXTDIR)/share/Geant4-10.1.2 $(EXTINCDIR)/Geant4 $(EXTLIBDIR)/libG4*.so $(EXTBINDIR)/geant4*

# GEANT4 touch command
geant4.touch:
	@rm -f $(EXTBINDIR)/geant4.sh

# dependencies for PostgreSql
postgresql: $(EXTBINDIR)/psql
postgresql.src: $(EXTSRCDIR)/postgresql/configure

# PostgreSql download
$(EXTSRCDIR)/postgresql/configure:
	@$(DOWNLOAD) postgresql postgresql-9.2.4.tar.gz http://ftp.postgresql.org/pub/source/v9.2.4/postgresql-9.2.4.tar.gz

# PostgreSql build
$(EXTBINDIR)/psql: $(EXTSRCDIR)/postgresql/configure
	@echo "building PostgreSql"
	@mkdir -p $(EXTBUILDDIR)/postgresql
	@cd $(EXTBUILDDIR)/postgresql && $(EXTSRCDIR)/postgresql/configure $(CONFIGURE_COMMON_FLAGS) --prefix=$(EXTDIR) \
	    --includedir=$(EXTINCDIR)/pgsql/ --libdir=$(EXTLIBDIR) --bindir=$(EXTBINDIR) && \
	    make -j $(NPROCESSES) && make install

# PostgreSql clean
postgresql.clean:
	@echo "cleaning PostgreSql"
	@-cd $(EXTBUILDDIR)/postgresql 2>/dev/null && make clean
	@rm -rf $(EXTINCDIR)/pgsql $(EXTBINDIR)/psql

# PostgreSql touch
postgresql.touch:
	@rm -f $(EXTBINDIR)/psql

# dependencies for NeuroBayes
neurobayes: $(EXTLIBDIR)/libNeuroBayesCPPInterface_shared.so
neurobayes.src: $(EXTSRCDIR)/neurobayes/CMakeLists.txt

# NeuroBayes download
$(EXTSRCDIR)/neurobayes/CMakeLists.txt:
	@$(DOWNLOAD) neurobayes NeurobayesCppInterface-c7d36c5.tar.gz https://github.com/thomaskeck/NeurobayesCppInterface/archive/c7d36c5.tar.gz

# NeuroBayes build
$(EXTLIBDIR)/libNeuroBayesCPPInterface_shared.so: $(EXTSRCDIR)/neurobayes/CMakeLists.txt
	@echo "building NeuroBayes"
	@mkdir -p $(EXTBUILDDIR)/neurobayes
	@cd $(EXTBUILDDIR)/neurobayes && cmake $(EXTSRCDIR)/neurobayes/ -DCMAKE_INSTALL_PREFIX=$(EXTDIR) && make && make install
	# install also header files in the include directory, so ROOT's autoparser can find it
	# this is necessary as long as ROOT is not able to put also the header information in PCMs (ETA ~ mid 2016)
	#@mkdir -p $(EXTINCDIR)/inc/ && cp $(EXTINCDIR)/neurobayes/* $(EXTINCDIR)/inc/

# NeuroBayes clean command
neurobayes.clean:
	@echo "cleaning NeuroBayes"
	@rm -rf $(EXTBUILDDIR)/neurobayes

# NeuroBayes touch command
neurobayes.touch:
	@rm -f $(EXTLIBDIR)/libNeuroBayesCPPInterface_shared.so


# dependencies for xrootd
xrootd: $(EXTBINDIR)/xrootd
xrootd.src: $(EXTSRCDIR)/xrootd

# xrootd download
$(EXTSRCDIR)/xrootd:
	@$(DOWNLOAD) xrootd xrootd-4.10.0.tar.gz http://xrootd.org/download/v4.10.0/xrootd-4.10.0.tar.gz

# xrootd build
$(EXTBINDIR)/xrootd: $(EXTSRCDIR)/xrootd
	@echo "building xrootd"
	@mkdir -p $(EXTBUILDDIR)/xrootd
	@cd $(EXTBUILDDIR)/xrootd && $(CMAKE) \
	    -DENABLE_PYTHON=ON -DZLIB_LIBRARY=$(EXTCOMDIR)/lib/libz.so -DZLIB_INCLUDE_DIR=$(EXTINCDIR)\
	    -DPython_ADDITIONAL_VERSIONS=3.8 -DPYTHON_EXECUTABLE=`which python3` \
	    $(EXTSRCDIR)/xrootd && \
	    make -j $(NPROCESSES) && make install

# xrootd clean command
xrootd.clean:
	@echo "cleaning xrootd"
	@-cd $(EXTBUILDDIR)/xrootd 2>/dev/null && make clean
	@rm -rf $(EXTBUILDDIR)/xrootd $(EXTDIR)/xrootd $(EXTINCDIR)/xrootd $(EXTLIBDIR)/libXrd* $(EXTBINDIR)/xrd* $(EXTBINDIR)/xrootd

xrootd.touch:
	@rm -f $(EXTBINDIR)/xrootd

davix: $(EXTLIBDIR)/libdavix.so
davix.src: $(EXTSRCDIR)/davix/README.md

$(EXTSRCDIR)/davix/README.md:
	@$(DOWNLOAD) davix davix-0.7.4.tar.gz http://grid-deployment.web.cern.ch/grid-deployment/dms/lcgutil/tar/davix/0.7.4/davix-0.7.4.tar.gz
	@cd $(EXTSRCDIR)/davix && patch -p1 < $(PATCHDIR)/davix-disabletests.patch

$(EXTLIBDIR)/libdavix.so: $(EXTSRCDIR)/davix/README.md
	@echo "building davix"
	@mkdir -p $(EXTBUILDDIR)/davix
	@cd $(EXTBUILDDIR)/davix && $(CMAKE) $(EXTSRCDIR)/davix \
	    -DPython_ADDITIONAL_VERSIONS=3.8 -DPYTHON_EXECUTABLE=`which python3` \
	    -DUUID_INCLUDE_DIR=$(EXTINCDIR) -DUUID_LIBRARY=$(EXTCOMDIR)/lib/libuuid.so && \
	    make -j $(NPROCESSES) && make install

davix.clean:
	@echo "cleaning davix"
	@-cd $(EXTBUILDDIR)/davix 2>/dev/null && make clean
	@rm -rf $(EXTBUILDDIR)/davix $(EXTINCDIR)/davix $(EXTLIBDIR)/libdavix* $(EXTBINDIR)/davix*

davix.touch:
	@rm -f $(EXTLIBDIR)/libdavix.so

# dependencies for root
root: $(ROOTSYS)/bin/root
root.src: $(EXTSRCDIR)/root/README

# root download
$(EXTSRCDIR)/root/README:
	@$(DOWNLOAD) root root_v6.18.00.source.tar.gz https://root.cern.ch/download/root_v6.18.00.source.tar.gz
# some intel GPUs crash due to some problems with root and it's cache. This patch disables the DLCache for now
	@cd $(EXTSRCDIR)/root && patch -p1 < $(PATCHDIR)/root-8098-disable-dlcache.patch
# option to write root files that are reproducible
	@cd $(EXTSRCDIR)/root && patch -p1 < $(PATCHDIR)/root-reproducible-files.patch

# root build
$(ROOTSYS)/bin/root: $(EXTSRCDIR)/root/README
	@echo "building root"
	# make root/include directory a symlink to include/root
	@mkdir -p $(EXTINCDIR)/root $(ROOTSYS)
	@cd $(ROOTSYS) && ln -sfT $(call relpath,$(BELLE2_EXTERNALS_DIR)/include/root) include
	# now compile root and install into ROOTSYS
	@mkdir -p $(EXTBUILDDIR)/root
# ROOTCONFIG_EXTRA is an optional variable which can be externally set to supply arbitrary option so the ROOT
# build
	@cd $(EXTBUILDDIR)/root && $(CMAKE) $(EXTSRCDIR)/root -DCMAKE_INSTALL_PREFIX=$(EXTDIR)/root \
	    -DPython_ADDITIONAL_VERSIONS=3.8 -Dgminimal=ON -Dfail-on-missing=ON -DCMAKE_CXX_STANDARD=17 \
	    -DZLIB_LIBRARY=$(EXTCOMDIR)/lib/libz.so -DZLIB_INCLUDE_DIR=$(EXTINCDIR) -DDAVIX_LIBRARY=$(EXTLIBDIR)/libdavix.so \
	    -DDAVIX_INCLUDE_DIR=$(EXTINCDIR)/davix -DFFTW_INCLUDE_DIR=$(EXTINCDIR) -DFFTW_LIBRARY=$(EXTCOMDIR)/lib/libfftw3.so \
	    -Dasimage=ON -Dastiff=ON -Dtmva=ON -Dexception=ON -Dxrootd=ON -Droofit=ON -Dgsl_shared=ON -Dmemstat=ON -Dhttp=ON -Dfftw3=ON \
	    -Dmathmore=ON -Dpch=ON -Dpython=ON -Dshadowpw=ON -Dshared=ON -Dvdt=OFF -Dminuit2=ON -Ddavix=ON -Dbuiltin_freetype=OFF \
	    -Dssl=ON -Dthread=ON -Dxml=ON -Dgenvector=ON -Dbuiltin_davix=OFF -Dbuiltin_gsl=OFF -Dbuiltin_fftw3=OFF -Dbuiltin_lzma=OFF \
	    -Dbuiltin_lz4=OFF -Dfftw3=ON \
	    -DXROOTD_ROOT_DIR=$(EXTDIR) -DGSL_DIR=$(EXTCOMDIR) $(ROOT_OPTION) $(ROOTCONFIG_EXTRA) && \
	    make -j $(NPROCESSES) && make install
	#patch include/root/Rtypes.h to emit a warning if ClassImp is used
	@patch -p1 < $(PATCHDIR)/root-ClassImp-warning.patch
	@mkdir -p $(EXTDIR)/share/root/tmva && cp -a $(EXTSRCDIR)/root/tutorials/tmva/* $(EXTDIR)/share/root/tmva

# root clean command
root.clean:
	@echo "cleaning root"
	@-cd $(EXTBUILDDIR)/root 2>/dev/null && make clean
	@rm -rf $(EXTBUILDDIR)/root $(ROOTSYS) $(EXTDIR)/share/root

# root touch command
root.touch:
	@rm -f $(ROOTSYS)/bin/root


# dependencies for FastBDT TMVA plugin
fastbdt: $(EXTLIBDIR)/libFastBDT_shared.so
fastbdt.src: $(EXTSRCDIR)/FastBDT/README.md

# FastBDT download
$(EXTSRCDIR)/FastBDT/README.md:
	@$(DOWNLOAD) FastBDT FastBDT-5.2.tar.gz https://github.com/thomaskeck/FastBDT/archive/v5.2.tar.gz

# FastBDT TMVA plugin build
$(EXTLIBDIR)/libFastBDT_shared.so: $(EXTSRCDIR)/FastBDT/README.md
	@echo "building FastBDT TMVA plugin"
	@mkdir -p $(EXTBUILDDIR)/FastBDT
	cd $(EXTBUILDDIR)/FastBDT && $(CMAKE) $(EXTSRCDIR)/FastBDT && \
	    make install

# FastBDT TMVA plugin clean command
fastbdt.clean:
	@echo "cleaning FastBDT TMVA plugin"
	@-cd $(EXTBUILDDIR)/FastBDT 2>/dev/null && make clean
	@rm -f $(ROOTSYS)/lib/libTMVAFastBDT.so
	@rm -f $(ROOTSYS)/lib/TMVA_FastBDT_Dict_rdict.pcm
	@rm -f $(EXTLIBDIR)/libFastBDT* $(EXTINCDIR)/FastBDT.h

# FastBDT TMVA plugin touch command
fastbdt.touch:
	@rm -f $(ROOTSYS)/lib/libTMVAFastBDT.so


# dependencies for vgm
vgm: $(EXTLIBDIR)/libBaseVGM.so
vgm.src: $(EXTSRCDIR)/vgm

# vgm download
$(EXTSRCDIR)/vgm:
	@$(DOWNLOAD) vgm vgm.4.3.tar.gz  http://ivana.home.cern.ch/ivana/vgm.4.3.tar.gz
	@cd $(EXTSRCDIR)/vgm && patch -Np0 < $(PATCHDIR)/vgm.patch
	@cd $(EXTSRCDIR)/vgm && patch -p1 < $(PATCHDIR)/vgm-cpp14.patch

# vgm build
$(EXTLIBDIR)/libBaseVGM.so: $(EXTSRCDIR)/vgm
	@echo "building VGM"
	@mkdir -p $(EXTBUILDDIR)/vgm
	@cd $(EXTBUILDDIR)/vgm && $(CMAKE) -DCLHEP_DIR=$(EXTDIR) -DWITH_EXAMPLES=OFF\
	    -DROOT_DIR=$(ROOTSYS) -DROOT_INCLUDE_DIR=$(ROOTSYS)/include \
	    -DROOT_LIBRARY_DIR=$(ROOTSYS)/lib -DWITH_TEST=OFF $(EXTSRCDIR)/vgm && \
	    make -j $(NPROCESSES) && make install

# vgm clean
vgm.clean:
	@echo "cleaning VGM"
	@rm -rf $(EXTBUILDDIR)/vgm $(EXTDIR)/vgm $(EXTINCDIR)/vgm $(EXTLIBDIR)/lib*VGM.so

# vgm touch
vgm.touch:
	@rm -f $(EXTLIBDIR)/libBaseVGM.so

# dependencies for jemalloc
jemalloc: $(EXTLIBDIR)/libjemalloc.so
jemalloc.src: $(EXTSRCDIR)/jemalloc

# jemalloc download
$(EXTSRCDIR)/jemalloc:
	@$(DOWNLOAD) jemalloc jemalloc-5.2.0.tar.bz2 https://github.com/jemalloc/jemalloc/releases/download/5.2.0/jemalloc-5.2.0.tar.bz2

# jemalloc build
$(EXTLIBDIR)/libjemalloc.so: $(EXTSRCDIR)/jemalloc
	@echo "building jemalloc"
	@mkdir -p $(EXTBUILDDIR)/jemalloc
	@cd $(EXTBUILDDIR)/jemalloc && $(EXTSRCDIR)/jemalloc/configure $(CONFIGURE_COMMON_FLAGS) \
	    --prefix=$(EXTDIR) --includedir=$(EXTINCDIR) --libdir=$(EXTLIBDIR) \
	    --bindir=$(EXTBINDIR) --enable-prof --disable-initial-exec-tls && \
	    make -j $(NPROCESSES) && make install_lib install_bin install_include

# jemalloc clean
jemalloc.clean:
	@echo "cleaning jemalloc"
	@rm -rf $(EXTBUILDDIR)/jemalloc $(EXTDIR)/jemalloc $(EXTINCDIR)/jemalloc $(EXTLIBDIR)/libjemalloc*

# jemalloc touch
jemalloc.touch:
	@rm -f $(EXTLIBDIR)/libjemalloc.so

# dependencies for rave
rave: $(EXTLIBDIR)/libRaveBase.so
rave.src: $(EXTSRCDIR)/rave/README

# rave download
$(EXTSRCDIR)/rave/README:
	@$(DOWNLOAD) rave rave-0.6.25.tar.gz http://www.hepforge.org/archive/rave/rave-0.6.25.tar.gz
	@rm -rf $(EXTSRCDIR)/rave/src/boost $(EXTSRCDIR)/rave/src/ROOT/*/Math $(EXTSRCDIR)/rave/src/ROOT/genvector
	@cd $(EXTSRCDIR)/rave/src && ln -sf $(call relpath,$(BELLE2_EXTERNALS_DIR)/include/boost)
	@cd $(EXTSRCDIR)/rave/src/ROOT && ln -sf $(call relpath,$(BELLE2_EXTERNALS_DIR)/include/root) genvector
# and there's a weird monkey patch cc file we no longer want. This looks sane, right?
	@echo "" > $(EXTSRCDIR)/rave/src/ROOT/src/GenVector_Throw.cc
	@cd $(EXTSRCDIR)/rave/src/ROOT/mathcore && ln -sf $(call relpath,$(BELLE2_EXTERNALS_DIR)/include/root/Math)
	@cd $(EXTSRCDIR)/rave/src/ROOT/smatrix && ln -sf $(call relpath,$(BELLE2_EXTERNALS_DIR)/include/root/Math)
	@cd $(EXTSRCDIR)/rave/ && patch -p0 -i $(PATCHDIR)/rave-template-fix.patch
	# --binary option neeed, because the rave file to patch is stored with windows file endings convention
	@cd $(EXTSRCDIR)/rave/ && patch --binary -p0 -i $(PATCHDIR)/rave-silence-cout.patch
	# add std:: to isnan
	@cd $(EXTSRCDIR)/rave/ && patch -p1 -i $(PATCHDIR)/rave-glibc2.3-isnan.patch

# rave build
$(EXTLIBDIR)/libRaveBase.so: $(EXTSRCDIR)/rave/README
	@echo "building rave"
	@mkdir -p $(EXTBUILDDIR)/rave
	@cd $(EXTBUILDDIR)/rave && export LDFLAGS="`root-config --libs`" && CLHEPPATH=$(EXTDIR) CLHEPLIBPATH=$(EXTLIBDIR) CLHEP_VECTORLIBPATH=$(EXTLIBDIR) \
	    CLHEP_MATRIXLIBPATH=$(EXTLIBDIR) CXXFLAGS="-std=c++11" $(EXTSRCDIR)/rave/configure $(CONFIGURE_COMMON_FLAGS) \
	    --disable-java --prefix=$(EXTDIR) --includedir=$(EXTINCDIR) --libdir=$(EXTLIBDIR) --bindir=$(EXTBINDIR) \
	    --with-clhep=$(EXTDIR) --with-clhep-libdir=$(EXTLIBDIR) --with-boost=$(EXTDIR) && \
	    make -j $(NPROCESSES) && make install
	#Fix absolute path in .cmake file/RaveConfig.cmake:
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$$ENV{BELLE2_EXTERNALS_DIR}:g" $(EXTDIR)/share/rave/RaveConfig.cmake

# rave clean
rave.clean:
	@echo "cleaning rave"
	@-cd $(EXTBUILDDIR)/rave 2>/dev/null && make clean
	@rm -rf $(EXTLIBDIR)/libRave* $(EXTINCDIR)/rave

# rave touch
rave.touch:
	@rm -f $(EXTLIBDIR)/libRaveBase.so


# dependencies for MillepedeII
MillepedeII: $(EXTBINDIR)/pede
MillepedeII.src: $(EXTSRCDIR)/MillepedeII/WIKI

# MillepedeII download
$(EXTSRCDIR)/MillepedeII/WIKI:
	@$(DOWNLOAD) MillepedeII MillepedeII_V04-05-01.tgz svn:checkout:174:http://svnsrv.desy.de/public/MillepedeII/tags/V04-05-01

# MillepedeII build
$(EXTBINDIR)/pede: $(EXTSRCDIR)/MillepedeII/WIKI
	@echo "building MillepedeII"
	@cp -fa $(EXTSRCDIR)/MillepedeII $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/MillepedeII && make pede CXXFLAGS="$(CONFIGURE_CXXFLAGS)" \
	  ZLIB_INCLUDES_DIR=$(EXTINCDIR) ZLIB_LIBS_DIR=$(EXTLIBDIR) && \
	  cp pede $(EXTBINDIR)/

# MillepedeII clean
MillepedeII.clean:
	@echo "cleaning MillepedeII"
	@-cd $(EXTBUILDDIR)/MillepedeII 2>/dev/null && make clean
	@rm -f $(EXTBUILDDIR)/pede $(EXTBINDIR)/pede

# MillepedeII touch
MillepedeII.touch:
	@rm -f $(EXTBINDIR)/pede


# dependencies for HepMC
hepmc: $(EXTLIBDIR)/libHepMC.so
hepmc.src: $(EXTSRCDIR)/hepmc

# HepMC download
$(EXTSRCDIR)/hepmc:
	@$(DOWNLOAD) hepmc HepMC-2.06.09.tar.gz http://lcgapp.cern.ch/project/simu/HepMC/download/HepMC-2.06.09.tar.gz

# HepMC build
$(EXTLIBDIR)/libHepMC.so: $(EXTSRCDIR)/hepmc
	@echo "building HepMC"
	@mkdir -p $(EXTBUILDDIR)/hepmc
	@cd $(EXTBUILDDIR)/hepmc && $(CMAKE) \
	    -Dmomentum:STRING=GEV -Dlength:STRING=CM $(EXTSRCDIR)/hepmc && \
	    make -j $(NPROCESSES) && make install

# HepMC clean
hepmc.clean:
	@echo "cleaning HepMC"
	@-cd $(EXTBUILDDIR)/hepmc 2>/dev/null && make clean
	@rm -rf $(EXTDIR)/hepmc $(EXTBUILDDIR)/hepmc $(EXTLIBDIR)/libHepMC* $(EXTLIBDIR)/libhepmC* $(EXTINCDIR)/HepMC

# HepMC touch
hepmc.touch:
	@rm -f $(EXTLIBDIR)/libHepMC.so


# dependencies for Pythia
pythia: $(EXTLIBDIR)/libpythia8.so
pythia.src: $(EXTSRCDIR)/pythia/configure

# Pythia download
$(EXTSRCDIR)/pythia/configure:
	@$(DOWNLOAD) pythia pythia8215.tgz http://home.thep.lu.se/~torbjorn/pythia8/pythia8215.tgz

# Pythia build
$(EXTLIBDIR)/libpythia8.so: $(EXTSRCDIR)/pythia/configure
	@echo "building Pythia"
	@cp -fa $(EXTSRCDIR)/pythia $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/pythia && ./configure $(CONFIGURE_COMMON_FLAGS) --prefix=$(EXTDIR) \
	    --enable-shared --with-hepmc2=$(EXTDIR) && \
	    make -j $(NPROCESSES) && make install
	#Fix absolute path in pythia8-config and make it executable
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$${BELLE2_EXTERNALS_DIR}:g" $(EXTBINDIR)/pythia8-config
	@sed -i "s:\$$PREFIX/Makefile.inc:\$$PREFIX/share/Pythia8/examples/Makefile.inc:g" $(EXTBINDIR)/pythia8-config
	@chmod a+x $(EXTBINDIR)/pythia8-config

# Pythia clean
pythia.clean:
	@echo "cleaning Pythia"
	@-cd $(EXTBUILDDIR)/pythia 2>/dev/null && make clean
	@rm -rf $(EXTDIR)/pythia $(EXTLIBDIR)/libpythia* $(EXTINCDIR)/Pythia8* $(EXTDIR)/share/pythia

# Pythia touch
pythia.touch:
	@rm -f $(EXTLIBDIR)/libpythia8.so


# dependencies for Photos
photos: $(EXTLIBDIR)/libPhotosCxxInterface.so
photos.src: $(EXTSRCDIR)/PHOTOS/configure

# Photos download
$(EXTSRCDIR)/PHOTOS/configure:
	@$(DOWNLOAD) PHOTOS PHOTOS.3.56.tar.gz http://photospp.web.cern.ch/photospp/resources/PHOTOS.3.56/PHOTOS.3.56.tar.gz
	@cd $(EXTSRCDIR)/PHOTOS && patch -Np0 < $(PATCHDIR)/photos.patch

# Photos build
$(EXTLIBDIR)/libPhotosCxxInterface.so: $(EXTSRCDIR)/PHOTOS/configure
	@echo "building Photos"
	@cp -fa $(EXTSRCDIR)/PHOTOS $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/PHOTOS && ./configure $(CONFIGURE_COMMON_FLAGS) --prefix=$(EXTDIR) --with-hepmc=$(EXTDIR) && \
	    make -j $(NPROCESSES) && make install

# Photos clean
photos.clean:
	@echo "cleaning Photos"
	@-cd $(EXTBUILDDIR)/PHOTOS 2>/dev/null && make clean
	@rm -rf $(EXTDIR)/photos $(EXTLIBDIR)/libPhotos* $(EXTINCDIR)/Photos

# Photos touch
photos.touch:
	@rm -f $(EXTLIBDIR)/libPhotosCxxInterface.so


# dependencies for Tauola
tauola: $(EXTLIBDIR)/libTauolaCxxInterface.so
tauola.src: $(EXTSRCDIR)/TAUOLA/configure

# Tauola download
$(EXTSRCDIR)/TAUOLA/configure:
	@$(DOWNLOAD) TAUOLA TAUOLA.1.1.4.tar.gz http://tauolapp.web.cern.ch/tauolapp/resources/TAUOLA.1.1.4/TAUOLA.1.1.4.tar.gz

# Tauola build
$(EXTLIBDIR)/libTauolaCxxInterface.so: $(EXTSRCDIR)/TAUOLA/configure
	@echo "building Tauola"
	@cp -fa $(EXTSRCDIR)/TAUOLA $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/TAUOLA && ./configure $(CONFIGURE_COMMON_FLAGS) --prefix=$(EXTDIR) --with-hepmc=$(EXTDIR) && \
	    make && make install

# Tauola clean
tauola.clean:
	@echo "cleaning Tauola"
	@-cd $(EXTBUILDDIR)/TAUOLA 2>/dev/null && make clean
	@rm -rf $(EXTDIR)/tauola $(EXTLIBDIR)/libTauola* $(EXTINCDIR)/Tauola

# Tauola touch
tauola.touch:
	@rm -f $(EXTLIBDIR)/libTauolaCxxInterface.so


# dependencies for EvtGen
evtgen: $(EXTLIBDIR)/libEvtGen.so
evtgen.src: $(EXTSRCDIR)/evtgen/configure

# EvtGen download
$(EXTSRCDIR)/evtgen/configure:
	@$(DOWNLOAD) EvtGen EvtGen.R01-04-00.tar.gz http://evtgen.warwick.ac.uk/static/srcrep/R01-04-00/EvtGen.R01-04-00.tar.gz
	@mv $(EXTSRCDIR)/EvtGen/R01-04-00 $(EXTSRCDIR)/evtgen
	@rmdir $(EXTSRCDIR)/EvtGen
	@cd $(EXTSRCDIR)/evtgen && patch -Np0 < $(PATCHDIR)/evtgen.patch
	@cd $(EXTSRCDIR)/evtgen && patch -p1 < $(PATCHDIR)/evtgen.pdl-R01-07-00+BII-3296.patch
	@cd $(EXTSRCDIR)/evtgen && patch -p1 < $(PATCHDIR)/evtgen-BII-4471-emptyline.patch

# EvtGen build
$(EXTLIBDIR)/libEvtGen.so: $(EXTSRCDIR)/evtgen/configure
	@echo "building EvtGen"
	@cp -fa $(EXTSRCDIR)/evtgen $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/evtgen && ./configure $(CONFIGURE_COMMON_FLAGS) \
	    --hepmcdir=$(EXTDIR) --pythiadir=$(EXTDIR) \
	    --photosdir=$(EXTDIR) --tauoladir=$(EXTDIR) && \
	    make -j $(NPROCESSES) lib_shared && make all
	# install ourselves as evtgen stuff is expected in share/evtgen but
	# evtgen has no option to install that way
	@cd $(EXTBUILDDIR)/evtgen && \
	    cp -fr lib/* $(EXTLIBDIR) && \
	    cp -fr EvtGen EvtGenBase EvtGenModels EvtGenExternal $(EXTINCDIR) && \
	    mkdir -p $(EXTDIR)/share/evtgen && cp -fr *.DEC *.XML evt.pdl $(EXTDIR)/share/evtgen
	@cd $(EXTDIR)/share/evtgen && cp DECAY_2010.DEC DECAY.DEC

# EvtGen clean
evtgen.clean:
	@echo "cleaning EvtGen"
	@-cd $(EXTBUILDDIR)/evtgen 2>/dev/null && make clean
	@rm -rf $(EXTDIR)/evtgen $(EXTLIBDIR)/libEvtGen* $(EXTINCDIR)/evtgen $(EXTDIR)/share/evtgen

# EvtGen touch
evtgen.touch:
	@rm -f $(EXTLIBDIR)/libEvtGen.so


# dependencies for MadGraph
madgraph: $(EXTBINDIR)/mg5_aMC
madgraph.src: $(EXTSRCDIR)/madgraph/VERSION

$(EXTSRCDIR)/madgraph/VERSION:
	@$(DOWNLOAD) madgraph MG5_aMC_v2.7.2.tar.gz https://launchpad.net/mg5amcnlo/2.0/2.7.x/+download/MG5_aMC_v2.7.2.tar.gz
	@$(DOWNLOAD) madgraph/PLUGIN/MGISR MGISR-git-a48b612.tar.gz https://github.com/qliphy/MGISR/tarball/a48b612
	@cd src/madgraph && patch -p1 < $(PATCHDIR)/madgraph-disable_html_opening.patch
	@cd src/madgraph && patch -p0 < $(PATCHDIR)/madgraph-gcc8.patch

# MadGraph developer's kit installation.
$(EXTBINDIR)/mg5_aMC: $(EXTSRCDIR)/madgraph/VERSION
	@rm -fr $(EXTDIR)/madgraph
	@cp -fa $(EXTSRCDIR)/madgraph $(EXTDIR)/madgraph
	# add symlink in bin dir
	@cd $(EXTBINDIR) && ln -sf ../madgraph/bin/mg5_aMC
# run madgraph once to create the config files it needs ... cvmfs is read only after all
	$(EXTBINDIR)/mg5_aMC < /dev/null

madgraph.clean madgraph.touch:
	@rm -fr $(EXTDIR)/madgraph $(EXTBINDIR)/mg5_aMC

# dependencies for CRY
cry: $(EXTLIBDIR)/libCRY.a
cry.src: $(EXTSRCDIR)/cry/README

# CRY download
$(EXTSRCDIR)/cry/README:
	@$(DOWNLOAD) cry cry_v1.7.tar.gz http://nuclear.llnl.gov/simulation/cry_v1.7.tar.gz
	@cd $(EXTSRCDIR)/cry && patch -Np0 < $(PATCHDIR)/cry.patch

# CRY build
$(EXTLIBDIR)/libCRY.a: $(EXTSRCDIR)/cry/README
	@echo "building CRY"
	@cp -fa $(EXTSRCDIR)/cry $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/cry && CXXFLAGS="$(CONFIGURE_CXXFLAGS)" make
	@cp $(EXTBUILDDIR)/cry/lib/libCRY.* $(EXTLIBDIR)/
	@mkdir -p $(EXTINCDIR)/cry && cp -a $(EXTBUILDDIR)/cry/src/*.h $(EXTINCDIR)/cry/

# CRY clean
cry.clean:
	@echo "cleaning CRY"
	@-cd $(EXTBUILDDIR)/cry 2>/dev/null && make clean
	@rm -rf $(EXTLIBDIR)/libCRY.* $(EXTINCDIR)/cry

# CRY touch
cry.touch:
	@rm -f $(EXTLIBDIR)/libCRY.a


# dependencies for FLC
flc: $(EXTLIBDIR)/libComplexPDF.so
flc.src: $(EXTSRCDIR)/FLC/README

# FLC download
$(EXTSRCDIR)/FLC/README:
	@$(DOWNLOAD) FLC BELLE_FLC_1.1.tar.gz http://www-ekp.physik.uni-karlsruhe.de/~mprim/BELLE_FLC/BELLE_FLC_1.1.tar.gz
	@cd $(EXTSRCDIR)/FLC && patch -Np0 < $(PATCHDIR)/FLC.patch

# FLC build, FIXME: make clean? delete folder first?
$(EXTLIBDIR)/libComplexPDF.so: $(EXTSRCDIR)/FLC/README
	@echo "building FLC"
	@cp -fa $(EXTSRCDIR)/FLC $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/FLC && ./make.sh -j $(NPROCESSES) CXX=$(CXX) OPT=$(CONFIGURE_CXXFLAGS) OPT+=-I$(ROOTSYS)/include BOOST_INC=-I$(EXTINCDIR) BOOST_LIB=-L$(EXTLIBDIR)
	@cp $(EXTBUILDDIR)/FLC/lib/* $(EXTLIBDIR)/
	@cp -a $(EXTBUILDDIR)/FLC/include $(EXTINCDIR)

# flc clean
flc.clean:
	@echo "cleaning FLC"
	@-cd $(EXTBUILDDIR)/FLC 2>/dev/null && ./make.sh clean
	@rm -rf $(EXTLIBDIR)/lib*ComplexPDF.so $(EXTINCDIR)

# flc touch command
flc.touch:
	@rm -rf $(EXTLIBDIR)/libComplexPDF.so



# dependencies for eigen
eigen: $(EXTINCDIR)/Eigen/Eigen
eigen.src: $(EXTSRCDIR)/eigen/INSTALL

# eigen download
$(EXTSRCDIR)/eigen/INSTALL:
	@$(DOWNLOAD) eigen eigen_3.3.7.tar.bz2 http://bitbucket.org/eigen/eigen/get/3.3.7.tar.bz2
	@cd $(EXTSRCDIR)/eigen && patch -p1 < $(PATCHDIR)/eigen-installdir.patch

# eigen build
$(EXTINCDIR)/Eigen/Eigen: $(EXTSRCDIR)/eigen/INSTALL
	@echo "installing eigen"
	@mkdir -p $(EXTBUILDDIR)/eigen
	@cd $(EXTBUILDDIR)/eigen && $(CMAKE) $(EXTSRCDIR)/eigen -DINCLUDE_INSTALL_DIR=include \
	    -DCMAKEPACKAGE_INSTALL_DIR=$(EXTLIBDIR)/cmake/Eigen3 -DPKGCONFIG_INSTALL_DIR=$(EXTLIBDIR)/pkgconfig \
	    -DBOOST_ROOT=$(EXTDIR) -DBoost_NO_SYSTEM_PATHS=ON && \
	    make -j $(NPROCESSES); make install

# eigen clean
eigen.clean:
	@echo "cleaning eigen"
	@rm -rf $(EXTINCDIR)/Eigen

# eigen touch
eigen.touch:
	@rm -rf $(EXTINCDIR)/Eigen/Eigen


# dependencies for belle_legacy
belle_legacy: $(EXTLIBDIR)/libbelle_legacy.so
belle_legacy.src: $(EXTSRCDIR)/belle_legacy

# belle_legacy download
$(EXTSRCDIR)/belle_legacy:
	@$(DOWNLOAD) belle_legacy belle_legacy-v1.10.tar.gz git:tags/v1.10:$(BELLE2_GIT_SERVER)/b2g/belle_legacy.git

# belle_legacy build
$(EXTLIBDIR)/libbelle_legacy.so: $(EXTSRCDIR)/belle_legacy
	@echo "installing belle_legacy"
	@cp -fa $(EXTSRCDIR)/belle_legacy $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/belle_legacy && make -j $(NPROCESSES) && \
	    make install

# belle_legacy clean
belle_legacy.clean:
	@echo "cleaning belle_legacy"
	@-cd $(EXTBUILDDIR)/belle_legacy 2>/dev/null && make clean
	@rm -rf $(EXTINCDIR)/belle_legacy $(EXTDIR)/share/belle_legacy $(EXTLIBDIR)/libbelle_legacy.*

# belle_legacy touch
belle_legacy.touch:
	@rm -rf $(EXTLIBDIR)/libbelle_legacy.so


# dependencies for curl
curl: $(EXTLIBDIR)/libcurl.so
curl.src: $(EXTSRCDIR)/curl/README

# curl download
$(EXTSRCDIR)/curl/README:
	@$(DOWNLOAD) curl curl-7.69.1.tar.bz2 http://curl.haxx.se/download/curl-7.69.1.tar.bz2

# curl build
$(EXTLIBDIR)/libcurl.so: $(EXTSRCDIR)/curl/README
	@echo "building curl"
	@cp -fa $(EXTSRCDIR)/curl $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/curl && ./configure $(CONFIGURE_COMMON_FLAGS) \
	    --prefix=$(EXTDIR) --includedir=$(EXTINCDIR) --libdir=$(EXTLIBDIR) \
	    --bindir=$(EXTBINDIR) --datarootdir=$(EXTDIR)/share/curl && \
	    make -j $(NPROCESSES) && make install
	#Fix absolute path in curl-config
	@sed -i "s:$(BELLE2_EXTERNALS_DIR):\$${BELLE2_EXTERNALS_DIR}:g" $(EXTBINDIR)/curl-config

# curl clean
curl.clean:
	@echo "cleaning curl"
	@-cd $(EXTBUILDDIR)/curl 2>/dev/null && make uninstall && make clean
	@rm -rf $(EXTINCDIR)/curl $(EXTDIR)/share/curl

# curl touch
curl.touch:
	@rm -rf $(EXTLIBDIR)/libcurl.so

git: $(EXTBINDIR)/git
git.src: $(EXTSRCDIR)/git
git.touch:
	@rm -f $(EXTBINDIR)/git
git.clean:
	@rm -fr $(EXTBUILDDIR)/git

$(EXTSRCDIR)/git:
	@$(DOWNLOAD) git git-2.25.2.tar.xz https://www.kernel.org/pub/software/scm/git/git-2.25.2.tar.xz

# compile git but we don't want to require gettext to be installed so we
# compile without localization support by setting NO_GETTEXT=yes for
# compilation and installation (otherwise git sill see that flags have changed
# and recompile). Also, add --with-tcltk. This will actually check if tcl/tk is
# installed and only build gui if so. Without this flag the gui is always built
# but needs gettext to compile if tcl/tk cannot be found
$(EXTBINDIR)/git: $(EXTSRCDIR)/git
	@echo "building git"
	@cp -fa $(EXTSRCDIR)/git $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/git && ./configure $(CONFIGURE_COMMON_FLAGS) \
	    --prefix=$(EXTDIR) --with-curl=$(EXTDIR) --with-tcltk && \
	    make -j $(NPROCESSES) NO_GETTEXT=yes NO_INSTALL_HARDLINKS=yes && \
	    make NO_GETTEXT=yes NO_INSTALL_HARDLINKS=yes install

# FANN: Fast Artificial Neural Network Library
fann: $(EXTLIBDIR)/libfann.so
fann.src: $(EXTSRCDIR)/fann/README.md
fann.touch:
	@rm -f $(EXTLIBDIR)/libfann.so

# remove FANN, run in bash to have brace expansion
fann.clean:
	@bash -c "rm -fr $(EXTBUILDDIR)/fann $(EXTINCDIR)/{,fixed,float,double,parallel_}fann.h* \
	    $(EXTINCDIR)/fann_*.h $(EXTLIBDIR)/lib{,fixed,float,double}fann*.so \
	    $(EXTLIBDIR)/pkgconfig/fann.pc $(EXTLIBDIR)/cmake/fann"

# FANN 2.2.0 is outdated so get 2.2.0 plus the changes up to commit 8ae6bb0
$(EXTSRCDIR)/fann/README.md:
	@$(DOWNLOAD) fann fann-2.2.0+git8ae6bb0.tar.gz https://github.com/libfann/fann/tarball/8ae6bb0

$(EXTLIBDIR)/libfann.so: $(EXTSRCDIR)/fann/README.md
	@mkdir -p $(EXTBUILDDIR)/fann
	@cd $(EXTBUILDDIR)/fann && $(CMAKE) $(EXTSRCDIR)/fann \
	    -DPython_ADDITIONAL_VERSIONS=3.8 -DPYTHON_EXECUTABLE=`which python3` && \
	    make -j $(NPROCESSES); make install

# astyle: C/C++ code beautifier
astyle: $(EXTBINDIR)/astyle
astyle.src: $(EXTSRCDIR)/astyle/build/gcc/Makefile
astyle.touch:
	@rm -f $(EXTBINDIR)/astyle

$(EXTSRCDIR)/astyle/build/gcc/Makefile:
	@$(DOWNLOAD) astyle astyle_2.05.1_linux.tar.gz http://downloads.sourceforge.net/project/astyle/astyle/astyle%202.05.1/astyle_2.05.1_linux.tar.gz

$(EXTBINDIR)/astyle: $(EXTSRCDIR)/astyle/build/gcc/Makefile
	@echo "building astyle"
	@cp -fa $(EXTSRCDIR)/astyle/ $(EXTBUILDDIR)
# astyle tries to install with $(USER) as owner and group which does not work
# everywhere so we override it's install command to not include ownership
# arguments.
	@cd $(EXTBUILDDIR)/astyle/build/gcc && make -j $(NPROCESSES) && \
	    make prefix=$(EXTDIR) INSTALL=install install

# dependencies for zeromq
zeromq: $(EXTLIBDIR)/libzmq.so
zeromq.src: $(EXTSRCDIR)/zeromq/INSTALL

# zeromq download
$(EXTSRCDIR)/zeromq/INSTALL:
	@$(DOWNLOAD) zeromq zeromq-4.3.2.tar.gz https://github.com/zeromq/libzmq/releases/download/v4.3.2/zeromq-4.3.2.tar.gz

# zeromq build
$(EXTLIBDIR)/libzmq.so: $(EXTSRCDIR)/zeromq/INSTALL
	@echo "building zeromq"
	@cp -fa $(EXTSRCDIR)/zeromq $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/zeromq && ./configure $(CONFIGURE_COMMON_FLAGS) \
		--prefix=$(EXTDIR) && \
		make -j $(NPROCESSES) install

# zeromq clean
zeromq.clean:
	@echo "cleaning zeromq"
	@rm -rf $(EXTBUILDDIR)/zeromq

# zeromq touch
zeromq.touch:
	@rm -f $(EXTLIBDIR)/libzmq.so


#depenedcies for cppzmq, the C++ bindings for zeromq
cppzmq: $(EXTINCDIR)/zmq.hpp
cppzmq.src: $(EXTSRCDIR)/cppzmq/zmq.hpp

# cppzmq download
$(EXTSRCDIR)/cppzmq/zmq.hpp:
	$(DOWNLOAD) cppzmq cppzmq-v4.3.6.tar.gz https://github.com/zeromq/cppzmq/archive/v4.6.0.tar.gz

# cppzmq copy .hpp file to include folder
$(EXTINCDIR)/zmq.hpp: $(EXTSRCDIR)/cppzmq/zmq.hpp
	@echo "installing cppzmq"
	@cp -f $(EXTSRCDIR)/cppzmq/zmq*.hpp $(EXTINCDIR)/

# remove installed .hpp file
cppzmq.touch:
	@rm -rf $(EXTINCDIR)/zmq.hpp

# remove downloaded header file
cppzmq.clean:
	@echo "cleaning cppzmq"
	@rm -rf $(EXTSRCDIR)/cppzmq/zmq.hpp

gsl: $(EXTBINDIR)/gsl-config
gsl.src: $(EXTSRCDIR)/gsl

$(EXTSRCDIR)/gsl:
	$(DOWNLOAD) gsl gsl-2.5.tar.gz http://ftpmirror.gnu.org/gsl/gsl-2.5.tar.gz

$(EXTBINDIR)/gsl-config: $(EXTSRCDIR)/gsl
	@cp -fa $< $(EXTBUILDDIR)
	@cd $(EXTBUILDDIR)/gsl && ./configure $(CONFIGURE_COMMON_FLAGS) \
	    --prefix=$(EXTDIR) --enable-silent-rules && \
	    make -j $(NPROCESSES) && make install$(INSTALL_TARGET_SUFFIX)

gsl.touch:
	@rm -fr $(EXTBINDIR)/gsl-config

gsl.clean:
	@rm -fr $(EXTBINDIR)/gsl-* $(EXTLIBDIR)/libgsl* $(EXTINCDIR)/gsl

hdf5.src: $(EXTSRCDIR)/hdf5/CMakeLists.txt
hdf5: $(EXTBINDIR)/h5ls
hdf5.touch:
	@rm -fr $(EXTBINDIR)/h5*
hdf5.clean:
	@rm -fr $(EXTBINDIR)/h5* $(EXTLIBDIR)/libhdf5* $(EXTINCDIR)/hdf5

$(EXTSRCDIR)/hdf5/CMakeLists.txt:
	$(DOWNLOAD) hdf5 hdf5-1.10.6.tar.bz2 https://www.hdfgroup.org/package/hdf5-1-10-6-tar-bz2/?wpdmdl=14134

$(EXTBINDIR)/h5ls: $(EXTSRCDIR)/hdf5/CMakeLists.txt
	@echo "installing hdf5"
	@mkdir -p $(EXTBUILDDIR)/hdf5
	@cd $(EXTBUILDDIR)/hdf5 && $(CMAKE) $(EXTSRCDIR)/hdf5 && \
	    make -j $(NPROCESSES); make install

fftw3.src: $(EXTSRCDIR)/fftw3/configure
fftw3: $(EXTBINDIR)/fftw-wisdom
fftw3.touch:
	@rm -fr $(EXTBINDIR)/fftw-wisdom
fftw3.clean:
	@rm -fr $(EXTBINDIR)/fftw-wisdom $(EXTLIBDIR)/libfftw* $(EXTINCDIR)/fftw3

$(EXTSRCDIR)/fftw3/configure:
	$(DOWNLOAD) fftw3 fftw-3.3.8.tar.gz http://www.fftw.org/fftw-3.3.8.tar.gz

$(EXTBINDIR)/fftw-wisdom: $(EXTSRCDIR)/fftw3/configure
	@mkdir -p $(EXTBUILDDIR)/fftw3
	@cd $(EXTBUILDDIR)/fftw3 && $(EXTSRCDIR)/fftw3/configure $(CONFIGURE_COMMON_FLAGS) \
	    --prefix=$(EXTDIR) --includedir=$(EXTINCDIR) --libdir=$(EXTLIBDIR) \
	    --bindir=$(EXTBINDIR) --enable-shared --enable-silent-rules \
	    --enable-sse2 --enable-avx --enable-avx2 \
	    --enable-avx512 --enable-avx-128-fma && \
	    make -j $(NPROCESSES); make install$(INSTALL_TARGET_SUFFIX)

yaml-cpp.src: $(EXTSRCDIR)/yaml-cpp/CMakeLists.txt
yaml-cpp: $(EXTLIBDIR)/libyaml-cpp.so
yaml-cpp.touch:
	@rm -fr $(EXTLIBDIR)/libyaml-cpp.so
yaml-cpp.clean:
	@rm -fr $(EXTLIBDIR)/libyaml-cpp* $(EXTINCDIR)/yaml-cpp

$(EXTSRCDIR)/yaml-cpp/CMakeLists.txt:
	$(DOWNLOAD) yaml-cpp yaml-cpp-0.6.2.tar.gz https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-0.6.2.tar.gz

$(EXTLIBDIR)/libyaml-cpp.so: $(EXTSRCDIR)/yaml-cpp/CMakeLists.txt
	@echo "installing yaml-cpp"
	@mkdir -p $(EXTBUILDDIR)/yaml-cpp
	@cd $(EXTBUILDDIR)/yaml-cpp && $(CMAKE) $(EXTSRCDIR)/yaml-cpp \
	  -DPython_ADDITIONAL_VERSIONS=3.8 -DPYTHON_EXECUTABLE=`which python3` \
	  -DBUILD_SHARED_LIBS=ON -DYAML_CPP_BUILD_TOOLS=OFF && \
	    make -j $(NPROCESSES); make install

eos: $(EXTLIBDIR)/libeos.so
eos.src: $(EXTSRCDIR)/eos/configure
eos.touch:
	@rm -fr $(EXTLIBDIR)/libeos.so
eos.clean:
	@rm -fr $(EXTBINDIR)/eos-* $(EXTLIBDIR)/libeos* $(EXTINCDIR)/eos

$(EXTSRCDIR)/eos/configure:
	$(DOWNLOAD) eos eos-0.2.4.tar.gz https://github.com/eos/eos/releases/download/v0.2.4/eos-0.2.4.tar.gz
	@cd $(EXTSRCDIR)/eos && patch -p1 < $(PATCHDIR)/eos-hdf5dependency.patch
	@cd $(EXTSRCDIR)/eos && ./autogen.bash

# needs gsl, hdf5 yaml-cpp fftw3
$(EXTLIBDIR)/libeos.so: $(EXTSRCDIR)/eos/configure
	@echo "building eos"
	@mkdir -p $(EXTBUILDDIR)/eos
	@cd $(EXTBUILDDIR)/eos && $(EXTSRCDIR)/eos/configure $(CONFIGURE_COMMON_FLAGS) --with-boost-python-suffix=36 \
	    PYTHON=python3 --prefix=$(EXTDIR) --includedir=$(EXTINCDIR) --libdir=$(EXTLIBDIR) \
	    --bindir=$(EXTBINDIR) --disable-pmc --with-minuit2=$(ROOTSYS) --enable-python --with-gsl=$(EXTCOMDIR) \
	    --with-hdf5=$(EXTCOMDIR) --enable-silent-rules && \
	    make -j $(NPROCESSES) && make install$(INSTALL_TARGET_SUFFIX)

epics.src: $(EXTSRCDIR)/epics/README
epics: $(EXTDIR)/epics/bin/linux-x86_64/caget
epics.touch:
	@rm -fr $(EXTDIR)/epics
epics.clean:
	@rm -fr $(EXTDIR)/epics

$(EXTSRCDIR)/epics/README:
	$(DOWNLOAD) epics epics-base-7.0.2.2.tar.gz https://epics.anl.gov/download/base/base-7.0.2.2.tar.gz

$(EXTDIR)/epics/bin/linux-x86_64/caget: $(EXTSRCDIR)/epics/README
	@cp -fa $(EXTSRCDIR)/epics $(EXTBUILDDIR)
	cd $(EXTBUILDDIR)/epics && \
	    sed -i -e "s|#INSTALL_LOCATION.*|INSTALL_LOCATION=$(EXTDIR)/epics|g" configure/CONFIG_SITE && \
	    sed -i -e "s|^GNU_DIR\s*=.*|GNU_DIR = $(EXTCOMDIR)|g" configure/CONFIG_COMMON && \
	    make -j $(NPROCESSES) EPICS_HOST_ARCH=linux-x86_64
	cd $(EXTBUILDDIR)/epics/modules/libcom/src/osi/compiler && \
	    install -m 644 -D clang/compilerSpecific.h $(EXTDIR)/epics/include/compiler/clang/compilerSpecific.h && \
	    install -m 644 -D clang/epicsAtomicCD.h $(EXTDIR)/epics/include/compiler/clang/epicsAtomicCD.h && \
	    install -m 644 -D default/compilerSpecific.h $(EXTDIR)/epics/include/compiler/default/compilerSpecific.h && \
	    install -m 644 -D default/epicsAtomicCD.h $(EXTDIR)/epics/include/compiler/default/epicsAtomicCD.h

rclone.src: $(EXTSRCDIR)/rclone/README.txt
rclone: $(EXTBINDIR)/rclone
rclone.touch:
	@rm -fr $(EXTBINDIR)/rclone
rclone.clean:
	@rm -fr $(EXTBINDIR)/rclone $(EXTDIR)/share/man/man1/rclone.1

$(EXTSRCDIR)/rclone/README.txt:
	$(DOWNLOAD) rclone rclone-v1.48.0-linux-amd64.zip https://downloads.rclone.org/v1.48.0/rclone-v1.48.0-linux-amd64.zip

$(EXTBINDIR)/rclone: $(EXTSRCDIR)/rclone/README.txt
	@echo "installing rclone"
	@install -s $(EXTSRCDIR)/rclone/rclone $(EXTBINDIR)
	@install -m 644 $(EXTSRCDIR)/rclone/rclone.1 $(EXTDIR)/share/man/man1

git-lfs.src: $(EXTSRCDIR)/git-lfs/README.md
git-lfs: $(EXTBINDIR)/git-lfs
git-lfs.touch:
	@rm -fr $(EXTBINDIR)/git-lfs
git-lfs.clean:
	@rm -fr $(EXTBINDIR)/git-lfs

$(EXTSRCDIR)/git-lfs/README.md:
	$(DOWNLOAD) git-lfs git-lfs-linux-amd64-v2.7.2.tar.gz https://github.com/git-lfs/git-lfs/releases/download/v2.7.2/git-lfs-linux-amd64-v2.7.2.tar.gz

$(EXTBINDIR)/git-lfs: $(EXTSRCDIR)/git-lfs/README.md
	@echo "installing git-lfs"
	@install -s $(EXTSRCDIR)/git-lfs/git-lfs $(EXTBINDIR)
# install the filters system wide but not in the current directory otherwise it adds hooks to .git
	@cd /tmp && git lfs install --system

bazel.src: $(EXTSRCDIR)/bazel/compile.sh
bazel: $(EXTBINDIR)/bazel
bazel.touch:
	@rm -fr $(EXTBINDIR)/bazel
bazel.clean:
	@rm -fr $(EXTBINDIR)/bazel

$(EXTSRCDIR)/bazel/compile.sh:
	$(DOWNLOAD) bazel bazel-0.25.2-dist.zip https://github.com/bazelbuild/bazel/releases/download/0.25.2/bazel-0.25.2-dist.zip

$(EXTBINDIR)/bazel: $(EXTSRCDIR)/bazel/compile.sh
	cd $(EXTSRCDIR)/bazel && export EXTRA_BAZEL_ARGS="--jobs $(NPROCESSES)" && ./compile.sh && \
	  mv output/bazel $(EXTBINDIR)

tensorflow.src: $(EXTSRCDIR)/tensorflow/configure
tensorflow.touch:
	@rm -fr $(EXTSRCDIR)/tensorflow-1.14.0-cp36-cp36m-linux_x86_64.whl $(EXTSRCDIR)/.tensorflow-installed
tensorflow.clean:
	@rm -fr $(EXTSRCDIR)/tensorflow-1.14.0-cp36-cp36m-linux_x86_64.whl $(EXTSRCDIR)/.tensorflow-installed \
	  $(EXTSRCDIR)/tensorflow
tensorflow: $(EXTSRCDIR)/.tensorflow-installed

$(EXTSRCDIR)/.tensorflow-installed: $(EXTSRCDIR)/tensorflow-1.14.0-cp36-cp36m-linux_x86_64.whl
	pip3 install -U --no-deps $<
	touch $@

$(EXTSRCDIR)/tensorflow/configure:
	$(DOWNLOAD) tensorflow tensorflow-v1.14.0.tar.gz https://github.com/tensorflow/tensorflow/archive/v1.14.0.tar.gz
	@cd $(EXTSRCDIR)/tensorflow && patch -p1 < $(PATCHDIR)/tensorflow-sl6.patch

$(EXTSRCDIR)/tensorflow-1.14.0-cp36-cp36m-linux_x86_64.whl: $(EXTSRCDIR)/tensorflow/configure $(EXTBINDIR)/bazel
	cd $(EXTBINDIR) && ln -sf python3.8 python
	cd $(EXTSRCDIR)/tensorflow && \
	  GCC_HOST_COMPILER_PATH=`which gcc` \
	  PYTHON_BIN_PATH=`which python3` \
	  PYTHON_LIB_PATH=`python3 -c 'import site; print(site.getsitepackages()[0])'` \
	  TF_NEED_AWS=0 \
	  TF_NEED_KAFKA=0 \
	  TF_NEED_GCP=0 \
	  TF_NEED_S3=0 \
	  TF_NEED_GDR=0 \
	  TF_NEED_CUDA=0 \
	  TF_NEED_HDFS=0 \
	  TF_NEED_OPENCL=0 \
	  TF_NEED_OPENCL_SYCL=0 \
	  TF_NEED_JEMALLOC=0 \
	  TF_DOWNLOAD_CLANG=0 \
	  TF_SET_ANDROID_WORKSPACE=0 \
	  TF_ENABLE_XLA=0 \
	  TF_NEED_VERBS=0 \
	  TF_CUDA_CLANG=0 \
	  TF_NEED_MPI=0 \
	  TF_NEED_ROCM=0 \
	  CC_OPT_FLAGS="-mtune=generic" \
	  ./configure && \
	  bazel build --jobs=$(NPROCESSES) --config=opt --config=mkl \
	    //tensorflow/tools/pip_package:build_pip_package && \
	  bazel-bin/tensorflow/tools/pip_package/build_pip_package $(EXTSRCDIR) && \
	  bazel shutdown
	cd $(EXTBINDIR) && rm python

nlohmann_json.src: $(EXTSRCDIR)/nlohmann_json/nlohmann/json.hpp
nlohmann_json: $(EXTINCDIR)/nlohmann/json.hpp
nlohmann_json.touch:
	@rm -fr $(EXTINCDIR)/nlohmann/json.hpp
nlohmann_json.clean:
	@rm -fr $(EXTSRCDIR)/nlohmann_json $(EXTINCDIR)/nlohmann/

$(EXTSRCDIR)/nlohmann_json/nlohmann/json.hpp:
	$(DOWNLOAD) nlohmann_json nlohmann_json-v3.6.1.zip https://github.com/nlohmann/json/releases/download/v3.6.1/include.zip

$(EXTINCDIR)/nlohmann/json.hpp: $(EXTSRCDIR)/nlohmann_json/nlohmann/json.hpp
	@echo "installing nlohmann/json"
	@cp -fa $(EXTSRCDIR)/nlohmann_json/nlohmann $(EXTINCDIR)


hammer.src: $(EXTSRCDIR)/hammer/CMakeLists.txt
hammer: $(EXTLIBDIR)/libHammer.so
hammer.touch:
	@rm -fr $(EXTLIBDIR)/libHammer.so
hammer.clean:
	@rm -fr $(EXTLIBDIR)/libHammer* $(EXTLIBDIR)/libRates.* $(EXTLIBDIR)/libFormFactors.* $(EXTLIBDIR)/libAmplitudes.* $(EXTBUILDDIR)/hammer $(EXTINCDIR)/Hammer

#Download the hammer software here...
$(EXTSRCDIR)/hammer/CMakeLists.txt:
	$(DOWNLOAD) hammer Hammer-1.0.0-Source.tar.gz https://hammer.physics.lbl.gov/Hammer-1.0.0-Source.tar.gz

#MAX_CXX_IS_14=OFF enables CXX17 support
#BUILD_SHARED_LIBS is necessary for linking the shared BOOST libraries correctly
#WITH_PYTHON=ON for python bindings of the C++ libraries
$(EXTLIBDIR)/libHammer.so: $(EXTSRCDIR)/hammer/CMakeLists.txt
	@echo "building Hammer"
	@mkdir -p $(EXTBUILDDIR)/hammer
	@cd $(EXTBUILDDIR)/hammer && $(CMAKE) $(EXTSRCDIR)/hammer -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$(EXTDIR) -DMAX_CXX_IS_14=OFF -DWITH_ROOT=ON -DENABLE_TESTS=ON -DWITH_PYTHON=ON -DWITH_EXAMPLES=OFF && \
        make -j$(NPROCESSES); make install
	@mv $(EXTDIR)/lib/Hammer/* $(EXTDIR)/lib/ 
	@rm -r $(EXTDIR)/lib/Hammer

